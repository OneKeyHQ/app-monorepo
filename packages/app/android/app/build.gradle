apply plugin: "com.android.application"
apply plugin: "com.facebook.react"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'

import com.android.build.OutputFile

// def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    // entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"

    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/react-native-codegen
    // codegenDir = file("../node_modules/react-native-codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
// def jscFlavor = 'org.webkit:android-jsc:+'
def jscFlavor = 'org.webkit:android-jsc-intl:+'

/**
 * Private function to get the list of Native Architectures you want to build.
 * This reads the value from reactNativeArchitectures in your gradle.properties
 * file and works together with the --active-arch-only flag of react-native run-android.
 */
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}


android {
    ndkVersion rootProject.ext.ndkVersion
    compileSdkVersion rootProject.ext.compileSdkVersion
    namespace 'so.onekey.app.wallet'
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.majorVersion
    }

    defaultConfig {
        applicationId 'so.onekey.app.wallet.dev'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        def appConfig = readRootVersionEnv()

        def appVersion = defEnvStr(appConfig, 'VERSION')
        def appVersionCode = defEnvStr(appConfig, 'BUILD_NUMBER', '1').toInteger()

        println "App Version: " + appVersion
        println "App Version Code: " + appVersionCode

        versionCode appVersionCode
        versionName appVersion
        vectorDrawables.useSupportLibrary = true

        def appEnvConfig = readRootEnv()
        manifestPlaceholders = [
                OTAUpdatesEnable: false,
                JPUSH_APPKEY    : defEnvStr(appEnvConfig, 'JPUSH_KEY'),
                JPUSH_CHANNEL   : 'prod',
        ]

    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include(*reactNativeArchitectures())
        }
    }

    File debugKeystore
    if (file('../keystores/debug.keystore').exists()) {
        debugKeystore = file('../keystores/debug.keystore')
    } else {
        debugKeystore = file('debug.keystore')
    }
    signingConfigs {
        debug {
            storeFile debugKeystore
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    flavorDimensions "channel"
    productFlavors {
        direct {
            dimension "channel"
        }
        huawei {
            dimension "channel"
        }
        google {
            dimension "channel"
        }
        productFlavors.all {
            flavor -> flavor.manifestPlaceholders.put("CHANNEL", name)
        }
    }


    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            resValue "string", "app_name", "OneKey Dev"
            buildConfigField("boolean", "ENABLE_DEV_CLI", "true")
            ndk {
                abiFilters "arm64-v8a", "x86" // enable simulator
            }
        }
        release {
            // to monitor memory usage in release build
            // debuggable true

            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            resValue "string", "app_name", "OneKey"
            buildConfigField("boolean", "ENABLE_DEV_CLI", "false")
            ndk {
                abiFilters "arm64-v8a"
            }
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }

        }
    }


    packagingOptions {
        // (V8) Make sure libjsc.so does not packed in APK
        exclude "**/libjsc.so"
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        // avoid conflict with react-native-bignumber
        // pickFirst "**/libcrypto.so"
        // pickFirst "**/libssl.so"
    }
}


dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    // If your app supports Android versions before Ice Cream Sandwich (API level 14)
    // All fresco packages should use the same version
    if (isGifEnabled || isWebpEnabled) {
        implementation "com.facebook.fresco:fresco:${FRESCO_VERSION}"
        implementation "com.facebook.fresco:imagepipeline-okhttp3:${FRESCO_VERSION}"
    }

    if (isGifEnabled) {
        // For animated gif support
        implementation "com.facebook.fresco:animated-gif:${FRESCO_VERSION}"
    }

    if (isWebpEnabled) {
        // For webp support
        implementation "com.facebook.fresco:webpsupport:${FRESCO_VERSION}"
        if (isWebpAnimatedEnabled) {
            // Animated webp support
            implementation "com.facebook.fresco:animated-webp:${FRESCO_VERSION}"
        }
    }

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
        exclude group: 'com.facebook.fbjni'
    }
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group: 'com.facebook.flipper'
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group: 'com.facebook.flipper'
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    implementation project(path: ':lib-keys-secret')
    implementation project(':lib-tabview')

    // Custom Add Library
    // Lifecycle
    def lifecycle_version = "2.6.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    // Details see https://developer.android.com/training/constraint-layout?hl=zh-cn
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    implementation "androidx.appcompat:appcompat:${ANDROIDX_APPCOMPAT_VERSION}"
    implementation 'com.google.android.material:material:1.6.1'
    implementation "androidx.recyclerview:recyclerview:1.3.0"
    implementation "androidx.fragment:fragment-ktx:1.5.7"

    // Details see https://github.com/google/gson
    implementation 'com.google.code.gson:gson:2.10.1'

    // Details see https://developer.android.com/kotlin/coroutines?hl=zh-cn
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'

    implementation "androidx.coordinatorlayout:coordinatorlayout:1.2.0"

    implementation 'org.nanohttpd:nanohttpd:2.3.1'
}

// configurations.all {
//     exclude group: "com.google.android", module: "cameraview"
// }

apply from: new File(["node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json')"].execute(null, rootDir).text.trim(), "../native_modules.gradle");
applyNativeModulesAppBuildGradle(project)


static def defEnvStr(config, key, defValue = "1") {
    def value = config.getProperty(key)
    if (value == null || value.isEmpty()) {
        def envParam = System.getenv();
        value = envParam.get(key)
    }
    return value ? value : defValue
}

static def readRootVersionEnv() {
    return readRootEnvFile(".env.version")
}

static def readRootEnv() {
    return readRootEnvFile(".env")
}

static def readRootEnvFile(fileName) {
    // base file path: packages/expo/android/
    def rootEnvPath = './../../../'

    def props = new Properties()
    try {
        new File(rootEnvPath + File.separator + fileName).withInputStream {
            stream -> props.load(stream)
        }
    } catch (ignore) {
        // ignore
    }

    return props
}

/**
 * is aab build
 * @return
 */
boolean isBundleBuildType() {
    for (String s : gradle.startParameter.taskNames) {
        if (s.contains("bundle") | s.contains("Bundle")) {
            return true
        }
    }
    return false
}

def isCustomConfigured = false
tasks.whenTaskAdded {
    if (isCustomConfigured) {
        return
    }

    def ota_updates_enable = false
    try {
        ota_updates_enable = (System.getenv("OTA_UPDATE_ENABLE") ?: "false").toBoolean()
    } catch (Exception ignore) {
    }

    def package_name_suffix = System.getenv("APPLICATION_ID_SUFFIX") ?: ""
    println package_name_suffix

    println "defaultConfig whenTaskAdded"
    println ota_updates_enable

    isCustomConfigured = true;

    android.buildTypes.debug {
        if (package_name_suffix != "") {
            applicationIdSuffix "." + package_name_suffix
        }
        manifestPlaceholders.put("OTAUpdatesEnable", ota_updates_enable)
    }
    android.buildTypes.release {
        if (package_name_suffix != "") {
            applicationIdSuffix "." + package_name_suffix
        }
        manifestPlaceholders.put("OTAUpdatesEnable", ota_updates_enable)
    }
}
