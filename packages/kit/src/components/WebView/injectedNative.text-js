(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(window, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../core/node_modules/eventemitter3/index.js":
/*!***************************************************!*\
  !*** ../core/node_modules/eventemitter3/index.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";


var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if (true) {
  module.exports = EventEmitter;
}


/***/ }),

/***/ "../core/node_modules/lodash/_Symbol.js":
/*!**********************************************!*\
  !*** ../core/node_modules/lodash/_Symbol.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(/*! ./_root */ "../core/node_modules/lodash/_root.js");

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),

/***/ "../core/node_modules/lodash/_baseGetTag.js":
/*!**************************************************!*\
  !*** ../core/node_modules/lodash/_baseGetTag.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "../core/node_modules/lodash/_Symbol.js"),
    getRawTag = __webpack_require__(/*! ./_getRawTag */ "../core/node_modules/lodash/_getRawTag.js"),
    objectToString = __webpack_require__(/*! ./_objectToString */ "../core/node_modules/lodash/_objectToString.js");

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),

/***/ "../core/node_modules/lodash/_freeGlobal.js":
/*!**************************************************!*\
  !*** ../core/node_modules/lodash/_freeGlobal.js ***!
  \**************************************************/
/***/ ((module) => {

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;


/***/ }),

/***/ "../core/node_modules/lodash/_getPrototype.js":
/*!****************************************************!*\
  !*** ../core/node_modules/lodash/_getPrototype.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var overArg = __webpack_require__(/*! ./_overArg */ "../core/node_modules/lodash/_overArg.js");

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;


/***/ }),

/***/ "../core/node_modules/lodash/_getRawTag.js":
/*!*************************************************!*\
  !*** ../core/node_modules/lodash/_getRawTag.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "../core/node_modules/lodash/_Symbol.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),

/***/ "../core/node_modules/lodash/_objectToString.js":
/*!******************************************************!*\
  !*** ../core/node_modules/lodash/_objectToString.js ***!
  \******************************************************/
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),

/***/ "../core/node_modules/lodash/_overArg.js":
/*!***********************************************!*\
  !*** ../core/node_modules/lodash/_overArg.js ***!
  \***********************************************/
/***/ ((module) => {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;


/***/ }),

/***/ "../core/node_modules/lodash/_root.js":
/*!********************************************!*\
  !*** ../core/node_modules/lodash/_root.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "../core/node_modules/lodash/_freeGlobal.js");

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),

/***/ "../core/node_modules/lodash/isArray.js":
/*!**********************************************!*\
  !*** ../core/node_modules/lodash/isArray.js ***!
  \**********************************************/
/***/ ((module) => {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;


/***/ }),

/***/ "../core/node_modules/lodash/isFunction.js":
/*!*************************************************!*\
  !*** ../core/node_modules/lodash/isFunction.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "../core/node_modules/lodash/_baseGetTag.js"),
    isObject = __webpack_require__(/*! ./isObject */ "../core/node_modules/lodash/isObject.js");

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;


/***/ }),

/***/ "../core/node_modules/lodash/isObject.js":
/*!***********************************************!*\
  !*** ../core/node_modules/lodash/isObject.js ***!
  \***********************************************/
/***/ ((module) => {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),

/***/ "../core/node_modules/lodash/isObjectLike.js":
/*!***************************************************!*\
  !*** ../core/node_modules/lodash/isObjectLike.js ***!
  \***************************************************/
/***/ ((module) => {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),

/***/ "../core/node_modules/lodash/isPlainObject.js":
/*!****************************************************!*\
  !*** ../core/node_modules/lodash/isPlainObject.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "../core/node_modules/lodash/_baseGetTag.js"),
    getPrototype = __webpack_require__(/*! ./_getPrototype */ "../core/node_modules/lodash/_getPrototype.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "../core/node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;


/***/ }),

/***/ "../core/node_modules/lodash/isString.js":
/*!***********************************************!*\
  !*** ../core/node_modules/lodash/isString.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "../core/node_modules/lodash/_baseGetTag.js"),
    isArray = __webpack_require__(/*! ./isArray */ "../core/node_modules/lodash/isArray.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "../core/node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var stringTag = '[object String]';

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
}

module.exports = isString;


/***/ }),

/***/ "../core/node_modules/ms/index.js":
/*!****************************************!*\
  !*** ../core/node_modules/ms/index.js ***!
  \****************************************/
/***/ ((module) => {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}


/***/ }),

/***/ "../errors/node_modules/fast-safe-stringify/index.js":
/*!***********************************************************!*\
  !*** ../errors/node_modules/fast-safe-stringify/index.js ***!
  \***********************************************************/
/***/ ((module) => {

module.exports = stringify
stringify.default = stringify
stringify.stable = deterministicStringify
stringify.stableStringify = deterministicStringify

var LIMIT_REPLACE_NODE = '[...]'
var CIRCULAR_REPLACE_NODE = '[Circular]'

var arr = []
var replacerStack = []

function defaultOptions () {
  return {
    depthLimit: Number.MAX_SAFE_INTEGER,
    edgesLimit: Number.MAX_SAFE_INTEGER
  }
}

// Regular stringify
function stringify (obj, replacer, spacer, options) {
  if (typeof options === 'undefined') {
    options = defaultOptions()
  }

  decirc(obj, '', 0, [], undefined, 0, options)
  var res
  try {
    if (replacerStack.length === 0) {
      res = JSON.stringify(obj, replacer, spacer)
    } else {
      res = JSON.stringify(obj, replaceGetterValues(replacer), spacer)
    }
  } catch (_) {
    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]')
  } finally {
    while (arr.length !== 0) {
      var part = arr.pop()
      if (part.length === 4) {
        Object.defineProperty(part[0], part[1], part[3])
      } else {
        part[0][part[1]] = part[2]
      }
    }
  }
  return res
}

function setReplace (replace, val, k, parent) {
  var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k)
  if (propertyDescriptor.get !== undefined) {
    if (propertyDescriptor.configurable) {
      Object.defineProperty(parent, k, { value: replace })
      arr.push([parent, k, val, propertyDescriptor])
    } else {
      replacerStack.push([val, k, replace])
    }
  } else {
    parent[k] = replace
    arr.push([parent, k, val])
  }
}

function decirc (val, k, edgeIndex, stack, parent, depth, options) {
  depth += 1
  var i
  if (typeof val === 'object' && val !== null) {
    for (i = 0; i < stack.length; i++) {
      if (stack[i] === val) {
        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent)
        return
      }
    }

    if (
      typeof options.depthLimit !== 'undefined' &&
      depth > options.depthLimit
    ) {
      setReplace(LIMIT_REPLACE_NODE, val, k, parent)
      return
    }

    if (
      typeof options.edgesLimit !== 'undefined' &&
      edgeIndex + 1 > options.edgesLimit
    ) {
      setReplace(LIMIT_REPLACE_NODE, val, k, parent)
      return
    }

    stack.push(val)
    // Optimize for Arrays. Big arrays could kill the performance otherwise!
    if (Array.isArray(val)) {
      for (i = 0; i < val.length; i++) {
        decirc(val[i], i, i, stack, val, depth, options)
      }
    } else {
      var keys = Object.keys(val)
      for (i = 0; i < keys.length; i++) {
        var key = keys[i]
        decirc(val[key], key, i, stack, val, depth, options)
      }
    }
    stack.pop()
  }
}

// Stable-stringify
function compareFunction (a, b) {
  if (a < b) {
    return -1
  }
  if (a > b) {
    return 1
  }
  return 0
}

function deterministicStringify (obj, replacer, spacer, options) {
  if (typeof options === 'undefined') {
    options = defaultOptions()
  }

  var tmp = deterministicDecirc(obj, '', 0, [], undefined, 0, options) || obj
  var res
  try {
    if (replacerStack.length === 0) {
      res = JSON.stringify(tmp, replacer, spacer)
    } else {
      res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer)
    }
  } catch (_) {
    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]')
  } finally {
    // Ensure that we restore the object as it was.
    while (arr.length !== 0) {
      var part = arr.pop()
      if (part.length === 4) {
        Object.defineProperty(part[0], part[1], part[3])
      } else {
        part[0][part[1]] = part[2]
      }
    }
  }
  return res
}

function deterministicDecirc (val, k, edgeIndex, stack, parent, depth, options) {
  depth += 1
  var i
  if (typeof val === 'object' && val !== null) {
    for (i = 0; i < stack.length; i++) {
      if (stack[i] === val) {
        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent)
        return
      }
    }
    try {
      if (typeof val.toJSON === 'function') {
        return
      }
    } catch (_) {
      return
    }

    if (
      typeof options.depthLimit !== 'undefined' &&
      depth > options.depthLimit
    ) {
      setReplace(LIMIT_REPLACE_NODE, val, k, parent)
      return
    }

    if (
      typeof options.edgesLimit !== 'undefined' &&
      edgeIndex + 1 > options.edgesLimit
    ) {
      setReplace(LIMIT_REPLACE_NODE, val, k, parent)
      return
    }

    stack.push(val)
    // Optimize for Arrays. Big arrays could kill the performance otherwise!
    if (Array.isArray(val)) {
      for (i = 0; i < val.length; i++) {
        deterministicDecirc(val[i], i, i, stack, val, depth, options)
      }
    } else {
      // Create a temporary object in the required way
      var tmp = {}
      var keys = Object.keys(val).sort(compareFunction)
      for (i = 0; i < keys.length; i++) {
        var key = keys[i]
        deterministicDecirc(val[key], key, i, stack, val, depth, options)
        tmp[key] = val[key]
      }
      if (typeof parent !== 'undefined') {
        arr.push([parent, k, val])
        parent[k] = tmp
      } else {
        return tmp
      }
    }
    stack.pop()
  }
}

// wraps replacer function to handle values we couldn't replace
// and mark them as replaced value
function replaceGetterValues (replacer) {
  replacer =
    typeof replacer !== 'undefined'
      ? replacer
      : function (k, v) {
        return v
      }
  return function (key, val) {
    if (replacerStack.length > 0) {
      for (var i = 0; i < replacerStack.length; i++) {
        var part = replacerStack[i]
        if (part[1] === key && part[0] === val) {
          val = part[2]
          replacerStack.splice(i, 1)
          break
        }
      }
    }
    return replacer.call(this, key, val)
  }
}


/***/ }),

/***/ "../core/dist/JsBridgeBase.js":
/*!************************************!*\
  !*** ../core/dist/JsBridgeBase.js ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "JsBridgeBase": () => (/* binding */ JsBridgeBase),
/* harmony export */   "isLegacyExtMessage": () => (/* binding */ isLegacyExtMessage)
/* harmony export */ });
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! eventemitter3 */ "../core/node_modules/eventemitter3/index.js");
/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isPlainObject */ "../core/node_modules/lodash/isPlainObject.js");
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isString */ "../core/node_modules/lodash/isString.js");
/* harmony import */ var _loggers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loggers */ "../core/dist/loggers.js");
/* harmony import */ var _onekeyfe_cross_inpage_provider_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @onekeyfe/cross-inpage-provider-types */ "../types/dist/index.js");
/* harmony import */ var _onekeyfe_cross_inpage_provider_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @onekeyfe/cross-inpage-provider-errors */ "../errors/dist/index.js");
/* harmony import */ var _versionInfo__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./versionInfo */ "../core/dist/versionInfo.js");
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};









function isLegacyExtMessage(payload) {
  const payloadObj = payload;
  return Boolean(payloadObj.name) && ['onekey-provider-eth', 'onekey-provider-cfx', 'publicConfig'].includes(payloadObj.name);
}

const BRIDGE_EVENTS = {
  message: 'message',
  error: 'error'
};

class JsBridgeBase extends eventemitter3__WEBPACK_IMPORTED_MODULE_0__ {
  constructor(config = {}) {
    var _a, _b;

    super();
    this.isExtUi = false;
    this.isInjected = false;
    this.sendAsString = true;
    this.globalOnMessageEnabled = true;
    this.providersHub = {// name: []
    }; // Only handle type=REQUEST messages, type=RESPONSE message will be ignored

    this.globalOnMessage = message => __awaiter(this, void 0, void 0, function* () {
      try {
        if (this.config.receiveHandler && this.globalOnMessageEnabled) {
          const returnValue = yield this.config.receiveHandler(message, this);

          if (message.id) {
            this.response({
              id: message.id,
              scope: message.scope,
              remoteId: message.remoteId,
              data: returnValue
            });
          }
        }
      } catch (error) {
        if (message.id && message.type === _onekeyfe_cross_inpage_provider_types__WEBPACK_IMPORTED_MODULE_4__.IJsBridgeMessageTypes.REQUEST) {
          this.responseError({
            id: message.id,
            scope: message.scope,
            remoteId: message.remoteId,
            error
          });
        }

        this.emit(BRIDGE_EVENTS.error, error);
      } finally {// noop
      }
    });

    this.version = _versionInfo__WEBPACK_IMPORTED_MODULE_6__["default"].version;
    this.remoteInfo = {
      origin: '',
      remoteId: ''
    };
    this.debugLogger = _loggers__WEBPACK_IMPORTED_MODULE_3__.appDebugLogger;
    this.callbacks = [];
    this.callbackId = 1;
    this.config = config;
    this.callbacksExpireTimeout = (_a = config.timeout) !== null && _a !== void 0 ? _a : 60 * 1000;
    this.debugLogger = config.debugLogger || _loggers__WEBPACK_IMPORTED_MODULE_3__.appDebugLogger;
    this.sendAsString = (_b = config.sendAsString) !== null && _b !== void 0 ? _b : this.sendAsString;

    if (this.config.receiveHandler) {
      // eslint-disable-next-line @typescript-eslint/no-misused-promises
      this.on(BRIDGE_EVENTS.message, this.globalOnMessage);
    }

    this.on(BRIDGE_EVENTS.error, error => {
      var _a;

      (0,_loggers__WEBPACK_IMPORTED_MODULE_3__.consoleErrorInDev)('JsBridge ERROR: ', error, {
        code: (_a = error) === null || _a === void 0 ? void 0 : _a.code
      });
    });
    this.rejectExpiredCallbacks();
  }

  attachProviderInstance(provider) {
    var _a;

    const name = provider.providerName;

    if (name) {
      this.providersHub[name] = (_a = this.providersHub[name]) !== null && _a !== void 0 ? _a : [];
      this.providersHub[name].push(provider);
    }
  }

  createCallbackId() {
    this.callbackId += 1;
    return this.callbackId;
  }

  createPayload(payload, {
    resolve,
    reject
  }) {
    const {
      id,
      type
    } = payload;

    if (resolve && reject && id && type === _onekeyfe_cross_inpage_provider_types__WEBPACK_IMPORTED_MODULE_4__.IJsBridgeMessageTypes.REQUEST) {
      if (this.callbacks[id]) {
        // TODO custom error
        throw new Error(`JsBridge ERROR: callback exists, id=${id}`);
      }

      this.callbacks[id] = {
        id,
        resolve,
        reject,
        created: Date.now()
      };
    } // convert to plain error object which can be stringify


    if (payload.error) {
      const errorInfo = payload.error;
      payload.error = {
        code: errorInfo.code,
        message: errorInfo.message,
        data: errorInfo.data,
        stack: errorInfo.stack
      };
    } // delete resolve, reject function which can not be send as string


    payload === null || payload === void 0 ? true : delete payload.resolve;
    payload === null || payload === void 0 ? true : delete payload.reject;
    return payload;
  }

  send({
    type,
    data,
    error,
    id,
    remoteId,
    sync = false,
    scope
  }) {
    const executor = (resolve, reject) => {
      var _a; // TODO check resolve when calling without await
      // eslint-disable-next-line @typescript-eslint/naming-convention


      let _id = id; // sendSync without Promise cache

      if (!sync && type === _onekeyfe_cross_inpage_provider_types__WEBPACK_IMPORTED_MODULE_4__.IJsBridgeMessageTypes.REQUEST) {
        _id = this.createCallbackId();
      }

      try {
        const payload = this.createPayload({
          id: _id,
          data,
          error,
          type,
          origin: ((_a = global === null || global === void 0 ? void 0 : global.location) === null || _a === void 0 ? void 0 : _a.origin) || '',
          remoteId,
          scope
        }, {
          resolve,
          reject
        });
        let payloadToSend = payload;

        if (this.sendAsString) {
          payloadToSend = JSON.stringify(payload);
        }

        this.debugLogger.jsBridge('send', payload, '\r\n ------> ', payload.data);
        this.sendPayload(payloadToSend);
      } catch (error) {
        if (_id) {
          this.rejectCallback(_id, error);
        } else {
          this.emit(BRIDGE_EVENTS.error, error);
        }
      }
    };

    if (sync) {
      executor();
      void 0;
    } else {
      return new Promise(executor);
    }
  }

  rejectCallback(id, error) {
    this.processCallback({
      method: 'reject',
      id,
      error
    });
  }

  resolveCallback(id, data) {
    this.processCallback({
      method: 'resolve',
      id,
      data
    });
  }

  processCallback({
    method,
    id,
    data,
    error
  }) {
    const callbackInfo = this.callbacks[id];

    if (callbackInfo) {
      if (method === 'reject') {
        if (callbackInfo.reject) {
          callbackInfo.reject(error);
        }

        this.emit(BRIDGE_EVENTS.error, error);
      }

      if (method === 'resolve') {
        if (callbackInfo.resolve) {
          callbackInfo.resolve(data);
        }
      }

      this.clearCallbackCache(id);
    }
  }

  rejectExpiredCallbacks() {
    if (!this.callbacksExpireTimeout) {
      return;
    }

    const now = Date.now(); // eslint-disable-next-line @typescript-eslint/no-for-in-array

    for (const id in this.callbacks) {
      const callbackInfo = this.callbacks[id];

      if (callbackInfo && callbackInfo.created) {
        if (now - callbackInfo.created > this.callbacksExpireTimeout) {
          const error = _onekeyfe_cross_inpage_provider_errors__WEBPACK_IMPORTED_MODULE_5__.web3Errors.provider.requestTimeout();
          this.rejectCallback(id, error);
        }
      }
    }

    setTimeout(() => {
      this.rejectExpiredCallbacks();
    }, this.callbacksExpireTimeout);
  }

  clearCallbackCache(id) {
    delete this.callbacks[id];
  }

  receive(payloadReceived = '', sender) {
    var _a, _b;

    let payload = {
      data: null
    };

    if (lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_1__(payloadReceived)) {
      payload = payloadReceived;
    }

    if (lodash_isString__WEBPACK_IMPORTED_MODULE_2__(payloadReceived)) {
      try {
        payload = JSON.parse(payloadReceived);
      } catch (error) {
        this.emit(BRIDGE_EVENTS.error, error);
        throw new Error('JsBridge ERROR: JSON.parse payloadReceived failed');
      }
    } // !IMPORTANT: force overwrite origin and internal field
    //    DO NOT trust dapp params


    payload.origin = sender === null || sender === void 0 ? void 0 : sender.origin;
    payload.internal = Boolean(sender === null || sender === void 0 ? void 0 : sender.internal); // ignore legacy Ext publicConfig message

    if ((sender === null || sender === void 0 ? void 0 : sender.internal) && this.isExtUi && isLegacyExtMessage(payload)) {
      return;
    }

    if (!payload.origin && !this.isInjected) {
      (0,_loggers__WEBPACK_IMPORTED_MODULE_3__.consoleErrorInDev)((_a = this === null || this === void 0 ? void 0 : this.constructor) === null || _a === void 0 ? void 0 : _a.name, '[payload.origin] is missing.', this);
      throw new Error('JsBridge ERROR: receive message [payload.origin] is required.');
    }

    if (!payload.internal && !payload.scope) {
      throw new Error('JsBridge ERROR: receive message [payload.scope] is required for non-internal method call.');
    }

    this.debugLogger.jsBridge('receive', payload, {
      sender
    }, '\r\n -----> ', (_b = payload.data) === null || _b === void 0 ? void 0 : _b.result, '\r\n -----> ', payload.data);
    const {
      type,
      id,
      data,
      error,
      origin,
      remoteId
    } = payload;
    this.remoteInfo = {
      origin,
      remoteId
    };

    if (type === _onekeyfe_cross_inpage_provider_types__WEBPACK_IMPORTED_MODULE_4__.IJsBridgeMessageTypes.RESPONSE) {
      if (id === undefined || id === null) {
        throw new Error('JsBridge ERROR: parameter [id] is required in JsBridge.receive() when REQUEST type message');
      }

      const callbackInfo = this.callbacks[id];

      if (callbackInfo) {
        try {
          if (error) {
            this.rejectCallback(id, error);
          } else {
            this.resolveCallback(id, data);
          }
        } catch (error0) {
          this.emit(BRIDGE_EVENTS.error, error0);
        } finally {// noop
        }
      }
    } else if (type === _onekeyfe_cross_inpage_provider_types__WEBPACK_IMPORTED_MODULE_4__.IJsBridgeMessageTypes.REQUEST) {
      const eventMessagePayload = Object.assign(Object.assign({}, payload), {
        created: Date.now()
      }); // https://nodejs.org/api/events.html#capture-rejections-of-promises
      // only type=REQUEST message will be handled by globalOnMessage

      this.emit(BRIDGE_EVENTS.message, eventMessagePayload);
    } else {
      throw new Error(`JsBridge ERROR: payload type not support yet (type=${type || 'undefined'})`);
    }
  }

  requestSync({
    data,
    scope,
    remoteId
  }) {
    void this.send({
      id: undefined,
      type: _onekeyfe_cross_inpage_provider_types__WEBPACK_IMPORTED_MODULE_4__.IJsBridgeMessageTypes.REQUEST,
      scope,
      data,
      remoteId,
      sync: true
    });
  }

  request(info) {
    const {
      data,
      remoteId,
      scope
    } = info;

    if (data === undefined) {
      console.warn('JsBridge ERROR: data required. Call like `bridge.request({ data: {...} });`');
    }

    return this.send({
      type: _onekeyfe_cross_inpage_provider_types__WEBPACK_IMPORTED_MODULE_4__.IJsBridgeMessageTypes.REQUEST,
      data,
      remoteId,
      sync: false,
      scope
    });
  } // send response DATA to remote


  response({
    id,
    data,
    remoteId,
    scope
  }) {
    void this.send({
      type: _onekeyfe_cross_inpage_provider_types__WEBPACK_IMPORTED_MODULE_4__.IJsBridgeMessageTypes.RESPONSE,
      data,
      id,
      remoteId,
      scope,
      sync: true
    });
  } // send response ERROR to remote


  responseError({
    id,
    error,
    scope,
    remoteId
  }) {
    void this.send({
      type: _onekeyfe_cross_inpage_provider_types__WEBPACK_IMPORTED_MODULE_4__.IJsBridgeMessageTypes.RESPONSE,
      error,
      id,
      remoteId,
      scope,
      sync: true
    });
  }

}



/***/ }),

/***/ "../core/dist/ProviderBase.js":
/*!************************************!*\
  !*** ../core/dist/ProviderBase.js ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ProviderBase": () => (/* binding */ ProviderBase)
/* harmony export */ });
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! eventemitter3 */ "../core/node_modules/eventemitter3/index.js");
/* harmony import */ var lodash_isFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isFunction */ "../core/node_modules/lodash/isFunction.js");
/* harmony import */ var _siteMetadata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./siteMetadata */ "../core/dist/siteMetadata.js");
/* harmony import */ var _loggers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loggers */ "../core/dist/loggers.js");
/* harmony import */ var _versionInfo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./versionInfo */ "../core/dist/versionInfo.js");
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};






const METHODS = {
  wallet_getConnectWalletInfo: 'wallet_getConnectWalletInfo',
  wallet_sendSiteMetadata: 'wallet_sendSiteMetadata'
};

class ProviderBase extends eventemitter3__WEBPACK_IMPORTED_MODULE_0__ {
  constructor(config) {
    var _a, _b, _c;

    super();
    this.version = _versionInfo__WEBPACK_IMPORTED_MODULE_4__["default"].version;
    this.isOneKey = true;
    this.debugLogger = _loggers__WEBPACK_IMPORTED_MODULE_3__.fakeDebugLogger;
    this.logger = _loggers__WEBPACK_IMPORTED_MODULE_3__.fakeLogger;

    if (!config.bridge) {
      throw new Error('ProviderBase init error: bridge required.');
    }

    this.config = config;
    this.bridge = config.bridge;
    this.logger = config.logger || _loggers__WEBPACK_IMPORTED_MODULE_3__.fakeLogger; // TODO init this.debugLogger first, and enable debug config after extension connect

    this.debugLogger = ((_a = this.bridge) === null || _a === void 0 ? void 0 : _a.debugLogger) || _loggers__WEBPACK_IMPORTED_MODULE_3__.fakeDebugLogger;
    (_c = (_b = this.bridge) === null || _b === void 0 ? void 0 : _b.debugLogger) === null || _c === void 0 ? void 0 : _c._attachExternalLogger(this.logger);
    setTimeout(() => {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      this.bridge.attachProviderInstance(this);
    }, 0);

    if (config.shouldSendMetadata) {
      void this.sendSiteMetadata();
    }
  }

  configDebugLogger(config) {
    try {
      if (!config || !this.bridge.debugLogger) {
        return;
      }

      const debugLogger = this.bridge.debugLogger;
      (config.enabledKeys || []).forEach(key => {
        debugLogger._createDebugInstance(key);
      });

      if (config.config) {
        debugLogger._debug.enable(config.config);
      } // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment


      window.$onekey = window.$onekey || {}; // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access

      window.$onekey.$debugLogger = debugLogger;
    } catch (error) {
      (0,_loggers__WEBPACK_IMPORTED_MODULE_3__.consoleErrorInDev)('configDebugLogger ERROR:', error);
    }
  }

  getConnectWalletInfo({
    timeout = 3000
  } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
      // eslint-disable-next-line no-async-promise-executor,@typescript-eslint/no-misused-promises
      return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
        const timer = setTimeout(() => {
          resolve(null);
        }, timeout);

        try {
          const result = yield this.bridgeRequest({
            method: METHODS.wallet_getConnectWalletInfo,
            params: [{
              time: Date.now()
            }]
          });

          if (result) {
            result.providerState = result.providerState || {};
          }

          if (result && result.debugLoggerConfig) {
            this.configDebugLogger(result.debugLoggerConfig);
          }

          if (result && result.walletInfo) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            window.$onekey = window.$onekey || {}; // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access

            window.$onekey.$walletInfo = result.walletInfo;
          }

          if (result) {
            resolve(result);
          } else {
            resolve(null);
          }
        } catch (err) {
          // TODO wallet not installed, timeout ERROR
          (0,_loggers__WEBPACK_IMPORTED_MODULE_3__.consoleErrorInDev)('getConnectWalletInfo: ERROR', err);
          resolve(null);
        } finally {
          clearTimeout(timer);
        }
      }));
    });
  }

  bridgeRequest(data, callback) {
    return __awaiter(this, void 0, void 0, function* () {
      let hasCallback = false;

      if (callback && lodash_isFunction__WEBPACK_IMPORTED_MODULE_1__(callback)) {
        hasCallback = true;
      }

      try {
        const payload = {
          data: data !== null && data !== void 0 ? data : {},
          scope: this.providerName
        };
        this.debugLogger.providerBase('bridgeRequest:', payload, '\r\n -----> ', payload.data);
        const resData = yield this.bridge.request(payload);
        const result = resData ? resData.result : undefined;

        if (callback && hasCallback) {
          callback(null, result);
        }

        this.debugLogger.providerBase('bridgeRequest RETURN:', {
          req: payload,
          res: resData
        }, '\r\n -----> ', payload.data, '\r\n -----> ', result);
        return result;
      } catch (error) {
        if (callback && hasCallback) {
          callback(error);
        }

        throw error;
      }
    });
  }

  sendSiteMetadata() {
    return __awaiter(this, void 0, void 0, function* () {
      const metadata = yield _siteMetadata__WEBPACK_IMPORTED_MODULE_2__["default"].getSiteMetadata();
      return yield this.bridgeRequest({
        method: METHODS.wallet_sendSiteMetadata,
        params: metadata
      });
    });
  }

}



/***/ }),

/***/ "../core/dist/consts.js":
/*!******************************!*\
  !*** ../core/dist/consts.js ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "JS_BRIDGE_MESSAGE_IPC_CHANNEL": () => (/* binding */ JS_BRIDGE_MESSAGE_IPC_CHANNEL),
/* harmony export */   "JS_BRIDGE_MESSAGE_EXT_CHANNEL": () => (/* binding */ JS_BRIDGE_MESSAGE_EXT_CHANNEL),
/* harmony export */   "JS_BRIDGE_MESSAGE_EXT_PING": () => (/* binding */ JS_BRIDGE_MESSAGE_EXT_PING),
/* harmony export */   "JS_BRIDGE_MESSAGE_DIRECTION": () => (/* binding */ JS_BRIDGE_MESSAGE_DIRECTION),
/* harmony export */   "EXT_PORT_CS_TO_BG": () => (/* binding */ EXT_PORT_CS_TO_BG),
/* harmony export */   "EXT_PORT_UI_TO_BG": () => (/* binding */ EXT_PORT_UI_TO_BG),
/* harmony export */   "DEBUG_LOGGER_STORAGE_KEY": () => (/* binding */ DEBUG_LOGGER_STORAGE_KEY)
/* harmony export */ });
const JS_BRIDGE_MESSAGE_IPC_CHANNEL = 'onekey@JS_BRIDGE_MESSAGE_IPC_CHANNEL';
const JS_BRIDGE_MESSAGE_EXT_CHANNEL = 'onekey@JS_BRIDGE_MESSAGE_EXT_CHANNEL';
const JS_BRIDGE_MESSAGE_EXT_PING = 'onekey@JS_BRIDGE_MESSAGE_EXT_PING';
const JS_BRIDGE_MESSAGE_DIRECTION = {
  'HOST_TO_INPAGE': 'onekey@JS_BRIDGE_MESSAGE_DIRECTION-HOST_TO_INPAGE',
  'INPAGE_TO_HOST': 'onekey@JS_BRIDGE_MESSAGE_DIRECTION-INPAGE_TO_HOST'
};
const EXT_PORT_CS_TO_BG = 'onekey@EXT_PORT_CS_TO_BG';
const EXT_PORT_UI_TO_BG = 'onekey@EXT_PORT_UI_TO_BG';
const DEBUG_LOGGER_STORAGE_KEY = '$$ONEKEY_DEBUG_LOGGER';

/***/ }),

/***/ "../core/dist/debug/browser.js":
/*!*************************************!*\
  !*** ../core/dist/debug/browser.js ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _consts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../consts */ "../core/dist/consts.js");
/* harmony import */ var ms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ms */ "../core/node_modules/ms/index.js");
/* eslint-disable */
// @ts-nocheck
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
/**
 * This is the web browser implementation of `debug()`.
 */




const storageKey = _consts__WEBPACK_IMPORTED_MODULE_0__.DEBUG_LOGGER_STORAGE_KEY;
const exportsBrowser = {};
exportsBrowser.formatArgs = formatArgs;
exportsBrowser.save = save;
exportsBrowser.load = load;
exportsBrowser.useColors = useColors;
exportsBrowser.storage = customLocalStorage();
exportsBrowser.humanize = ms__WEBPACK_IMPORTED_MODULE_1__;

exportsBrowser.destroy = (() => {
  let warned = false;
  return () => {
    if (!warned) {
      warned = true;
      console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    }
  };
})();
/**
 * Colors.
 */


exportsBrowser.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
    return true;
  } // Internet Explorer and Edge do not support colors.


  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  } // Is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  args[0] = `${(this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ')}+${exportsBrowser.humanize(this.diff)}`;

  if (!this.useColors) {
    return;
  }

  const c = `color: ${this.color}`;
  args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into

  let index = 0;
  let lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, match => {
    if (match === '%%') {
      return;
    }

    index += 1;

    if (match === '%c') {
      // We only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}
/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */


exportsBrowser.log = (...args) => {
  if (console.debug) {
    console.debug(...args);
  } else if (console.log) {
    console.log(...args);
  }
};
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  return __awaiter(this, void 0, void 0, function* () {
    try {
      if (namespaces) {
        yield exportsBrowser.storage.setItem(storageKey, namespaces);
      } else {
        yield exportsBrowser.storage.removeItem(storageKey);
      }
    } catch (error) {
      // Swallow
      // XXX (@Qix-) should we be logging these?
      console.error('debug logger storage error', error);
    }
  });
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  return __awaiter(this, void 0, void 0, function* () {
    let r;

    try {
      r = yield exportsBrowser.storage.getItem(storageKey);
    } catch (error) {
      // Swallow
      // XXX (@Qix-) should we be logging these?
      console.error('debug logger storage error', error);
    } // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


    if (!r && typeof process !== 'undefined' && 'env' in process) {
      r = process.env.DEBUG;
    }

    return r;
  });
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */


function customLocalStorage() {
  try {
    if (typeof global !== 'undefined' && global.$$onekeyAppStorage) {
      return global.$$onekeyAppStorage;
    } // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
    // The Browser also has localStorage in the global context.


    if (typeof window !== 'undefined' && window.localStorage) {
      return window.localStorage;
    }

    console.warn('debugLogger init warning, neither `global.$$onekeyAppStorage` nor `window.localStorage` found.');
    return {
      getItem() {
        return __awaiter(this, void 0, void 0, function* () {
          return '';
        });
      },

      setItem() {
        return __awaiter(this, void 0, void 0, function* () {// noop
        });
      },

      removeItem() {
        return __awaiter(this, void 0, void 0, function* () {// noop
        });
      }

    };
  } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    console.error('debug logger storage error', error);
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (exportsBrowser);

/***/ }),

/***/ "../core/dist/debug/common.js":
/*!************************************!*\
  !*** ../core/dist/debug/common.js ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var ms__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ms */ "../core/node_modules/ms/index.js");
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
/* eslint-disable */
// @ts-nocheck

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */




function setup(env) {
  return __awaiter(this, void 0, void 0, function* () {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = ms__WEBPACK_IMPORTED_MODULE_0__;
    createDebug.destroy = destroy;
    Object.keys(env).forEach(key => {
      createDebug[key] = env[key];
    });
    /**
     * The currently active debug mode names, and names to skip.
     */

    createDebug.names = [];
    createDebug.skips = [];
    /**
     * Map of special "%n" handling functions, for the debug "format" argument.
     *
     * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
     */

    createDebug.formatters = {
      /**
       * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
       */
      j(v) {
        try {
          return JSON.stringify(v);
        } catch (error) {
          return `[UnexpectedJSONParseError]: ${error.message}`;
        }
      }

    };
    /**
     * Selects a color for a debug namespace
     * @param {String} namespace The namespace string for the debug instance to be colored
     * @return {Number|String} An ANSI color code for the given namespace
     * @api private
     */

    function selectColor(namespace) {
      let hash = 0;

      for (let i = 0; i < namespace.length; i++) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0; // Convert to 32bit integer
      }

      return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }

    createDebug.selectColor = selectColor;
    /**
     * Create a debugger with the given `namespace`.
     *
     * @param {String} namespace
     * @return {Function}
     * @api public
     */

    function createDebug(namespace) {
      let prevTime;
      let enableOverride = null;
      let namespacesCache;
      let enabledCache;

      function debug(...args) {
        // Disabled?
        if (!debug.enabled) {
          return;
        }

        const self = debug; // Set `diff` timestamp

        const curr = Number(new Date());
        const ms = curr - (prevTime || curr);
        self.diff = ms;
        self.prev = prevTime;
        self.curr = curr;
        prevTime = curr;
        args[0] = createDebug.coerce(args[0]);

        if (typeof args[0] !== 'string') {
          // Anything else let's inspect with %O
          args.unshift('%O');
        } // Apply any `formatters` transformations


        let index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
          // If we encounter an escaped % then don't increase the array index
          if (match === '%%') {
            return '%';
          }

          index++;
          const formatter = createDebug.formatters[format];

          if (typeof formatter === 'function') {
            const val = args[index];
            match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

            args.splice(index, 1);
            index--;
          }

          return match;
        }); // Apply env-specific formatting (colors, etc.)

        createDebug.formatArgs.call(self, args);
        const logFn = self.log || createDebug.log;
        logFn.apply(self, args);
      }

      debug.namespace = namespace;
      debug.useColors = createDebug.useColors();
      debug.color = createDebug.selectColor(namespace);
      debug.extend = extend;
      debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

      Object.defineProperty(debug, 'enabled', {
        enumerable: true,
        configurable: false,
        get: () => {
          if (enableOverride !== null) {
            return enableOverride;
          }

          if (namespacesCache !== createDebug.namespaces) {
            namespacesCache = createDebug.namespaces;
            enabledCache = createDebug.enabled(namespace);
          }

          return enabledCache;
        },
        set: v => {
          enableOverride = v;
        }
      }); // Env-specific initialization logic for debug instances

      if (typeof createDebug.init === 'function') {
        createDebug.init(debug);
      }

      return debug;
    }

    function extend(namespace, delimiter) {
      const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
      newDebug.log = this.log;
      return newDebug;
    }
    /**
     * Enables a debug mode by namespaces. This can include modes
     * separated by a colon and wildcards.
     *
     * @param {String} namespaces
     * @api public
     */


    function enable(namespaces) {
      return __awaiter(this, void 0, void 0, function* () {
        yield createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
        const len = split.length;

        for (i = 0; i < len; i++) {
          if (!split[i]) {
            // ignore empty strings
            continue;
          }

          namespaces = split[i].replace(/\*/g, '.*?');

          if (namespaces[0] === '-') {
            createDebug.skips.push(new RegExp(`^${namespaces.substr(1)}$`));
          } else {
            createDebug.names.push(new RegExp(`^${namespaces}$`));
          }
        }
      });
    }
    /**
     * Disable debug output.
     *
     * @return {String} namespaces
     * @api public
     */


    function disable() {
      const namespaces = [...createDebug.names.map(toNamespace), ...createDebug.skips.map(toNamespace).map(namespace => `-${namespace}`)].join(',');
      createDebug.enable('');
      return namespaces;
    }
    /**
     * Returns true if the given mode name is enabled, false otherwise.
     *
     * @param {String} name
     * @return {Boolean}
     * @api public
     */


    function enabled(name) {
      if (name[name.length - 1] === '*') {
        return true;
      }

      let i;
      let len;

      for (i = 0, len = createDebug.skips.length; i < len; i++) {
        if (createDebug.skips[i].test(name)) {
          return false;
        }
      }

      for (i = 0, len = createDebug.names.length; i < len; i++) {
        if (createDebug.names[i].test(name)) {
          return true;
        }
      }

      return false;
    }
    /**
     * Convert regexp to namespace
     *
     * @param {RegExp} regxep
     * @return {String} namespace
     * @api private
     */


    function toNamespace(regexp) {
      return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
    }
    /**
     * Coerce `val`.
     *
     * @param {Mixed} val
     * @return {Mixed}
     * @api private
     */


    function coerce(val) {
      if (val instanceof Error) {
        return val.stack || val.message;
      }

      return val;
    }
    /**
     * XXX DO NOT USE. This is a temporary stub function.
     * XXX It WILL be removed in the next major release.
     */


    function destroy() {
      console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    }

    const config = yield createDebug.load();
    yield createDebug.enable(config);
    return createDebug;
  });
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (setup);

/***/ }),

/***/ "../core/dist/debug/index.js":
/*!***********************************!*\
  !*** ../core/dist/debug/index.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common */ "../core/dist/debug/common.js");
/* harmony import */ var _browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./browser */ "../core/dist/debug/browser.js");
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};




function createDebugAsync() {
  return __awaiter(this, void 0, void 0, function* () {
    return (0,_common__WEBPACK_IMPORTED_MODULE_0__["default"])(_browser__WEBPACK_IMPORTED_MODULE_1__["default"]);
  });
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createDebugAsync);

/***/ }),

/***/ "../core/dist/index.js":
/*!*****************************!*\
  !*** ../core/dist/index.js ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "JsBridgeBase": () => (/* reexport safe */ _JsBridgeBase__WEBPACK_IMPORTED_MODULE_0__.JsBridgeBase),
/* harmony export */   "isLegacyExtMessage": () => (/* reexport safe */ _JsBridgeBase__WEBPACK_IMPORTED_MODULE_0__.isLegacyExtMessage),
/* harmony export */   "ProviderBase": () => (/* reexport safe */ _ProviderBase__WEBPACK_IMPORTED_MODULE_1__.ProviderBase),
/* harmony export */   "appDebugLogger": () => (/* reexport safe */ _loggers__WEBPACK_IMPORTED_MODULE_2__.appDebugLogger),
/* harmony export */   "consoleErrorInDev": () => (/* reexport safe */ _loggers__WEBPACK_IMPORTED_MODULE_2__.consoleErrorInDev),
/* harmony export */   "fakeDebugLogger": () => (/* reexport safe */ _loggers__WEBPACK_IMPORTED_MODULE_2__.fakeDebugLogger),
/* harmony export */   "fakeLogger": () => (/* reexport safe */ _loggers__WEBPACK_IMPORTED_MODULE_2__.fakeLogger),
/* harmony export */   "injectJsBridge": () => (/* reexport safe */ _injectJsBridge__WEBPACK_IMPORTED_MODULE_3__.injectJsBridge),
/* harmony export */   "injectedProviderReceiveHandler": () => (/* reexport safe */ _injectedProviderReceiveHandler__WEBPACK_IMPORTED_MODULE_4__.injectedProviderReceiveHandler),
/* harmony export */   "consts": () => (/* reexport module object */ _consts__WEBPACK_IMPORTED_MODULE_5__),
/* harmony export */   "injectedFactory": () => (/* reexport safe */ _injectedFactory__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   "siteMetadata": () => (/* reexport safe */ _siteMetadata__WEBPACK_IMPORTED_MODULE_7__["default"]),
/* harmony export */   "versionInfo": () => (/* reexport safe */ _versionInfo__WEBPACK_IMPORTED_MODULE_8__["default"])
/* harmony export */ });
/* harmony import */ var _JsBridgeBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JsBridgeBase */ "../core/dist/JsBridgeBase.js");
/* harmony import */ var _ProviderBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ProviderBase */ "../core/dist/ProviderBase.js");
/* harmony import */ var _loggers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loggers */ "../core/dist/loggers.js");
/* harmony import */ var _injectJsBridge__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./injectJsBridge */ "../core/dist/injectJsBridge.js");
/* harmony import */ var _injectedProviderReceiveHandler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./injectedProviderReceiveHandler */ "../core/dist/injectedProviderReceiveHandler.js");
/* harmony import */ var _consts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./consts */ "../core/dist/consts.js");
/* harmony import */ var _injectedFactory__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./injectedFactory */ "../core/dist/injectedFactory.js");
/* harmony import */ var _siteMetadata__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./siteMetadata */ "../core/dist/siteMetadata.js");
/* harmony import */ var _versionInfo__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./versionInfo */ "../core/dist/versionInfo.js");













/***/ }),

/***/ "../core/dist/injectJsBridge.js":
/*!**************************************!*\
  !*** ../core/dist/injectJsBridge.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "injectJsBridge": () => (/* binding */ injectJsBridge)
/* harmony export */ });
/* harmony import */ var _consts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./consts */ "../core/dist/consts.js");


function fixGlobalShim() {
  // FIX errors in ReactNative
  //    ReferenceError: Can't find variable: global
  // @ts-ignore
  window.global = window.global || window || window.globalThis; // @ts-ignore

  window.global = window.global || window || window.globalThis;
}

function injectJsBridge(bridgeCreator) {
  var _a;

  fixGlobalShim();

  if (!((_a = window === null || window === void 0 ? void 0 : window.$onekey) === null || _a === void 0 ? void 0 : _a.jsBridge)) {
    window.$onekey = window.$onekey || {};
    window.$onekey.jsBridge = bridgeCreator();

    if (typeof localStorage !== 'undefined' && localStorage.getItem(_consts__WEBPACK_IMPORTED_MODULE_0__.DEBUG_LOGGER_STORAGE_KEY)) {
      console.log('===== jsBridge injected success! >>>>> ', performance.now());
    }
  }

  return window.$onekey.jsBridge;
}



/***/ }),

/***/ "../core/dist/injectedFactory.js":
/*!***************************************!*\
  !*** ../core/dist/injectedFactory.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function createCodeWithScriptTag({
  code
}) {
  // script id check, only inject once.
  return `
    (function(){
      const s = document.createElement('script');
      s.setAttribute('async', 'false');
      s.setAttribute('data-onekey-injected', 'true');
      s.textContent=${JSON.stringify(code)};
      (document.head || document.documentElement).appendChild(s);
      s.remove();
    })();
  `;
}

function injectCodeWithScriptTag({
  code,
  file,
  remove = true
}) {
  (function () {
    const s = document.createElement('script');
    s.setAttribute('async', 'false');
    s.setAttribute('defer', 'false');
    s.setAttribute('data-onekey-injected', 'true');

    if (code) {
      s.textContent = JSON.stringify(code);
    }

    if (file) {
      s.src = file;
    }

    s.onload = function () {
      if (remove && file) {
        s.remove();
      }
    };

    (document.head || document.documentElement).appendChild(s);

    if (remove && code) {
      s.remove();
    }
  })();
}

function createCodeJsBridgeReceive(payloadStr) {
  return `
  if(window.$onekey && window.$onekey.jsBridge){
    window.$onekey.jsBridge.receive(${JSON.stringify(payloadStr)});
  }
  void 0;
  `;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  injectCodeWithScriptTag,
  createCodeWithScriptTag,
  createCodeJsBridgeReceive
});

/***/ }),

/***/ "../core/dist/injectedProviderReceiveHandler.js":
/*!******************************************************!*\
  !*** ../core/dist/injectedProviderReceiveHandler.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "injectedProviderReceiveHandler": () => (/* binding */ injectedProviderReceiveHandler)
/* harmony export */ });
/* harmony import */ var _loggers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loggers */ "../core/dist/loggers.js");


function injectedProviderReceiveHandler(payload, bridge) {
  // ethereum, solana, conflux
  const providerHub = (bridge === null || bridge === void 0 ? void 0 : bridge.providersHub) || window.$onekey;
  const providerName = payload.scope;
  const payloadData = payload.data;

  if (!providerName) {
    (0,_loggers__WEBPACK_IMPORTED_MODULE_0__.consoleErrorInDev)('providerName (scope) is required in injectedProviderReceiveHandler.');
    return;
  }

  const providers = [].concat(providerHub[providerName]).filter(Boolean);

  if (!providers || !providers.length) {
    (0,_loggers__WEBPACK_IMPORTED_MODULE_0__.consoleErrorInDev)(`[${providerName}] provider is NOT injected to document or bridge.`);
    return;
  } // emit events to injected provider


  providers.forEach(provider => {
    if (provider && provider.emit) {
      provider.emit('message_low_level', payloadData);
    }
  });
}



/***/ }),

/***/ "../core/dist/loggers.js":
/*!*******************************!*\
  !*** ../core/dist/loggers.js ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fakeDebugLogger": () => (/* binding */ fakeDebugLogger),
/* harmony export */   "appDebugLogger": () => (/* binding */ appDebugLogger),
/* harmony export */   "fakeLogger": () => (/* binding */ fakeLogger),
/* harmony export */   "consoleErrorInDev": () => (/* binding */ consoleErrorInDev)
/* harmony export */ });
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug */ "../core/dist/debug/index.js");
/* harmony import */ var _consts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./consts */ "../core/dist/consts.js");
// @ts-ignore

 // enable debugLogger:
//    localStorage.setItem('$$ONEKEY_DEBUG_LOGGER', '*');

function consoleErrorInDev(...args) {
  const loggerConfig = typeof localStorage !== 'undefined' && localStorage.getItem(_consts__WEBPACK_IMPORTED_MODULE_1__.DEBUG_LOGGER_STORAGE_KEY);

  if (true) {
    console.error(...args);
  }
}

const fakeLogger = {
  // @ts-ignore
  _isFakeLogger: true,
  log: (...args) => undefined,
  warn: (...args) => undefined,
  error: (...args) => undefined,
  debug: (...args) => undefined,
  info: (...args) => undefined,
  trace: (...args) => undefined
};

class FakeDebugLogger {
  constructor() {
    this._debug = {
      enable(config) {//noop
      }

    };
    this._externalLogger = fakeLogger;

    this._createExternalLog = name => (...args) => {
      const _logger = this._externalLogger;

      if (_logger) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        return _logger.log(name, ...args);
      }
    };

    this.jsBridge = this._createExternalLog('jsBridge >>');
    this.providerBase = this._createExternalLog('providerBase >>');
    this.extInjected = this._createExternalLog('extInjected >>');
    this.extContentScripts = this._createExternalLog('extContentScripts >>');
    this.webview = this._createExternalLog('webview >>');
    this.desktopInjected = this._createExternalLog('desktopInjected >>');
    this.ethereum = this._createExternalLog('ethereum >>');
  }

  _attachExternalLogger(logger) {
    if (logger) {
      this._externalLogger = logger;
    }
  }

  _createDebugInstance(name) {// noop
  }

}

class AppDebugLogger extends FakeDebugLogger {
  constructor() {
    super();
    this._debugInstanceCreatedMap = {};
    void (0,_debug__WEBPACK_IMPORTED_MODULE_0__["default"])().then(debug => this._debug = debug);
  }

  _createDebugInstance(name) {
    if (this._debugInstanceCreatedMap[name]) {
      return;
    }

    this._debugInstanceCreatedMap[name] = true;

    if (name && this._debug && typeof this._debug === 'function') {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-assignment
      const _debugLog = this._debug(name); // @ts-ignore


      const _originLog = this[name]; // @ts-ignore
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-assignment

      this[name] = (...args) => {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        _debugLog(...args);

        if (_originLog && typeof _originLog === 'function') {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
          _originLog(...args);
        }
      };
    }
  }

} // TODO merge FakeDebugLogger and AppDebugLogger to single class


const fakeDebugLogger = new FakeDebugLogger();
const appDebugLogger = new AppDebugLogger();


/***/ }),

/***/ "../core/dist/siteMetadata.js":
/*!************************************!*\
  !*** ../core/dist/siteMetadata.js ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
/**
 * Returns whether the given image URL exists
 * @param url - the url of the image
 * @returns Whether the image exists.
 */


function imgExists(url) {
  return new Promise((resolve, reject) => {
    try {
      const img = document.createElement('img');

      img.onload = () => resolve(true);

      img.onerror = () => resolve(false);

      img.src = url;
    } catch (e) {
      reject(e);
    }
  });
}
/**
 * Gets site metadata and returns it
 *
 */


function getSiteMetadata() {
  return __awaiter(this, void 0, void 0, function* () {
    return {
      name: getSiteName(window),
      icon: yield getSiteIcon(window)
    };
  });
}
/**
 * Extracts a name for the site from the DOM
 */


function getSiteName(windowObject) {
  const {
    document
  } = windowObject;
  const siteName = document.querySelector('head > meta[property="og:site_name"]');

  if (siteName) {
    return siteName.content;
  }

  const metaTitle = document.querySelector('head > meta[name="title"]');

  if (metaTitle) {
    return metaTitle.content;
  }

  if (document.title && document.title.length > 0) {
    return document.title;
  }

  return window.location.hostname;
}
/**
 * Extracts an icon for the site from the DOM
 * @returns an icon URL
 */


function getSiteIcon(windowObject) {
  return __awaiter(this, void 0, void 0, function* () {
    const {
      document
    } = windowObject;
    const icons = document.querySelectorAll('head > link[rel~="icon"]'); // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore

    const iconsArr = icons;

    for (const icon of iconsArr) {
      if (icon && (yield imgExists(icon.href))) {
        return icon.href;
      }
    }

    return null;
  });
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  getSiteMetadata,
  getSiteIcon,
  getSiteName,
  imgExists
});

/***/ }),

/***/ "../core/dist/versionInfo.js":
/*!***********************************!*\
  !*** ../core/dist/versionInfo.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const version = '0.0.7-alpha.0';
const versionBuild = '2020-0101-1';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  version,
  versionBuild
});

/***/ }),

/***/ "../errors/dist/classes.js":
/*!*********************************!*\
  !*** ../errors/dist/classes.js ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Web3RpcError": () => (/* binding */ Web3RpcError),
/* harmony export */   "Web3ProviderError": () => (/* binding */ Web3ProviderError)
/* harmony export */ });
/* harmony import */ var fast_safe_stringify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fast-safe-stringify */ "../errors/node_modules/fast-safe-stringify/index.js");

/**
 * Error subclass implementing JSON RPC 2.0 errors and Web3 RPC errors
 * per EIP-1474.
 * Permits any integer error code.
 */

class Web3RpcError extends Error {
  constructor(code, message, data) {
    if (!Number.isInteger(code)) {
      throw new Error('"code" must be an integer.');
    }

    if (!message || typeof message !== 'string') {
      throw new Error('"message" must be a nonempty string.');
    }

    super(message);
    this.code = code;

    if (data !== undefined) {
      this.data = data;
    }
  }
  /**
   * Returns a plain object with all public class properties.
   */


  serialize() {
    const serialized = {
      code: this.code,
      message: this.message
    };

    if (this.data !== undefined) {
      serialized.data = this.data;
    }

    if (this.stack) {
      serialized.stack = this.stack;
    }

    return serialized;
  }
  /**
   * Return a string representation of the serialized error, omitting
   * any circular references.
   */


  toString() {
    return fast_safe_stringify__WEBPACK_IMPORTED_MODULE_0__(this.serialize(), stringifyReplacer, 2);
  }

}
/**
 * Error subclass implementing Web3 Provider errors per EIP-1193.
 * Permits integer error codes in the [ 1000 <= 4999 ] range.
 */

class Web3ProviderError extends Web3RpcError {
  /**
   * Create an Web3 Provider JSON-RPC error.
   * `code` must be an integer in the 1000 <= 4999 range.
   */
  constructor(code, message, data) {
    if (!isValidWeb3ProviderCode(code)) {
      throw new Error('"code" must be an integer such that: 1000 <= code <= 4999');
    }

    super(code, message, data);
  }

} // Internal

function isValidWeb3ProviderCode(code) {
  return Number.isInteger(code) && code >= 1000 && code <= 4999;
}

function stringifyReplacer(_, value) {
  if (value === '[Circular]') {
    return undefined;
  }

  return value;
}

/***/ }),

/***/ "../errors/dist/error-constants.js":
/*!*****************************************!*\
  !*** ../errors/dist/error-constants.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "errorCodes": () => (/* binding */ errorCodes),
/* harmony export */   "errorValues": () => (/* binding */ errorValues)
/* harmony export */ });
const errorCodes = {
  rpc: {
    invalidInput: -32000,
    resourceNotFound: -32001,
    resourceUnavailable: -32002,
    transactionRejected: -32003,
    methodNotSupported: -32004,
    limitExceeded: -32005,
    parse: -32700,
    invalidRequest: -32600,
    methodNotFound: -32601,
    invalidParams: -32602,
    internal: -32603
  },
  provider: {
    userRejectedRequest: 4001,
    unauthorized: 4100,
    unsupportedMethod: 4200,
    disconnected: 4900,
    chainDisconnected: 4901,
    requestTimeout: 4500
  }
};
const errorValues = {
  '-32700': {
    standard: 'JSON RPC 2.0',
    message: 'Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.'
  },
  '-32600': {
    standard: 'JSON RPC 2.0',
    message: 'The JSON sent is not a valid Request object.'
  },
  '-32601': {
    standard: 'JSON RPC 2.0',
    message: 'The method does not exist / is not available.'
  },
  '-32602': {
    standard: 'JSON RPC 2.0',
    message: 'Invalid method parameter(s).'
  },
  '-32603': {
    standard: 'JSON RPC 2.0',
    message: 'Internal JSON-RPC error.'
  },
  '-32000': {
    standard: 'EIP-1474',
    message: 'Invalid input.'
  },
  '-32001': {
    standard: 'EIP-1474',
    message: 'Resource not found.'
  },
  '-32002': {
    standard: 'EIP-1474',
    message: 'Resource unavailable.'
  },
  '-32003': {
    standard: 'EIP-1474',
    message: 'Transaction rejected.'
  },
  '-32004': {
    standard: 'EIP-1474',
    message: 'Method not supported.'
  },
  '-32005': {
    standard: 'EIP-1474',
    message: 'Request limit exceeded.'
  },
  '4001': {
    standard: 'EIP-1193',
    message: 'User rejected the request.'
  },
  '4100': {
    standard: 'EIP-1193',
    message: 'The requested account and/or method has not been authorized by the user.'
  },
  '4200': {
    standard: 'EIP-1193',
    message: 'The requested method is not supported by this Web3 provider.'
  },
  '4900': {
    standard: 'EIP-1193',
    message: 'The provider is disconnected from all chains.'
  },
  '4901': {
    standard: 'EIP-1193',
    message: 'The provider is disconnected from the specified chain.'
  },
  '4500': {
    standard: '',
    message: 'The request by this Web3 provider is timeout.'
  }
}; // https://eips.ethereum.org/EIPS/eip-1474#error-codes
// https://eips.ethereum.org/EIPS/eip-1193#provider-errors

/***/ }),

/***/ "../errors/dist/errors.js":
/*!********************************!*\
  !*** ../errors/dist/errors.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "web3Errors": () => (/* binding */ web3Errors)
/* harmony export */ });
/* harmony import */ var _classes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./classes */ "../errors/dist/classes.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "../errors/dist/utils.js");
/* harmony import */ var _error_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./error-constants */ "../errors/dist/error-constants.js");



const web3Errors = {
  rpc: {
    /**
     * Get a JSON RPC 2.0 Parse (-32700) error.
     */
    parse: arg => getWeb3JsonRpcError(_error_constants__WEBPACK_IMPORTED_MODULE_2__.errorCodes.rpc.parse, arg),

    /**
     * Get a JSON RPC 2.0 Invalid Request (-32600) error.
     */
    invalidRequest: arg => getWeb3JsonRpcError(_error_constants__WEBPACK_IMPORTED_MODULE_2__.errorCodes.rpc.invalidRequest, arg),

    /**
     * Get a JSON RPC 2.0 Invalid Params (-32602) error.
     */
    invalidParams: arg => getWeb3JsonRpcError(_error_constants__WEBPACK_IMPORTED_MODULE_2__.errorCodes.rpc.invalidParams, arg),

    /**
     * Get a JSON RPC 2.0 Method Not Found (-32601) error.
     */
    methodNotFound: arg => getWeb3JsonRpcError(_error_constants__WEBPACK_IMPORTED_MODULE_2__.errorCodes.rpc.methodNotFound, arg),

    /**
     * Get a JSON RPC 2.0 Internal (-32603) error.
     */
    internal: arg => getWeb3JsonRpcError(_error_constants__WEBPACK_IMPORTED_MODULE_2__.errorCodes.rpc.internal, arg),

    /**
     * Get a JSON RPC 2.0 Server error.
     * Permits integer error codes in the [ -32099 <= -32005 ] range.
     * Codes -32000 through -32004 are reserved by EIP-1474.
     */
    server: opts => {
      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {
        throw new Error('Web3 RPC Server errors must provide single object argument.');
      }

      const {
        code
      } = opts;

      if (!Number.isInteger(code) || code > -32005 || code < -32099) {
        throw new Error('"code" must be an integer such that: -32099 <= code <= -32005');
      }

      return getWeb3JsonRpcError(code, opts);
    },

    /**
     * Get an Web3 JSON RPC Invalid Input (-32000) error.
     */
    invalidInput: arg => getWeb3JsonRpcError(_error_constants__WEBPACK_IMPORTED_MODULE_2__.errorCodes.rpc.invalidInput, arg),

    /**
     * Get an Web3 JSON RPC Resource Not Found (-32001) error.
     */
    resourceNotFound: arg => getWeb3JsonRpcError(_error_constants__WEBPACK_IMPORTED_MODULE_2__.errorCodes.rpc.resourceNotFound, arg),

    /**
     * Get an Web3 JSON RPC Resource Unavailable (-32002) error.
     */
    resourceUnavailable: arg => getWeb3JsonRpcError(_error_constants__WEBPACK_IMPORTED_MODULE_2__.errorCodes.rpc.resourceUnavailable, arg),

    /**
     * Get an Web3 JSON RPC Transaction Rejected (-32003) error.
     */
    transactionRejected: arg => getWeb3JsonRpcError(_error_constants__WEBPACK_IMPORTED_MODULE_2__.errorCodes.rpc.transactionRejected, arg),

    /**
     * Get an Web3 JSON RPC Method Not Supported (-32004) error.
     */
    methodNotSupported: arg => getWeb3JsonRpcError(_error_constants__WEBPACK_IMPORTED_MODULE_2__.errorCodes.rpc.methodNotSupported, arg),

    /**
     * Get an Web3 JSON RPC Limit Exceeded (-32005) error.
     */
    limitExceeded: arg => getWeb3JsonRpcError(_error_constants__WEBPACK_IMPORTED_MODULE_2__.errorCodes.rpc.limitExceeded, arg)
  },
  provider: {
    /**
     * Get an Web3 Provider User Rejected Request (4001) error.
     */
    userRejectedRequest: arg => {
      return getWeb3ProviderError(_error_constants__WEBPACK_IMPORTED_MODULE_2__.errorCodes.provider.userRejectedRequest, arg);
    },

    /**
     * Get an Web3 Provider Unauthorized (4100) error.
     */
    unauthorized: arg => {
      return getWeb3ProviderError(_error_constants__WEBPACK_IMPORTED_MODULE_2__.errorCodes.provider.unauthorized, arg);
    },

    /**
     * Get an Web3 Provider Unsupported Method (4200) error.
     */
    unsupportedMethod: arg => {
      return getWeb3ProviderError(_error_constants__WEBPACK_IMPORTED_MODULE_2__.errorCodes.provider.unsupportedMethod, arg);
    },

    /**
     * Get an Web3 Provider Not Connected (4900) error.
     */
    disconnected: arg => {
      return getWeb3ProviderError(_error_constants__WEBPACK_IMPORTED_MODULE_2__.errorCodes.provider.disconnected, arg);
    },

    /**
     * Get an Web3 Provider Chain Not Connected (4901) error.
     */
    chainDisconnected: arg => {
      return getWeb3ProviderError(_error_constants__WEBPACK_IMPORTED_MODULE_2__.errorCodes.provider.chainDisconnected, arg);
    },
    requestTimeout: arg => {
      return getWeb3ProviderError(_error_constants__WEBPACK_IMPORTED_MODULE_2__.errorCodes.provider.requestTimeout, arg);
    },

    /**
     * Get a custom Web3 Provider error.
     */
    custom: opts => {
      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {
        throw new Error('Web3 Provider custom errors must provide single object argument.');
      }

      const {
        code,
        message,
        data
      } = opts;

      if (!message || typeof message !== 'string') {
        throw new Error('"message" must be a nonempty string');
      }

      return new _classes__WEBPACK_IMPORTED_MODULE_0__.Web3ProviderError(code, message, data);
    }
  }
}; // Internal

function getWeb3JsonRpcError(code, arg) {
  const [message, data] = parseOpts(arg);
  return new _classes__WEBPACK_IMPORTED_MODULE_0__.Web3RpcError(code, message || (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getMessageFromCode)(code), data);
}

function getWeb3ProviderError(code, arg) {
  const [message, data] = parseOpts(arg);
  return new _classes__WEBPACK_IMPORTED_MODULE_0__.Web3ProviderError(code, message || (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getMessageFromCode)(code), data);
}

function parseOpts(arg) {
  if (arg) {
    if (typeof arg === 'string') {
      return [arg];
    } else if (typeof arg === 'object' && !Array.isArray(arg)) {
      const {
        message,
        data
      } = arg;

      if (message && typeof message !== 'string') {
        throw new Error('Must specify string message.');
      }

      return [message || undefined, data];
    }
  }

  return [];
}

/***/ }),

/***/ "../errors/dist/index.js":
/*!*******************************!*\
  !*** ../errors/dist/index.js ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "errorCodes": () => (/* reexport safe */ _error_constants__WEBPACK_IMPORTED_MODULE_3__.errorCodes),
/* harmony export */   "web3Errors": () => (/* reexport safe */ _errors__WEBPACK_IMPORTED_MODULE_2__.web3Errors),
/* harmony export */   "Web3RpcError": () => (/* reexport safe */ _classes__WEBPACK_IMPORTED_MODULE_0__.Web3RpcError),
/* harmony export */   "Web3ProviderError": () => (/* reexport safe */ _classes__WEBPACK_IMPORTED_MODULE_0__.Web3ProviderError),
/* harmony export */   "serializeError": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_1__.serializeError),
/* harmony export */   "getMessageFromCode": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_1__.getMessageFromCode)
/* harmony export */ });
/* harmony import */ var _classes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./classes */ "../errors/dist/classes.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "../errors/dist/utils.js");
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors */ "../errors/dist/errors.js");
/* harmony import */ var _error_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error-constants */ "../errors/dist/error-constants.js");






/***/ }),

/***/ "../errors/dist/utils.js":
/*!*******************************!*\
  !*** ../errors/dist/utils.js ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "JSON_RPC_SERVER_ERROR_MESSAGE": () => (/* binding */ JSON_RPC_SERVER_ERROR_MESSAGE),
/* harmony export */   "getMessageFromCode": () => (/* binding */ getMessageFromCode),
/* harmony export */   "isValidCode": () => (/* binding */ isValidCode),
/* harmony export */   "serializeError": () => (/* binding */ serializeError)
/* harmony export */ });
/* harmony import */ var _error_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error-constants */ "../errors/dist/error-constants.js");
/* harmony import */ var _classes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./classes */ "../errors/dist/classes.js");


const FALLBACK_ERROR_CODE = _error_constants__WEBPACK_IMPORTED_MODULE_0__.errorCodes.rpc.internal;
const FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.';
const FALLBACK_ERROR = {
  code: FALLBACK_ERROR_CODE,
  message: getMessageFromCode(FALLBACK_ERROR_CODE)
};
const JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';
/**
 * Gets the message for a given code, or a fallback message if the code has
 * no corresponding message.
 */

function getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {
  if (Number.isInteger(code)) {
    const codeString = code.toString();

    if (hasKey(_error_constants__WEBPACK_IMPORTED_MODULE_0__.errorValues, codeString)) {
      return _error_constants__WEBPACK_IMPORTED_MODULE_0__.errorValues[codeString].message;
    }

    if (isJsonRpcServerError(code)) {
      return JSON_RPC_SERVER_ERROR_MESSAGE;
    }
  }

  return fallbackMessage;
}
/**
 * Returns whether the given code is valid.
 * A code is only valid if it has a message.
 */

function isValidCode(code) {
  if (!Number.isInteger(code)) {
    return false;
  }

  const codeString = code.toString();

  if (_error_constants__WEBPACK_IMPORTED_MODULE_0__.errorValues[codeString]) {
    return true;
  }

  if (isJsonRpcServerError(code)) {
    return true;
  }

  return false;
}
/**
 * Serializes the given error to an Web3 JSON RPC-compatible error object.
 * Merely copies the given error's values if it is already compatible.
 * If the given error is not fully compatible, it will be preserved on the
 * returned object's data.originalError property.
 */

function serializeError(error, {
  fallbackError = FALLBACK_ERROR,
  shouldIncludeStack = false
} = {}) {
  var _a, _b;

  if (!fallbackError || !Number.isInteger(fallbackError.code) || typeof fallbackError.message !== 'string') {
    throw new Error('Must provide fallback error with integer number code and string message.');
  }

  if (error instanceof _classes__WEBPACK_IMPORTED_MODULE_1__.Web3RpcError) {
    return error.serialize();
  }

  const serialized = {};

  if (error && typeof error === 'object' && !Array.isArray(error) && hasKey(error, 'code') && isValidCode(error.code)) {
    const _error = error;
    serialized.code = _error.code;

    if (_error.message && typeof _error.message === 'string') {
      serialized.message = _error.message;

      if (hasKey(_error, 'data')) {
        serialized.data = _error.data;
      }
    } else {
      serialized.message = getMessageFromCode(serialized.code);
      serialized.data = {
        originalError: assignOriginalError(error)
      };
    }
  } else {
    serialized.code = fallbackError.code;
    const message = (_a = error) === null || _a === void 0 ? void 0 : _a.message;
    serialized.message = message && typeof message === 'string' ? message : fallbackError.message;
    serialized.data = {
      originalError: assignOriginalError(error)
    };
  }

  const stack = (_b = error) === null || _b === void 0 ? void 0 : _b.stack;

  if (shouldIncludeStack && error && stack && typeof stack === 'string') {
    serialized.stack = stack;
  }

  return serialized;
} // Internal

function isJsonRpcServerError(code) {
  return code >= -32099 && code <= -32000;
}

function assignOriginalError(error) {
  if (error && typeof error === 'object' && !Array.isArray(error)) {
    return Object.assign({}, error);
  }

  return error;
}

function hasKey(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

/***/ }),

/***/ "../native/native-bridge-injected/dist/JsBridgeNativeInjected.js":
/*!***********************************************************************!*\
  !*** ../native/native-bridge-injected/dist/JsBridgeNativeInjected.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "JsBridgeNativeInjected": () => (/* binding */ JsBridgeNativeInjected)
/* harmony export */ });
/* harmony import */ var _onekeyfe_cross_inpage_provider_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onekeyfe/cross-inpage-provider-core */ "../core/dist/index.js");


class JsBridgeNativeInjected extends _onekeyfe_cross_inpage_provider_core__WEBPACK_IMPORTED_MODULE_0__.JsBridgeBase {
  constructor() {
    super(...arguments);
    this.sendAsString = true;
    this.isInjected = true;
  }

  sendPayload(payload) {
    if (window.ReactNativeWebView) {
      window.ReactNativeWebView.postMessage(payload);
    }
  }

}



/***/ }),

/***/ "../native/native-bridge-injected/dist/index.js":
/*!******************************************************!*\
  !*** ../native/native-bridge-injected/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "JsBridgeNativeInjected": () => (/* reexport safe */ _JsBridgeNativeInjected__WEBPACK_IMPORTED_MODULE_0__.JsBridgeNativeInjected)
/* harmony export */ });
/* harmony import */ var _JsBridgeNativeInjected__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JsBridgeNativeInjected */ "../native/native-bridge-injected/dist/JsBridgeNativeInjected.js");


/***/ }),

/***/ "../providers/inpage-providers-hub/dist/index.js":
/*!*******************************************************!*\
  !*** ../providers/inpage-providers-hub/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "injectWeb3Provider": () => (/* reexport safe */ _injectWeb3Provider__WEBPACK_IMPORTED_MODULE_0__.injectWeb3Provider)
/* harmony export */ });
/* harmony import */ var _injectWeb3Provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./injectWeb3Provider */ "../providers/inpage-providers-hub/dist/injectWeb3Provider.js");


/***/ }),

/***/ "../providers/inpage-providers-hub/dist/injectWeb3Provider.js":
/*!********************************************************************!*\
  !*** ../providers/inpage-providers-hub/dist/injectWeb3Provider.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "injectWeb3Provider": () => (/* binding */ injectWeb3Provider)
/* harmony export */ });
/* harmony import */ var _onekeyfe_cross_inpage_provider_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onekeyfe/cross-inpage-provider-core */ "../core/dist/index.js");
/* harmony import */ var _onekeyfe_cross_inpage_provider_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @onekeyfe/cross-inpage-provider-types */ "../types/dist/index.js");
/* eslint-disable @typescript-eslint/no-unsafe-member-access */

/* eslint-disable @typescript-eslint/no-unsafe-assignment */



class ProviderPrivate extends _onekeyfe_cross_inpage_provider_core__WEBPACK_IMPORTED_MODULE_0__.ProviderBase {
  constructor() {
    super(...arguments);
    this.providerName = _onekeyfe_cross_inpage_provider_types__WEBPACK_IMPORTED_MODULE_1__.IInjectedProviderNames.$private;
  }

}

class ProviderEthereum extends _onekeyfe_cross_inpage_provider_core__WEBPACK_IMPORTED_MODULE_0__.ProviderBase {
  constructor() {
    super(...arguments);
    this.providerName = _onekeyfe_cross_inpage_provider_types__WEBPACK_IMPORTED_MODULE_1__.IInjectedProviderNames.ethereum;
  }

}

function injectWeb3Provider() {
  var _a, _b;

  if (!((_a = window === null || window === void 0 ? void 0 : window.$onekey) === null || _a === void 0 ? void 0 : _a.jsBridge)) {
    throw new Error('OneKey jsBridge not found.');
  }

  const bridge = (_b = window === null || window === void 0 ? void 0 : window.$onekey) === null || _b === void 0 ? void 0 : _b.jsBridge;
  const ethereum = new ProviderEthereum({
    bridge
  });
  const $private = new ProviderPrivate({
    bridge
  }); // providerHub

  const $onekey = Object.assign(Object.assign({}, window.$onekey), {
    jsBridge: bridge,
    ethereum,
    $private,
    solana: null,
    conflux: null,
    sollet: null
  });
  window.$onekey = $onekey; // TODO conflict with MetaMask

  window.ethereum = ethereum; // window.web3 = ethereum; // dapp create web3.js or ethers.js itself
  // TODO use initializeInpageProvider.ts

  window.dispatchEvent(new Event('ethereum#initialized'));
  return $onekey;
}



/***/ }),

/***/ "../types/dist/index.js":
/*!******************************!*\
  !*** ../types/dist/index.js ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IJsBridgeMessageTypes": () => (/* binding */ IJsBridgeMessageTypes),
/* harmony export */   "IInjectedProviderNames": () => (/* binding */ IInjectedProviderNames)
/* harmony export */ });
var IJsBridgeMessageTypes;

(function (IJsBridgeMessageTypes) {
  IJsBridgeMessageTypes["RESPONSE"] = "RESPONSE";
  IJsBridgeMessageTypes["REQUEST"] = "REQUEST";
})(IJsBridgeMessageTypes || (IJsBridgeMessageTypes = {}));

var IInjectedProviderNames;

(function (IInjectedProviderNames) {
  IInjectedProviderNames["ethereum"] = "ethereum";
  IInjectedProviderNames["conflux"] = "conflux";
  IInjectedProviderNames["solana"] = "solana";
  IInjectedProviderNames["sollet"] = "sollet";
  IInjectedProviderNames["near"] = "near";
  IInjectedProviderNames["$private"] = "$private";
})(IInjectedProviderNames || (IInjectedProviderNames = {}));

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!*******************************!*\
  !*** ./src/injectedNative.ts ***!
  \*******************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _onekeyfe_native_bridge_injected__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onekeyfe/native-bridge-injected */ "../native/native-bridge-injected/dist/index.js");
/* harmony import */ var _onekeyfe_inpage_providers_hub__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @onekeyfe/inpage-providers-hub */ "../providers/inpage-providers-hub/dist/index.js");
/* harmony import */ var _onekeyfe_cross_inpage_provider_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @onekeyfe/cross-inpage-provider-core */ "../core/dist/index.js");



const bridge = () => new _onekeyfe_native_bridge_injected__WEBPACK_IMPORTED_MODULE_0__.JsBridgeNativeInjected({
    receiveHandler: _onekeyfe_cross_inpage_provider_core__WEBPACK_IMPORTED_MODULE_2__.injectedProviderReceiveHandler,
});
(0,_onekeyfe_cross_inpage_provider_core__WEBPACK_IMPORTED_MODULE_2__.injectJsBridge)(bridge);
(0,_onekeyfe_inpage_providers_hub__WEBPACK_IMPORTED_MODULE_1__.injectWeb3Provider)();
// eslint-disable-next-line no-void
void 0;

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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REFBdUQsaUJBQWlCO1dBQ3hFO1dBQ0EsZ0RBQWdELGFBQWE7V0FDN0Q7Ozs7Ozs7Ozs7Ozs7OztBQ04wRTtBQUNOO0FBQ21DO0FBQ3ZHLHlCQUF5QixvRkFBc0I7QUFDL0Msb0JBQW9CLGdHQUE4QjtBQUNsRCxDQUFDO0FBQ0Qsb0ZBQWM7QUFDZCxrRkFBa0I7QUFDbEI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BvbmVrZXlmZS9jcm9zcy1pbnBhZ2UtcHJvdmlkZXItaW5qZWN0ZWQvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL0BvbmVrZXlmZS9jcm9zcy1pbnBhZ2UtcHJvdmlkZXItaW5qZWN0ZWQvLi4vY29yZS9ub2RlX21vZHVsZXMvZXZlbnRlbWl0dGVyMy9pbmRleC5qcyIsIndlYnBhY2s6Ly9Ab25la2V5ZmUvY3Jvc3MtaW5wYWdlLXByb3ZpZGVyLWluamVjdGVkLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3ltYm9sLmpzIiwid2VicGFjazovL0BvbmVrZXlmZS9jcm9zcy1pbnBhZ2UtcHJvdmlkZXItaW5qZWN0ZWQvLi4vY29yZS9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovL0BvbmVrZXlmZS9jcm9zcy1pbnBhZ2UtcHJvdmlkZXItaW5qZWN0ZWQvLi4vY29yZS9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovL0BvbmVrZXlmZS9jcm9zcy1pbnBhZ2UtcHJvdmlkZXItaW5qZWN0ZWQvLi4vY29yZS9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vQG9uZWtleWZlL2Nyb3NzLWlucGFnZS1wcm92aWRlci1pbmplY3RlZC8uLi9jb3JlL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFJhd1RhZy5qcyIsIndlYnBhY2s6Ly9Ab25la2V5ZmUvY3Jvc3MtaW5wYWdlLXByb3ZpZGVyLWluamVjdGVkLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2xvZGFzaC9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vQG9uZWtleWZlL2Nyb3NzLWlucGFnZS1wcm92aWRlci1pbmplY3RlZC8uLi9jb3JlL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJBcmcuanMiLCJ3ZWJwYWNrOi8vQG9uZWtleWZlL2Nyb3NzLWlucGFnZS1wcm92aWRlci1pbmplY3RlZC8uLi9jb3JlL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vQG9uZWtleWZlL2Nyb3NzLWlucGFnZS1wcm92aWRlci1pbmplY3RlZC8uLi9jb3JlL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly9Ab25la2V5ZmUvY3Jvc3MtaW5wYWdlLXByb3ZpZGVyLWluamVjdGVkLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL0BvbmVrZXlmZS9jcm9zcy1pbnBhZ2UtcHJvdmlkZXItaW5qZWN0ZWQvLi4vY29yZS9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0LmpzIiwid2VicGFjazovL0BvbmVrZXlmZS9jcm9zcy1pbnBhZ2UtcHJvdmlkZXItaW5qZWN0ZWQvLi4vY29yZS9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly9Ab25la2V5ZmUvY3Jvc3MtaW5wYWdlLXByb3ZpZGVyLWluamVjdGVkLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1BsYWluT2JqZWN0LmpzIiwid2VicGFjazovL0BvbmVrZXlmZS9jcm9zcy1pbnBhZ2UtcHJvdmlkZXItaW5qZWN0ZWQvLi4vY29yZS9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3RyaW5nLmpzIiwid2VicGFjazovL0BvbmVrZXlmZS9jcm9zcy1pbnBhZ2UtcHJvdmlkZXItaW5qZWN0ZWQvLi4vY29yZS9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQG9uZWtleWZlL2Nyb3NzLWlucGFnZS1wcm92aWRlci1pbmplY3RlZC8uLi9lcnJvcnMvbm9kZV9tb2R1bGVzL2Zhc3Qtc2FmZS1zdHJpbmdpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQG9uZWtleWZlL2Nyb3NzLWlucGFnZS1wcm92aWRlci1pbmplY3RlZC8uLi9jb3JlL2Rpc3QvSnNCcmlkZ2VCYXNlLmpzIiwid2VicGFjazovL0BvbmVrZXlmZS9jcm9zcy1pbnBhZ2UtcHJvdmlkZXItaW5qZWN0ZWQvLi4vY29yZS9kaXN0L1Byb3ZpZGVyQmFzZS5qcyIsIndlYnBhY2s6Ly9Ab25la2V5ZmUvY3Jvc3MtaW5wYWdlLXByb3ZpZGVyLWluamVjdGVkLy4uL2NvcmUvZGlzdC9jb25zdHMuanMiLCJ3ZWJwYWNrOi8vQG9uZWtleWZlL2Nyb3NzLWlucGFnZS1wcm92aWRlci1pbmplY3RlZC8uLi9jb3JlL2Rpc3QvZGVidWcvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9Ab25la2V5ZmUvY3Jvc3MtaW5wYWdlLXByb3ZpZGVyLWluamVjdGVkLy4uL2NvcmUvZGlzdC9kZWJ1Zy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vQG9uZWtleWZlL2Nyb3NzLWlucGFnZS1wcm92aWRlci1pbmplY3RlZC8uLi9jb3JlL2Rpc3QvZGVidWcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQG9uZWtleWZlL2Nyb3NzLWlucGFnZS1wcm92aWRlci1pbmplY3RlZC8uLi9jb3JlL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQG9uZWtleWZlL2Nyb3NzLWlucGFnZS1wcm92aWRlci1pbmplY3RlZC8uLi9jb3JlL2Rpc3QvaW5qZWN0SnNCcmlkZ2UuanMiLCJ3ZWJwYWNrOi8vQG9uZWtleWZlL2Nyb3NzLWlucGFnZS1wcm92aWRlci1pbmplY3RlZC8uLi9jb3JlL2Rpc3QvaW5qZWN0ZWRGYWN0b3J5LmpzIiwid2VicGFjazovL0BvbmVrZXlmZS9jcm9zcy1pbnBhZ2UtcHJvdmlkZXItaW5qZWN0ZWQvLi4vY29yZS9kaXN0L2luamVjdGVkUHJvdmlkZXJSZWNlaXZlSGFuZGxlci5qcyIsIndlYnBhY2s6Ly9Ab25la2V5ZmUvY3Jvc3MtaW5wYWdlLXByb3ZpZGVyLWluamVjdGVkLy4uL2NvcmUvZGlzdC9sb2dnZXJzLmpzIiwid2VicGFjazovL0BvbmVrZXlmZS9jcm9zcy1pbnBhZ2UtcHJvdmlkZXItaW5qZWN0ZWQvLi4vY29yZS9kaXN0L3NpdGVNZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9Ab25la2V5ZmUvY3Jvc3MtaW5wYWdlLXByb3ZpZGVyLWluamVjdGVkLy4uL2NvcmUvZGlzdC92ZXJzaW9uSW5mby5qcyIsIndlYnBhY2s6Ly9Ab25la2V5ZmUvY3Jvc3MtaW5wYWdlLXByb3ZpZGVyLWluamVjdGVkLy4uL2Vycm9ycy9kaXN0L2NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vQG9uZWtleWZlL2Nyb3NzLWlucGFnZS1wcm92aWRlci1pbmplY3RlZC8uLi9lcnJvcnMvZGlzdC9lcnJvci1jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vQG9uZWtleWZlL2Nyb3NzLWlucGFnZS1wcm92aWRlci1pbmplY3RlZC8uLi9lcnJvcnMvZGlzdC9lcnJvcnMuanMiLCJ3ZWJwYWNrOi8vQG9uZWtleWZlL2Nyb3NzLWlucGFnZS1wcm92aWRlci1pbmplY3RlZC8uLi9lcnJvcnMvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9Ab25la2V5ZmUvY3Jvc3MtaW5wYWdlLXByb3ZpZGVyLWluamVjdGVkLy4uL2Vycm9ycy9kaXN0L3V0aWxzLmpzIiwid2VicGFjazovL0BvbmVrZXlmZS9jcm9zcy1pbnBhZ2UtcHJvdmlkZXItaW5qZWN0ZWQvLi4vbmF0aXZlL25hdGl2ZS1icmlkZ2UtaW5qZWN0ZWQvZGlzdC9Kc0JyaWRnZU5hdGl2ZUluamVjdGVkLmpzIiwid2VicGFjazovL0BvbmVrZXlmZS9jcm9zcy1pbnBhZ2UtcHJvdmlkZXItaW5qZWN0ZWQvLi4vbmF0aXZlL25hdGl2ZS1icmlkZ2UtaW5qZWN0ZWQvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9Ab25la2V5ZmUvY3Jvc3MtaW5wYWdlLXByb3ZpZGVyLWluamVjdGVkLy4uL3Byb3ZpZGVycy9pbnBhZ2UtcHJvdmlkZXJzLWh1Yi9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL0BvbmVrZXlmZS9jcm9zcy1pbnBhZ2UtcHJvdmlkZXItaW5qZWN0ZWQvLi4vcHJvdmlkZXJzL2lucGFnZS1wcm92aWRlcnMtaHViL2Rpc3QvaW5qZWN0V2ViM1Byb3ZpZGVyLmpzIiwid2VicGFjazovL0BvbmVrZXlmZS9jcm9zcy1pbnBhZ2UtcHJvdmlkZXItaW5qZWN0ZWQvLi4vdHlwZXMvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9Ab25la2V5ZmUvY3Jvc3MtaW5wYWdlLXByb3ZpZGVyLWluamVjdGVkL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0BvbmVrZXlmZS9jcm9zcy1pbnBhZ2UtcHJvdmlkZXItaW5qZWN0ZWQvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL0BvbmVrZXlmZS9jcm9zcy1pbnBhZ2UtcHJvdmlkZXItaW5qZWN0ZWQvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9Ab25la2V5ZmUvY3Jvc3MtaW5wYWdlLXByb3ZpZGVyLWluamVjdGVkL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vQG9uZWtleWZlL2Nyb3NzLWlucGFnZS1wcm92aWRlci1pbmplY3RlZC8uL3NyYy9pbmplY3RlZE5hdGl2ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2Uge1xuXHRcdHZhciBhID0gZmFjdG9yeSgpO1xuXHRcdGZvcih2YXIgaSBpbiBhKSAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnID8gZXhwb3J0cyA6IHJvb3QpW2ldID0gYVtpXTtcblx0fVxufSkod2luZG93LCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG4gICwgcHJlZml4ID0gJ34nO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIHRvIGNyZWF0ZSBhIHN0b3JhZ2UgZm9yIG91ciBgRUVgIG9iamVjdHMuXG4gKiBBbiBgRXZlbnRzYCBpbnN0YW5jZSBpcyBhIHBsYWluIG9iamVjdCB3aG9zZSBwcm9wZXJ0aWVzIGFyZSBldmVudCBuYW1lcy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEV2ZW50cygpIHt9XG5cbi8vXG4vLyBXZSB0cnkgdG8gbm90IGluaGVyaXQgZnJvbSBgT2JqZWN0LnByb3RvdHlwZWAuIEluIHNvbWUgZW5naW5lcyBjcmVhdGluZyBhblxuLy8gaW5zdGFuY2UgaW4gdGhpcyB3YXkgaXMgZmFzdGVyIHRoYW4gY2FsbGluZyBgT2JqZWN0LmNyZWF0ZShudWxsKWAgZGlyZWN0bHkuXG4vLyBJZiBgT2JqZWN0LmNyZWF0ZShudWxsKWAgaXMgbm90IHN1cHBvcnRlZCB3ZSBwcmVmaXggdGhlIGV2ZW50IG5hbWVzIHdpdGggYVxuLy8gY2hhcmFjdGVyIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBidWlsdC1pbiBvYmplY3QgcHJvcGVydGllcyBhcmUgbm90XG4vLyBvdmVycmlkZGVuIG9yIHVzZWQgYXMgYW4gYXR0YWNrIHZlY3Rvci5cbi8vXG5pZiAoT2JqZWN0LmNyZWF0ZSkge1xuICBFdmVudHMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAvL1xuICAvLyBUaGlzIGhhY2sgaXMgbmVlZGVkIGJlY2F1c2UgdGhlIGBfX3Byb3RvX19gIHByb3BlcnR5IGlzIHN0aWxsIGluaGVyaXRlZCBpblxuICAvLyBzb21lIG9sZCBicm93c2VycyBsaWtlIEFuZHJvaWQgNCwgaVBob25lIDUuMSwgT3BlcmEgMTEgYW5kIFNhZmFyaSA1LlxuICAvL1xuICBpZiAoIW5ldyBFdmVudHMoKS5fX3Byb3RvX18pIHByZWZpeCA9IGZhbHNlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudGF0aW9uIG9mIGEgc2luZ2xlIGV2ZW50IGxpc3RlbmVyLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvbmNlPWZhbHNlXSBTcGVjaWZ5IGlmIHRoZSBsaXN0ZW5lciBpcyBhIG9uZS10aW1lIGxpc3RlbmVyLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBFRShmbiwgY29udGV4dCwgb25jZSkge1xuICB0aGlzLmZuID0gZm47XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMub25jZSA9IG9uY2UgfHwgZmFsc2U7XG59XG5cbi8qKlxuICogQWRkIGEgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHtFdmVudEVtaXR0ZXJ9IGVtaXR0ZXIgUmVmZXJlbmNlIHRvIHRoZSBgRXZlbnRFbWl0dGVyYCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9uY2UgU3BlY2lmeSBpZiB0aGUgbGlzdGVuZXIgaXMgYSBvbmUtdGltZSBsaXN0ZW5lci5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBhZGRMaXN0ZW5lcihlbWl0dGVyLCBldmVudCwgZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lciA9IG5ldyBFRShmbiwgY29udGV4dCB8fCBlbWl0dGVyLCBvbmNlKVxuICAgICwgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIWVtaXR0ZXIuX2V2ZW50c1tldnRdKSBlbWl0dGVyLl9ldmVudHNbZXZ0XSA9IGxpc3RlbmVyLCBlbWl0dGVyLl9ldmVudHNDb3VudCsrO1xuICBlbHNlIGlmICghZW1pdHRlci5fZXZlbnRzW2V2dF0uZm4pIGVtaXR0ZXIuX2V2ZW50c1tldnRdLnB1c2gobGlzdGVuZXIpO1xuICBlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldnRdID0gW2VtaXR0ZXIuX2V2ZW50c1tldnRdLCBsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIGVtaXR0ZXI7XG59XG5cbi8qKlxuICogQ2xlYXIgZXZlbnQgYnkgbmFtZS5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50RW1pdHRlcn0gZW1pdHRlciBSZWZlcmVuY2UgdG8gdGhlIGBFdmVudEVtaXR0ZXJgIGluc3RhbmNlLlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2dCBUaGUgRXZlbnQgbmFtZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNsZWFyRXZlbnQoZW1pdHRlciwgZXZ0KSB7XG4gIGlmICgtLWVtaXR0ZXIuX2V2ZW50c0NvdW50ID09PSAwKSBlbWl0dGVyLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gIGVsc2UgZGVsZXRlIGVtaXR0ZXIuX2V2ZW50c1tldnRdO1xufVxuXG4vKipcbiAqIE1pbmltYWwgYEV2ZW50RW1pdHRlcmAgaW50ZXJmYWNlIHRoYXQgaXMgbW9sZGVkIGFnYWluc3QgdGhlIE5vZGUuanNcbiAqIGBFdmVudEVtaXR0ZXJgIGludGVyZmFjZS5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gYW4gYXJyYXkgbGlzdGluZyB0aGUgZXZlbnRzIGZvciB3aGljaCB0aGUgZW1pdHRlciBoYXMgcmVnaXN0ZXJlZFxuICogbGlzdGVuZXJzLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgdmFyIG5hbWVzID0gW11cbiAgICAsIGV2ZW50c1xuICAgICwgbmFtZTtcblxuICBpZiAodGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHJldHVybiBuYW1lcztcblxuICBmb3IgKG5hbWUgaW4gKGV2ZW50cyA9IHRoaXMuX2V2ZW50cykpIHtcbiAgICBpZiAoaGFzLmNhbGwoZXZlbnRzLCBuYW1lKSkgbmFtZXMucHVzaChwcmVmaXggPyBuYW1lLnNsaWNlKDEpIDogbmFtZSk7XG4gIH1cblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHJldHVybiBuYW1lcy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhldmVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBuYW1lcztcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSByZWdpc3RlcmVkIGxpc3RlbmVycy5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnMoZXZlbnQpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnRcbiAgICAsIGhhbmRsZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKCFoYW5kbGVycykgcmV0dXJuIFtdO1xuICBpZiAoaGFuZGxlcnMuZm4pIHJldHVybiBbaGFuZGxlcnMuZm5dO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gaGFuZGxlcnMubGVuZ3RoLCBlZSA9IG5ldyBBcnJheShsKTsgaSA8IGw7IGkrKykge1xuICAgIGVlW2ldID0gaGFuZGxlcnNbaV0uZm47XG4gIH1cblxuICByZXR1cm4gZWU7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgbnVtYmVyIG9mIGxpc3RlbmVycyBsaXN0ZW5pbmcgdG8gYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtYmVyIG9mIGxpc3RlbmVycy5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gbGlzdGVuZXJDb3VudChldmVudCkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudFxuICAgICwgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKCFsaXN0ZW5lcnMpIHJldHVybiAwO1xuICBpZiAobGlzdGVuZXJzLmZuKSByZXR1cm4gMTtcbiAgcmV0dXJuIGxpc3RlbmVycy5sZW5ndGg7XG59O1xuXG4vKipcbiAqIENhbGxzIGVhY2ggb2YgdGhlIGxpc3RlbmVycyByZWdpc3RlcmVkIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGV2ZW50IGhhZCBsaXN0ZW5lcnMsIGVsc2UgYGZhbHNlYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdChldmVudCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiBmYWxzZTtcblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF1cbiAgICAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGFyZ3NcbiAgICAsIGk7XG5cbiAgaWYgKGxpc3RlbmVycy5mbikge1xuICAgIGlmIChsaXN0ZW5lcnMub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzLmZuLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgc3dpdGNoIChsZW4pIHtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0KSwgdHJ1ZTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSksIHRydWU7XG4gICAgICBjYXNlIDM6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyKSwgdHJ1ZTtcbiAgICAgIGNhc2UgNDogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzKSwgdHJ1ZTtcbiAgICAgIGNhc2UgNTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzLCBhNCksIHRydWU7XG4gICAgICBjYXNlIDY6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQsIGE1KSwgdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAxLCBhcmdzID0gbmV3IEFycmF5KGxlbiAtMSk7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZuLmFwcGx5KGxpc3RlbmVycy5jb250ZXh0LCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aFxuICAgICAgLCBqO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobGlzdGVuZXJzW2ldLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyc1tpXS5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgICAgc3dpdGNoIChsZW4pIHtcbiAgICAgICAgY2FzZSAxOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCk7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSk7IGJyZWFrO1xuICAgICAgICBjYXNlIDM6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSwgYTIpOyBicmVhaztcbiAgICAgICAgY2FzZSA0OiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyLCBhMyk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmICghYXJncykgZm9yIChqID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaiAtIDFdID0gYXJndW1lbnRzW2pdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpc3RlbmVyc1tpXS5mbi5hcHBseShsaXN0ZW5lcnNbaV0uY29udGV4dCwgYXJncyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gb24oZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHJldHVybiBhZGRMaXN0ZW5lcih0aGlzLCBldmVudCwgZm4sIGNvbnRleHQsIGZhbHNlKTtcbn07XG5cbi8qKlxuICogQWRkIGEgb25lLXRpbWUgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBbY29udGV4dD10aGlzXSBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UoZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHJldHVybiBhZGRMaXN0ZW5lcih0aGlzLCBldmVudCwgZm4sIGNvbnRleHQsIHRydWUpO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgdGhlIGxpc3RlbmVycyBvZiBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIE9ubHkgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdGhhdCBtYXRjaCB0aGlzIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IE9ubHkgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdGhhdCBoYXZlIHRoaXMgY29udGV4dC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBPbmx5IHJlbW92ZSBvbmUtdGltZSBsaXN0ZW5lcnMuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihldmVudCwgZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgcmV0dXJuIHRoaXM7XG4gIGlmICghZm4pIHtcbiAgICBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKGxpc3RlbmVycy5mbikge1xuICAgIGlmIChcbiAgICAgIGxpc3RlbmVycy5mbiA9PT0gZm4gJiZcbiAgICAgICghb25jZSB8fCBsaXN0ZW5lcnMub25jZSkgJiZcbiAgICAgICghY29udGV4dCB8fCBsaXN0ZW5lcnMuY29udGV4dCA9PT0gY29udGV4dClcbiAgICApIHtcbiAgICAgIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGV2ZW50cyA9IFtdLCBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChcbiAgICAgICAgbGlzdGVuZXJzW2ldLmZuICE9PSBmbiB8fFxuICAgICAgICAob25jZSAmJiAhbGlzdGVuZXJzW2ldLm9uY2UpIHx8XG4gICAgICAgIChjb250ZXh0ICYmIGxpc3RlbmVyc1tpXS5jb250ZXh0ICE9PSBjb250ZXh0KVxuICAgICAgKSB7XG4gICAgICAgIGV2ZW50cy5wdXNoKGxpc3RlbmVyc1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBSZXNldCB0aGUgYXJyYXksIG9yIHJlbW92ZSBpdCBjb21wbGV0ZWx5IGlmIHdlIGhhdmUgbm8gbW9yZSBsaXN0ZW5lcnMuXG4gICAgLy9cbiAgICBpZiAoZXZlbnRzLmxlbmd0aCkgdGhpcy5fZXZlbnRzW2V2dF0gPSBldmVudHMubGVuZ3RoID09PSAxID8gZXZlbnRzWzBdIDogZXZlbnRzO1xuICAgIGVsc2UgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbGwgbGlzdGVuZXJzLCBvciB0aG9zZSBvZiB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBbZXZlbnRdIFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyhldmVudCkge1xuICB2YXIgZXZ0O1xuXG4gIGlmIChldmVudCkge1xuICAgIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG4gICAgaWYgKHRoaXMuX2V2ZW50c1tldnRdKSBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy9cbi8vIEFsaWFzIG1ldGhvZHMgbmFtZXMgYmVjYXVzZSBwZW9wbGUgcm9sbCBsaWtlIHRoYXQuXG4vL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUub247XG5cbi8vXG4vLyBFeHBvc2UgdGhlIHByZWZpeC5cbi8vXG5FdmVudEVtaXR0ZXIucHJlZml4ZWQgPSBwcmVmaXg7XG5cbi8vXG4vLyBBbGxvdyBgRXZlbnRFbWl0dGVyYCB0byBiZSBpbXBvcnRlZCBhcyBtb2R1bGUgbmFtZXNwYWNlLlxuLy9cbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIG1vZHVsZS5cbi8vXG5pZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBtb2R1bGUpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG59XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcbiIsInZhciBvdmVyQXJnID0gcmVxdWlyZSgnLi9fb3ZlckFyZycpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRQcm90b3R5cGU7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsIi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG92ZXJBcmc7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGdW5jdGlvbjtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3RMaWtlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgZ2V0UHJvdG90eXBlID0gcmVxdWlyZSgnLi9fZ2V0UHJvdG90eXBlJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xudmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuOC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiB9XG4gKlxuICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUGxhaW5PYmplY3Q7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3RyaW5nYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3RyaW5nLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTdHJpbmcoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTdHJpbmcoMSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgKCFpc0FycmF5KHZhbHVlKSAmJiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN0cmluZ1RhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTdHJpbmc7XG4iLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHcgPSBkICogNztcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbCkpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKC0/KD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx3ZWVrcz98d3x5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnd2Vla3MnOlxuICAgIGNhc2UgJ3dlZWsnOlxuICAgIGNhc2UgJ3cnOlxuICAgICAgcmV0dXJuIG4gKiB3O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBkLCAnZGF5Jyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgaCwgJ2hvdXInKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBtLCAnbWludXRlJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgcywgJ3NlY29uZCcpO1xuICB9XG4gIHJldHVybiBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbXNBYnMsIG4sIG5hbWUpIHtcbiAgdmFyIGlzUGx1cmFsID0gbXNBYnMgPj0gbiAqIDEuNTtcbiAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBuKSArICcgJyArIG5hbWUgKyAoaXNQbHVyYWwgPyAncycgOiAnJyk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHN0cmluZ2lmeVxuc3RyaW5naWZ5LmRlZmF1bHQgPSBzdHJpbmdpZnlcbnN0cmluZ2lmeS5zdGFibGUgPSBkZXRlcm1pbmlzdGljU3RyaW5naWZ5XG5zdHJpbmdpZnkuc3RhYmxlU3RyaW5naWZ5ID0gZGV0ZXJtaW5pc3RpY1N0cmluZ2lmeVxuXG52YXIgTElNSVRfUkVQTEFDRV9OT0RFID0gJ1suLi5dJ1xudmFyIENJUkNVTEFSX1JFUExBQ0VfTk9ERSA9ICdbQ2lyY3VsYXJdJ1xuXG52YXIgYXJyID0gW11cbnZhciByZXBsYWNlclN0YWNrID0gW11cblxuZnVuY3Rpb24gZGVmYXVsdE9wdGlvbnMgKCkge1xuICByZXR1cm4ge1xuICAgIGRlcHRoTGltaXQ6IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSLFxuICAgIGVkZ2VzTGltaXQ6IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG4gIH1cbn1cblxuLy8gUmVndWxhciBzdHJpbmdpZnlcbmZ1bmN0aW9uIHN0cmluZ2lmeSAob2JqLCByZXBsYWNlciwgc3BhY2VyLCBvcHRpb25zKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBvcHRpb25zID0gZGVmYXVsdE9wdGlvbnMoKVxuICB9XG5cbiAgZGVjaXJjKG9iaiwgJycsIDAsIFtdLCB1bmRlZmluZWQsIDAsIG9wdGlvbnMpXG4gIHZhciByZXNcbiAgdHJ5IHtcbiAgICBpZiAocmVwbGFjZXJTdGFjay5sZW5ndGggPT09IDApIHtcbiAgICAgIHJlcyA9IEpTT04uc3RyaW5naWZ5KG9iaiwgcmVwbGFjZXIsIHNwYWNlcilcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0gSlNPTi5zdHJpbmdpZnkob2JqLCByZXBsYWNlR2V0dGVyVmFsdWVzKHJlcGxhY2VyKSwgc3BhY2VyKVxuICAgIH1cbiAgfSBjYXRjaCAoXykge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSgnW3VuYWJsZSB0byBzZXJpYWxpemUsIGNpcmN1bGFyIHJlZmVyZW5jZSBpcyB0b28gY29tcGxleCB0byBhbmFseXplXScpXG4gIH0gZmluYWxseSB7XG4gICAgd2hpbGUgKGFyci5sZW5ndGggIT09IDApIHtcbiAgICAgIHZhciBwYXJ0ID0gYXJyLnBvcCgpXG4gICAgICBpZiAocGFydC5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHBhcnRbMF0sIHBhcnRbMV0sIHBhcnRbM10pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJ0WzBdW3BhcnRbMV1dID0gcGFydFsyXVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIHNldFJlcGxhY2UgKHJlcGxhY2UsIHZhbCwgaywgcGFyZW50KSB7XG4gIHZhciBwcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHBhcmVudCwgaylcbiAgaWYgKHByb3BlcnR5RGVzY3JpcHRvci5nZXQgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChwcm9wZXJ0eURlc2NyaXB0b3IuY29uZmlndXJhYmxlKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocGFyZW50LCBrLCB7IHZhbHVlOiByZXBsYWNlIH0pXG4gICAgICBhcnIucHVzaChbcGFyZW50LCBrLCB2YWwsIHByb3BlcnR5RGVzY3JpcHRvcl0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcGxhY2VyU3RhY2sucHVzaChbdmFsLCBrLCByZXBsYWNlXSlcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcGFyZW50W2tdID0gcmVwbGFjZVxuICAgIGFyci5wdXNoKFtwYXJlbnQsIGssIHZhbF0pXG4gIH1cbn1cblxuZnVuY3Rpb24gZGVjaXJjICh2YWwsIGssIGVkZ2VJbmRleCwgc3RhY2ssIHBhcmVudCwgZGVwdGgsIG9wdGlvbnMpIHtcbiAgZGVwdGggKz0gMVxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgdmFsICE9PSBudWxsKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoc3RhY2tbaV0gPT09IHZhbCkge1xuICAgICAgICBzZXRSZXBsYWNlKENJUkNVTEFSX1JFUExBQ0VfTk9ERSwgdmFsLCBrLCBwYXJlbnQpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChcbiAgICAgIHR5cGVvZiBvcHRpb25zLmRlcHRoTGltaXQgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICBkZXB0aCA+IG9wdGlvbnMuZGVwdGhMaW1pdFxuICAgICkge1xuICAgICAgc2V0UmVwbGFjZShMSU1JVF9SRVBMQUNFX05PREUsIHZhbCwgaywgcGFyZW50KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgdHlwZW9mIG9wdGlvbnMuZWRnZXNMaW1pdCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIGVkZ2VJbmRleCArIDEgPiBvcHRpb25zLmVkZ2VzTGltaXRcbiAgICApIHtcbiAgICAgIHNldFJlcGxhY2UoTElNSVRfUkVQTEFDRV9OT0RFLCB2YWwsIGssIHBhcmVudClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHN0YWNrLnB1c2godmFsKVxuICAgIC8vIE9wdGltaXplIGZvciBBcnJheXMuIEJpZyBhcnJheXMgY291bGQga2lsbCB0aGUgcGVyZm9ybWFuY2Ugb3RoZXJ3aXNlIVxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB2YWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZGVjaXJjKHZhbFtpXSwgaSwgaSwgc3RhY2ssIHZhbCwgZGVwdGgsIG9wdGlvbnMpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsKVxuICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXNbaV1cbiAgICAgICAgZGVjaXJjKHZhbFtrZXldLCBrZXksIGksIHN0YWNrLCB2YWwsIGRlcHRoLCBvcHRpb25zKVxuICAgICAgfVxuICAgIH1cbiAgICBzdGFjay5wb3AoKVxuICB9XG59XG5cbi8vIFN0YWJsZS1zdHJpbmdpZnlcbmZ1bmN0aW9uIGNvbXBhcmVGdW5jdGlvbiAoYSwgYikge1xuICBpZiAoYSA8IGIpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoYSA+IGIpIHtcbiAgICByZXR1cm4gMVxuICB9XG4gIHJldHVybiAwXG59XG5cbmZ1bmN0aW9uIGRldGVybWluaXN0aWNTdHJpbmdpZnkgKG9iaiwgcmVwbGFjZXIsIHNwYWNlciwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgb3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zKClcbiAgfVxuXG4gIHZhciB0bXAgPSBkZXRlcm1pbmlzdGljRGVjaXJjKG9iaiwgJycsIDAsIFtdLCB1bmRlZmluZWQsIDAsIG9wdGlvbnMpIHx8IG9ialxuICB2YXIgcmVzXG4gIHRyeSB7XG4gICAgaWYgKHJlcGxhY2VyU3RhY2subGVuZ3RoID09PSAwKSB7XG4gICAgICByZXMgPSBKU09OLnN0cmluZ2lmeSh0bXAsIHJlcGxhY2VyLCBzcGFjZXIpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IEpTT04uc3RyaW5naWZ5KHRtcCwgcmVwbGFjZUdldHRlclZhbHVlcyhyZXBsYWNlciksIHNwYWNlcilcbiAgICB9XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoJ1t1bmFibGUgdG8gc2VyaWFsaXplLCBjaXJjdWxhciByZWZlcmVuY2UgaXMgdG9vIGNvbXBsZXggdG8gYW5hbHl6ZV0nKVxuICB9IGZpbmFsbHkge1xuICAgIC8vIEVuc3VyZSB0aGF0IHdlIHJlc3RvcmUgdGhlIG9iamVjdCBhcyBpdCB3YXMuXG4gICAgd2hpbGUgKGFyci5sZW5ndGggIT09IDApIHtcbiAgICAgIHZhciBwYXJ0ID0gYXJyLnBvcCgpXG4gICAgICBpZiAocGFydC5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHBhcnRbMF0sIHBhcnRbMV0sIHBhcnRbM10pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJ0WzBdW3BhcnRbMV1dID0gcGFydFsyXVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGRldGVybWluaXN0aWNEZWNpcmMgKHZhbCwgaywgZWRnZUluZGV4LCBzdGFjaywgcGFyZW50LCBkZXB0aCwgb3B0aW9ucykge1xuICBkZXB0aCArPSAxXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwgIT09IG51bGwpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChzdGFja1tpXSA9PT0gdmFsKSB7XG4gICAgICAgIHNldFJlcGxhY2UoQ0lSQ1VMQVJfUkVQTEFDRV9OT0RFLCB2YWwsIGssIHBhcmVudClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBpZiAodHlwZW9mIHZhbC50b0pTT04gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfSBjYXRjaCAoXykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgdHlwZW9mIG9wdGlvbnMuZGVwdGhMaW1pdCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIGRlcHRoID4gb3B0aW9ucy5kZXB0aExpbWl0XG4gICAgKSB7XG4gICAgICBzZXRSZXBsYWNlKExJTUlUX1JFUExBQ0VfTk9ERSwgdmFsLCBrLCBwYXJlbnQpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICB0eXBlb2Ygb3B0aW9ucy5lZGdlc0xpbWl0ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgZWRnZUluZGV4ICsgMSA+IG9wdGlvbnMuZWRnZXNMaW1pdFxuICAgICkge1xuICAgICAgc2V0UmVwbGFjZShMSU1JVF9SRVBMQUNFX05PREUsIHZhbCwgaywgcGFyZW50KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgc3RhY2sucHVzaCh2YWwpXG4gICAgLy8gT3B0aW1pemUgZm9yIEFycmF5cy4gQmlnIGFycmF5cyBjb3VsZCBraWxsIHRoZSBwZXJmb3JtYW5jZSBvdGhlcndpc2UhXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IHZhbC5sZW5ndGg7IGkrKykge1xuICAgICAgICBkZXRlcm1pbmlzdGljRGVjaXJjKHZhbFtpXSwgaSwgaSwgc3RhY2ssIHZhbCwgZGVwdGgsIG9wdGlvbnMpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENyZWF0ZSBhIHRlbXBvcmFyeSBvYmplY3QgaW4gdGhlIHJlcXVpcmVkIHdheVxuICAgICAgdmFyIHRtcCA9IHt9XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbCkuc29ydChjb21wYXJlRnVuY3Rpb24pXG4gICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXVxuICAgICAgICBkZXRlcm1pbmlzdGljRGVjaXJjKHZhbFtrZXldLCBrZXksIGksIHN0YWNrLCB2YWwsIGRlcHRoLCBvcHRpb25zKVxuICAgICAgICB0bXBba2V5XSA9IHZhbFtrZXldXG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHBhcmVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgYXJyLnB1c2goW3BhcmVudCwgaywgdmFsXSlcbiAgICAgICAgcGFyZW50W2tdID0gdG1wXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdG1wXG4gICAgICB9XG4gICAgfVxuICAgIHN0YWNrLnBvcCgpXG4gIH1cbn1cblxuLy8gd3JhcHMgcmVwbGFjZXIgZnVuY3Rpb24gdG8gaGFuZGxlIHZhbHVlcyB3ZSBjb3VsZG4ndCByZXBsYWNlXG4vLyBhbmQgbWFyayB0aGVtIGFzIHJlcGxhY2VkIHZhbHVlXG5mdW5jdGlvbiByZXBsYWNlR2V0dGVyVmFsdWVzIChyZXBsYWNlcikge1xuICByZXBsYWNlciA9XG4gICAgdHlwZW9mIHJlcGxhY2VyICE9PSAndW5kZWZpbmVkJ1xuICAgICAgPyByZXBsYWNlclxuICAgICAgOiBmdW5jdGlvbiAoaywgdikge1xuICAgICAgICByZXR1cm4gdlxuICAgICAgfVxuICByZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsKSB7XG4gICAgaWYgKHJlcGxhY2VyU3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXBsYWNlclN0YWNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJ0ID0gcmVwbGFjZXJTdGFja1tpXVxuICAgICAgICBpZiAocGFydFsxXSA9PT0ga2V5ICYmIHBhcnRbMF0gPT09IHZhbCkge1xuICAgICAgICAgIHZhbCA9IHBhcnRbMl1cbiAgICAgICAgICByZXBsYWNlclN0YWNrLnNwbGljZShpLCAxKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWwpXG4gIH1cbn1cbiIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICdldmVudGVtaXR0ZXIzJztcbmltcG9ydCBpc1BsYWluT2JqZWN0IGZyb20gJ2xvZGFzaC9pc1BsYWluT2JqZWN0JztcbmltcG9ydCBpc1N0cmluZyBmcm9tICdsb2Rhc2gvaXNTdHJpbmcnO1xuaW1wb3J0IHsgYXBwRGVidWdMb2dnZXIsIGNvbnNvbGVFcnJvckluRGV2IH0gZnJvbSAnLi9sb2dnZXJzJztcbmltcG9ydCB7IElKc0JyaWRnZU1lc3NhZ2VUeXBlcywgfSBmcm9tICdAb25la2V5ZmUvY3Jvc3MtaW5wYWdlLXByb3ZpZGVyLXR5cGVzJztcbmltcG9ydCB7IHdlYjNFcnJvcnMgfSBmcm9tICdAb25la2V5ZmUvY3Jvc3MtaW5wYWdlLXByb3ZpZGVyLWVycm9ycyc7XG5pbXBvcnQgdmVyc2lvbkluZm8gZnJvbSAnLi92ZXJzaW9uSW5mbyc7XG5mdW5jdGlvbiBpc0xlZ2FjeUV4dE1lc3NhZ2UocGF5bG9hZCkge1xuICAgIGNvbnN0IHBheWxvYWRPYmogPSBwYXlsb2FkO1xuICAgIHJldHVybiAoQm9vbGVhbihwYXlsb2FkT2JqLm5hbWUpICYmXG4gICAgICAgIFsnb25la2V5LXByb3ZpZGVyLWV0aCcsICdvbmVrZXktcHJvdmlkZXItY2Z4JywgJ3B1YmxpY0NvbmZpZyddLmluY2x1ZGVzKHBheWxvYWRPYmoubmFtZSkpO1xufVxuY29uc3QgQlJJREdFX0VWRU5UUyA9IHtcbiAgICBtZXNzYWdlOiAnbWVzc2FnZScsXG4gICAgZXJyb3I6ICdlcnJvcicsXG59O1xuY2xhc3MgSnNCcmlkZ2VCYXNlIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmlzRXh0VWkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc0luamVjdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2VuZEFzU3RyaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5nbG9iYWxPbk1lc3NhZ2VFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wcm92aWRlcnNIdWIgPSB7XG4gICAgICAgIC8vIG5hbWU6IFtdXG4gICAgICAgIH07XG4gICAgICAgIC8vIE9ubHkgaGFuZGxlIHR5cGU9UkVRVUVTVCBtZXNzYWdlcywgdHlwZT1SRVNQT05TRSBtZXNzYWdlIHdpbGwgYmUgaWdub3JlZFxuICAgICAgICB0aGlzLmdsb2JhbE9uTWVzc2FnZSA9IChtZXNzYWdlKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5yZWNlaXZlSGFuZGxlciAmJiB0aGlzLmdsb2JhbE9uTWVzc2FnZUVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmV0dXJuVmFsdWUgPSB5aWVsZCB0aGlzLmNvbmZpZy5yZWNlaXZlSGFuZGxlcihtZXNzYWdlLCB0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBtZXNzYWdlLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlOiBtZXNzYWdlLnNjb3BlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW90ZUlkOiBtZXNzYWdlLnJlbW90ZUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHJldHVyblZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5pZCAmJiBtZXNzYWdlLnR5cGUgPT09IElKc0JyaWRnZU1lc3NhZ2VUeXBlcy5SRVFVRVNUKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2VFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogbWVzc2FnZS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlOiBtZXNzYWdlLnNjb3BlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3RlSWQ6IG1lc3NhZ2UucmVtb3RlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChCUklER0VfRVZFTlRTLmVycm9yLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAvLyBub29wXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uSW5mby52ZXJzaW9uO1xuICAgICAgICB0aGlzLnJlbW90ZUluZm8gPSB7XG4gICAgICAgICAgICBvcmlnaW46ICcnLFxuICAgICAgICAgICAgcmVtb3RlSWQ6ICcnLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRlYnVnTG9nZ2VyID0gYXBwRGVidWdMb2dnZXI7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzID0gW107XG4gICAgICAgIHRoaXMuY2FsbGJhY2tJZCA9IDE7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLmNhbGxiYWNrc0V4cGlyZVRpbWVvdXQgPSAoX2EgPSBjb25maWcudGltZW91dCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogNjAgKiAxMDAwO1xuICAgICAgICB0aGlzLmRlYnVnTG9nZ2VyID0gY29uZmlnLmRlYnVnTG9nZ2VyIHx8IGFwcERlYnVnTG9nZ2VyO1xuICAgICAgICB0aGlzLnNlbmRBc1N0cmluZyA9IChfYiA9IGNvbmZpZy5zZW5kQXNTdHJpbmcpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHRoaXMuc2VuZEFzU3RyaW5nO1xuICAgICAgICBpZiAodGhpcy5jb25maWcucmVjZWl2ZUhhbmRsZXIpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbWlzdXNlZC1wcm9taXNlc1xuICAgICAgICAgICAgdGhpcy5vbihCUklER0VfRVZFTlRTLm1lc3NhZ2UsIHRoaXMuZ2xvYmFsT25NZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9uKEJSSURHRV9FVkVOVFMuZXJyb3IsIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgY29uc29sZUVycm9ySW5EZXYoJ0pzQnJpZGdlIEVSUk9SOiAnLCBlcnJvciwge1xuICAgICAgICAgICAgICAgIGNvZGU6IChfYSA9IGVycm9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29kZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZWplY3RFeHBpcmVkQ2FsbGJhY2tzKCk7XG4gICAgfVxuICAgIGF0dGFjaFByb3ZpZGVySW5zdGFuY2UocHJvdmlkZXIpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBuYW1lID0gcHJvdmlkZXIucHJvdmlkZXJOYW1lO1xuICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgICAgdGhpcy5wcm92aWRlcnNIdWJbbmFtZV0gPSAoX2EgPSB0aGlzLnByb3ZpZGVyc0h1YltuYW1lXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW107XG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyc0h1YltuYW1lXS5wdXNoKHByb3ZpZGVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjcmVhdGVDYWxsYmFja0lkKCkge1xuICAgICAgICB0aGlzLmNhbGxiYWNrSWQgKz0gMTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsbGJhY2tJZDtcbiAgICB9XG4gICAgY3JlYXRlUGF5bG9hZChwYXlsb2FkLCB7IHJlc29sdmUsIHJlamVjdCwgfSkge1xuICAgICAgICBjb25zdCB7IGlkLCB0eXBlIH0gPSBwYXlsb2FkO1xuICAgICAgICBpZiAocmVzb2x2ZSAmJiByZWplY3QgJiYgaWQgJiYgdHlwZSA9PT0gSUpzQnJpZGdlTWVzc2FnZVR5cGVzLlJFUVVFU1QpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNhbGxiYWNrc1tpZF0pIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPIGN1c3RvbSBlcnJvclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSnNCcmlkZ2UgRVJST1I6IGNhbGxiYWNrIGV4aXN0cywgaWQ9JHtpZH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzW2lkXSA9IHsgaWQsIHJlc29sdmUsIHJlamVjdCwgY3JlYXRlZDogRGF0ZS5ub3coKSB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIGNvbnZlcnQgdG8gcGxhaW4gZXJyb3Igb2JqZWN0IHdoaWNoIGNhbiBiZSBzdHJpbmdpZnlcbiAgICAgICAgaWYgKHBheWxvYWQuZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9ySW5mbyA9IHBheWxvYWQuZXJyb3I7XG4gICAgICAgICAgICBwYXlsb2FkLmVycm9yID0ge1xuICAgICAgICAgICAgICAgIGNvZGU6IGVycm9ySW5mby5jb2RlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9ySW5mby5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIGRhdGE6IGVycm9ySW5mby5kYXRhLFxuICAgICAgICAgICAgICAgIHN0YWNrOiBlcnJvckluZm8uc3RhY2ssXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIGRlbGV0ZSByZXNvbHZlLCByZWplY3QgZnVuY3Rpb24gd2hpY2ggY2FuIG5vdCBiZSBzZW5kIGFzIHN0cmluZ1xuICAgICAgICBwYXlsb2FkID09PSBudWxsIHx8IHBheWxvYWQgPT09IHZvaWQgMCA/IHRydWUgOiBkZWxldGUgcGF5bG9hZC5yZXNvbHZlO1xuICAgICAgICBwYXlsb2FkID09PSBudWxsIHx8IHBheWxvYWQgPT09IHZvaWQgMCA/IHRydWUgOiBkZWxldGUgcGF5bG9hZC5yZWplY3Q7XG4gICAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgIH1cbiAgICBzZW5kKHsgdHlwZSwgZGF0YSwgZXJyb3IsIGlkLCByZW1vdGVJZCwgc3luYyA9IGZhbHNlLCBzY29wZSB9KSB7XG4gICAgICAgIGNvbnN0IGV4ZWN1dG9yID0gKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgLy8gVE9ETyBjaGVjayByZXNvbHZlIHdoZW4gY2FsbGluZyB3aXRob3V0IGF3YWl0XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG4gICAgICAgICAgICBsZXQgX2lkID0gaWQ7XG4gICAgICAgICAgICAvLyBzZW5kU3luYyB3aXRob3V0IFByb21pc2UgY2FjaGVcbiAgICAgICAgICAgIGlmICghc3luYyAmJiB0eXBlID09PSBJSnNCcmlkZ2VNZXNzYWdlVHlwZXMuUkVRVUVTVCkge1xuICAgICAgICAgICAgICAgIF9pZCA9IHRoaXMuY3JlYXRlQ2FsbGJhY2tJZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gdGhpcy5jcmVhdGVQYXlsb2FkKHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IF9pZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbjogKChfYSA9IGdsb2JhbCA9PT0gbnVsbCB8fCBnbG9iYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGdsb2JhbC5sb2NhdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm9yaWdpbikgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgIHJlbW90ZUlkLFxuICAgICAgICAgICAgICAgICAgICBzY29wZSxcbiAgICAgICAgICAgICAgICB9LCB7IHJlc29sdmUsIHJlamVjdCB9KTtcbiAgICAgICAgICAgICAgICBsZXQgcGF5bG9hZFRvU2VuZCA9IHBheWxvYWQ7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VuZEFzU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWRUb1NlbmQgPSBKU09OLnN0cmluZ2lmeShwYXlsb2FkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5kZWJ1Z0xvZ2dlci5qc0JyaWRnZSgnc2VuZCcsIHBheWxvYWQsICdcXHJcXG4gLS0tLS0tPiAnLCBwYXlsb2FkLmRhdGEpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VuZFBheWxvYWQocGF5bG9hZFRvU2VuZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoX2lkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVqZWN0Q2FsbGJhY2soX2lkLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoQlJJREdFX0VWRU5UUy5lcnJvciwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHN5bmMpIHtcbiAgICAgICAgICAgIGV4ZWN1dG9yKCk7XG4gICAgICAgICAgICB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZXhlY3V0b3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlamVjdENhbGxiYWNrKGlkLCBlcnJvcikge1xuICAgICAgICB0aGlzLnByb2Nlc3NDYWxsYmFjayh7XG4gICAgICAgICAgICBtZXRob2Q6ICdyZWplY3QnLFxuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBlcnJvcixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlc29sdmVDYWxsYmFjayhpZCwgZGF0YSkge1xuICAgICAgICB0aGlzLnByb2Nlc3NDYWxsYmFjayh7XG4gICAgICAgICAgICBtZXRob2Q6ICdyZXNvbHZlJyxcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHByb2Nlc3NDYWxsYmFjayh7IG1ldGhvZCwgaWQsIGRhdGEsIGVycm9yLCB9KSB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrSW5mbyA9IHRoaXMuY2FsbGJhY2tzW2lkXTtcbiAgICAgICAgaWYgKGNhbGxiYWNrSW5mbykge1xuICAgICAgICAgICAgaWYgKG1ldGhvZCA9PT0gJ3JlamVjdCcpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2tJbmZvLnJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja0luZm8ucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KEJSSURHRV9FVkVOVFMuZXJyb3IsIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXRob2QgPT09ICdyZXNvbHZlJykge1xuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFja0luZm8ucmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja0luZm8ucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNsZWFyQ2FsbGJhY2tDYWNoZShpZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVqZWN0RXhwaXJlZENhbGxiYWNrcygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNhbGxiYWNrc0V4cGlyZVRpbWVvdXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZvci1pbi1hcnJheVxuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMuY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFja0luZm8gPSB0aGlzLmNhbGxiYWNrc1tpZF07XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2tJbmZvICYmIGNhbGxiYWNrSW5mby5jcmVhdGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdyAtIGNhbGxiYWNrSW5mby5jcmVhdGVkID4gdGhpcy5jYWxsYmFja3NFeHBpcmVUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gd2ViM0Vycm9ycy5wcm92aWRlci5yZXF1ZXN0VGltZW91dCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlamVjdENhbGxiYWNrKGlkLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZWplY3RFeHBpcmVkQ2FsbGJhY2tzKCk7XG4gICAgICAgIH0sIHRoaXMuY2FsbGJhY2tzRXhwaXJlVGltZW91dCk7XG4gICAgfVxuICAgIGNsZWFyQ2FsbGJhY2tDYWNoZShpZCkge1xuICAgICAgICBkZWxldGUgdGhpcy5jYWxsYmFja3NbaWRdO1xuICAgIH1cbiAgICByZWNlaXZlKHBheWxvYWRSZWNlaXZlZCA9ICcnLCBzZW5kZXIpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgbGV0IHBheWxvYWQgPSB7XG4gICAgICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoaXNQbGFpbk9iamVjdChwYXlsb2FkUmVjZWl2ZWQpKSB7XG4gICAgICAgICAgICBwYXlsb2FkID0gcGF5bG9hZFJlY2VpdmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1N0cmluZyhwYXlsb2FkUmVjZWl2ZWQpKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBheWxvYWQgPSBKU09OLnBhcnNlKHBheWxvYWRSZWNlaXZlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoQlJJREdFX0VWRU5UUy5lcnJvciwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSnNCcmlkZ2UgRVJST1I6IEpTT04ucGFyc2UgcGF5bG9hZFJlY2VpdmVkIGZhaWxlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vICFJTVBPUlRBTlQ6IGZvcmNlIG92ZXJ3cml0ZSBvcmlnaW4gYW5kIGludGVybmFsIGZpZWxkXG4gICAgICAgIC8vICAgIERPIE5PVCB0cnVzdCBkYXBwIHBhcmFtc1xuICAgICAgICBwYXlsb2FkLm9yaWdpbiA9IHNlbmRlciA9PT0gbnVsbCB8fCBzZW5kZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNlbmRlci5vcmlnaW47XG4gICAgICAgIHBheWxvYWQuaW50ZXJuYWwgPSBCb29sZWFuKHNlbmRlciA9PT0gbnVsbCB8fCBzZW5kZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNlbmRlci5pbnRlcm5hbCk7XG4gICAgICAgIC8vIGlnbm9yZSBsZWdhY3kgRXh0IHB1YmxpY0NvbmZpZyBtZXNzYWdlXG4gICAgICAgIGlmICgoc2VuZGVyID09PSBudWxsIHx8IHNlbmRlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2VuZGVyLmludGVybmFsKSAmJiB0aGlzLmlzRXh0VWkgJiYgaXNMZWdhY3lFeHRNZXNzYWdlKHBheWxvYWQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwYXlsb2FkLm9yaWdpbiAmJiAhdGhpcy5pc0luamVjdGVkKSB7XG4gICAgICAgICAgICBjb25zb2xlRXJyb3JJbkRldigoX2EgPSB0aGlzID09PSBudWxsIHx8IHRoaXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRoaXMuY29uc3RydWN0b3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uYW1lLCAnW3BheWxvYWQub3JpZ2luXSBpcyBtaXNzaW5nLicsIHRoaXMpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdKc0JyaWRnZSBFUlJPUjogcmVjZWl2ZSBtZXNzYWdlIFtwYXlsb2FkLm9yaWdpbl0gaXMgcmVxdWlyZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwYXlsb2FkLmludGVybmFsICYmICFwYXlsb2FkLnNjb3BlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0pzQnJpZGdlIEVSUk9SOiByZWNlaXZlIG1lc3NhZ2UgW3BheWxvYWQuc2NvcGVdIGlzIHJlcXVpcmVkIGZvciBub24taW50ZXJuYWwgbWV0aG9kIGNhbGwuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZWJ1Z0xvZ2dlci5qc0JyaWRnZSgncmVjZWl2ZScsIHBheWxvYWQsIHsgc2VuZGVyIH0sICdcXHJcXG4gLS0tLS0+ICcsIChfYiA9IHBheWxvYWQuZGF0YSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnJlc3VsdCwgJ1xcclxcbiAtLS0tLT4gJywgcGF5bG9hZC5kYXRhKTtcbiAgICAgICAgY29uc3QgeyB0eXBlLCBpZCwgZGF0YSwgZXJyb3IsIG9yaWdpbiwgcmVtb3RlSWQgfSA9IHBheWxvYWQ7XG4gICAgICAgIHRoaXMucmVtb3RlSW5mbyA9IHtcbiAgICAgICAgICAgIG9yaWdpbixcbiAgICAgICAgICAgIHJlbW90ZUlkLFxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZSA9PT0gSUpzQnJpZGdlTWVzc2FnZVR5cGVzLlJFU1BPTlNFKSB7XG4gICAgICAgICAgICBpZiAoaWQgPT09IHVuZGVmaW5lZCB8fCBpZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSnNCcmlkZ2UgRVJST1I6IHBhcmFtZXRlciBbaWRdIGlzIHJlcXVpcmVkIGluIEpzQnJpZGdlLnJlY2VpdmUoKSB3aGVuIFJFUVVFU1QgdHlwZSBtZXNzYWdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFja0luZm8gPSB0aGlzLmNhbGxiYWNrc1tpZF07XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2tJbmZvKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlamVjdENhbGxiYWNrKGlkLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc29sdmVDYWxsYmFjayhpZCwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoQlJJREdFX0VWRU5UUy5lcnJvciwgZXJyb3IwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5vb3BcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gSUpzQnJpZGdlTWVzc2FnZVR5cGVzLlJFUVVFU1QpIHtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50TWVzc2FnZVBheWxvYWQgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHBheWxvYWQpLCB7IGNyZWF0ZWQ6IERhdGUubm93KCkgfSk7XG4gICAgICAgICAgICAvLyBodHRwczovL25vZGVqcy5vcmcvYXBpL2V2ZW50cy5odG1sI2NhcHR1cmUtcmVqZWN0aW9ucy1vZi1wcm9taXNlc1xuICAgICAgICAgICAgLy8gb25seSB0eXBlPVJFUVVFU1QgbWVzc2FnZSB3aWxsIGJlIGhhbmRsZWQgYnkgZ2xvYmFsT25NZXNzYWdlXG4gICAgICAgICAgICB0aGlzLmVtaXQoQlJJREdFX0VWRU5UUy5tZXNzYWdlLCBldmVudE1lc3NhZ2VQYXlsb2FkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSnNCcmlkZ2UgRVJST1I6IHBheWxvYWQgdHlwZSBub3Qgc3VwcG9ydCB5ZXQgKHR5cGU9JHt0eXBlIHx8ICd1bmRlZmluZWQnfSlgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXF1ZXN0U3luYyh7IGRhdGEsIHNjb3BlLCByZW1vdGVJZCwgfSkge1xuICAgICAgICB2b2lkIHRoaXMuc2VuZCh7XG4gICAgICAgICAgICBpZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgdHlwZTogSUpzQnJpZGdlTWVzc2FnZVR5cGVzLlJFUVVFU1QsXG4gICAgICAgICAgICBzY29wZSxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICByZW1vdGVJZCxcbiAgICAgICAgICAgIHN5bmM6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXF1ZXN0KGluZm8pIHtcbiAgICAgICAgY29uc3QgeyBkYXRhLCByZW1vdGVJZCwgc2NvcGUgfSA9IGluZm87XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignSnNCcmlkZ2UgRVJST1I6IGRhdGEgcmVxdWlyZWQuIENhbGwgbGlrZSBgYnJpZGdlLnJlcXVlc3QoeyBkYXRhOiB7Li4ufSB9KTtgJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCh7XG4gICAgICAgICAgICB0eXBlOiBJSnNCcmlkZ2VNZXNzYWdlVHlwZXMuUkVRVUVTVCxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICByZW1vdGVJZCxcbiAgICAgICAgICAgIHN5bmM6IGZhbHNlLFxuICAgICAgICAgICAgc2NvcGUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBzZW5kIHJlc3BvbnNlIERBVEEgdG8gcmVtb3RlXG4gICAgcmVzcG9uc2UoeyBpZCwgZGF0YSwgcmVtb3RlSWQsIHNjb3BlLCB9KSB7XG4gICAgICAgIHZvaWQgdGhpcy5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6IElKc0JyaWRnZU1lc3NhZ2VUeXBlcy5SRVNQT05TRSxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIHJlbW90ZUlkLFxuICAgICAgICAgICAgc2NvcGUsXG4gICAgICAgICAgICBzeW5jOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gc2VuZCByZXNwb25zZSBFUlJPUiB0byByZW1vdGVcbiAgICByZXNwb25zZUVycm9yKHsgaWQsIGVycm9yLCBzY29wZSwgcmVtb3RlSWQsIH0pIHtcbiAgICAgICAgdm9pZCB0aGlzLnNlbmQoe1xuICAgICAgICAgICAgdHlwZTogSUpzQnJpZGdlTWVzc2FnZVR5cGVzLlJFU1BPTlNFLFxuICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIHJlbW90ZUlkLFxuICAgICAgICAgICAgc2NvcGUsXG4gICAgICAgICAgICBzeW5jOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgeyBKc0JyaWRnZUJhc2UsIGlzTGVnYWN5RXh0TWVzc2FnZSB9O1xuIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50ZW1pdHRlcjMnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnbG9kYXNoL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHNpdGVNZXRhZGF0YSBmcm9tICcuL3NpdGVNZXRhZGF0YSc7XG5pbXBvcnQgeyBmYWtlTG9nZ2VyLCBmYWtlRGVidWdMb2dnZXIsIGNvbnNvbGVFcnJvckluRGV2IH0gZnJvbSAnLi9sb2dnZXJzJztcbmltcG9ydCB2ZXJzaW9uSW5mbyBmcm9tICcuL3ZlcnNpb25JbmZvJztcbmNvbnN0IE1FVEhPRFMgPSB7XG4gICAgd2FsbGV0X2dldENvbm5lY3RXYWxsZXRJbmZvOiAnd2FsbGV0X2dldENvbm5lY3RXYWxsZXRJbmZvJyxcbiAgICB3YWxsZXRfc2VuZFNpdGVNZXRhZGF0YTogJ3dhbGxldF9zZW5kU2l0ZU1ldGFkYXRhJyxcbn07XG5jbGFzcyBQcm92aWRlckJhc2UgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbkluZm8udmVyc2lvbjtcbiAgICAgICAgdGhpcy5pc09uZUtleSA9IHRydWU7XG4gICAgICAgIHRoaXMuZGVidWdMb2dnZXIgPSBmYWtlRGVidWdMb2dnZXI7XG4gICAgICAgIHRoaXMubG9nZ2VyID0gZmFrZUxvZ2dlcjtcbiAgICAgICAgaWYgKCFjb25maWcuYnJpZGdlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb3ZpZGVyQmFzZSBpbml0IGVycm9yOiBicmlkZ2UgcmVxdWlyZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMuYnJpZGdlID0gY29uZmlnLmJyaWRnZTtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBjb25maWcubG9nZ2VyIHx8IGZha2VMb2dnZXI7XG4gICAgICAgIC8vIFRPRE8gaW5pdCB0aGlzLmRlYnVnTG9nZ2VyIGZpcnN0LCBhbmQgZW5hYmxlIGRlYnVnIGNvbmZpZyBhZnRlciBleHRlbnNpb24gY29ubmVjdFxuICAgICAgICB0aGlzLmRlYnVnTG9nZ2VyID0gKChfYSA9IHRoaXMuYnJpZGdlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGVidWdMb2dnZXIpIHx8IGZha2VEZWJ1Z0xvZ2dlcjtcbiAgICAgICAgKF9jID0gKF9iID0gdGhpcy5icmlkZ2UpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5kZWJ1Z0xvZ2dlcikgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLl9hdHRhY2hFeHRlcm5hbExvZ2dlcih0aGlzLmxvZ2dlcik7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXJndW1lbnRcbiAgICAgICAgICAgIHRoaXMuYnJpZGdlLmF0dGFjaFByb3ZpZGVySW5zdGFuY2UodGhpcyk7XG4gICAgICAgIH0sIDApO1xuICAgICAgICBpZiAoY29uZmlnLnNob3VsZFNlbmRNZXRhZGF0YSkge1xuICAgICAgICAgICAgdm9pZCB0aGlzLnNlbmRTaXRlTWV0YWRhdGEoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25maWdEZWJ1Z0xvZ2dlcihjb25maWcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghY29uZmlnIHx8ICF0aGlzLmJyaWRnZS5kZWJ1Z0xvZ2dlcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGRlYnVnTG9nZ2VyID0gdGhpcy5icmlkZ2UuZGVidWdMb2dnZXI7XG4gICAgICAgICAgICAoY29uZmlnLmVuYWJsZWRLZXlzIHx8IFtdKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgICAgICBkZWJ1Z0xvZ2dlci5fY3JlYXRlRGVidWdJbnN0YW5jZShrZXkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoY29uZmlnLmNvbmZpZykge1xuICAgICAgICAgICAgICAgIGRlYnVnTG9nZ2VyLl9kZWJ1Zy5lbmFibGUoY29uZmlnLmNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50XG4gICAgICAgICAgICB3aW5kb3cuJG9uZWtleSA9IHdpbmRvdy4kb25la2V5IHx8IHt9O1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICAgICAgd2luZG93LiRvbmVrZXkuJGRlYnVnTG9nZ2VyID0gZGVidWdMb2dnZXI7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlRXJyb3JJbkRldignY29uZmlnRGVidWdMb2dnZXIgRVJST1I6JywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldENvbm5lY3RXYWxsZXRJbmZvKHsgdGltZW91dCA9IDMwMDAgfSA9IHt9KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYXN5bmMtcHJvbWlzZS1leGVjdXRvcixAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbWlzdXNlZC1wcm9taXNlc1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9ICh5aWVsZCB0aGlzLmJyaWRnZVJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBNRVRIT0RTLndhbGxldF9nZXRDb25uZWN0V2FsbGV0SW5mbyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogW3sgdGltZTogRGF0ZS5ub3coKSB9XSxcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHJvdmlkZXJTdGF0ZSA9IHJlc3VsdC5wcm92aWRlclN0YXRlIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LmRlYnVnTG9nZ2VyQ29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZ0RlYnVnTG9nZ2VyKHJlc3VsdC5kZWJ1Z0xvZ2dlckNvbmZpZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQud2FsbGV0SW5mbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXNzaWdubWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LiRvbmVrZXkgPSB3aW5kb3cuJG9uZWtleSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy4kb25la2V5LiR3YWxsZXRJbmZvID0gcmVzdWx0LndhbGxldEluZm87XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gd2FsbGV0IG5vdCBpbnN0YWxsZWQsIHRpbWVvdXQgRVJST1JcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZUVycm9ySW5EZXYoJ2dldENvbm5lY3RXYWxsZXRJbmZvOiBFUlJPUicsIGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGJyaWRnZVJlcXVlc3QoZGF0YSwgY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGxldCBoYXNDYWxsYmFjayA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICYmIGlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XG4gICAgICAgICAgICAgICAgaGFzQ2FsbGJhY2sgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhICE9PSBudWxsICYmIGRhdGEgIT09IHZvaWQgMCA/IGRhdGEgOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgc2NvcGU6IHRoaXMucHJvdmlkZXJOYW1lLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5kZWJ1Z0xvZ2dlci5wcm92aWRlckJhc2UoJ2JyaWRnZVJlcXVlc3Q6JywgcGF5bG9hZCwgJ1xcclxcbiAtLS0tLT4gJywgcGF5bG9hZC5kYXRhKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNEYXRhID0geWllbGQgdGhpcy5icmlkZ2UucmVxdWVzdChwYXlsb2FkKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSByZXNEYXRhID8gcmVzRGF0YS5yZXN1bHQgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrICYmIGhhc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZGVidWdMb2dnZXIucHJvdmlkZXJCYXNlKCdicmlkZ2VSZXF1ZXN0IFJFVFVSTjonLCB7IHJlcTogcGF5bG9hZCwgcmVzOiByZXNEYXRhIH0sICdcXHJcXG4gLS0tLS0+ICcsIHBheWxvYWQuZGF0YSwgJ1xcclxcbiAtLS0tLT4gJywgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrICYmIGhhc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzZW5kU2l0ZU1ldGFkYXRhKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgbWV0YWRhdGEgPSB5aWVsZCBzaXRlTWV0YWRhdGEuZ2V0U2l0ZU1ldGFkYXRhKCk7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5icmlkZ2VSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IE1FVEhPRFMud2FsbGV0X3NlbmRTaXRlTWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBtZXRhZGF0YSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgeyBQcm92aWRlckJhc2UgfTtcbiIsImV4cG9ydCBjb25zdCBKU19CUklER0VfTUVTU0FHRV9JUENfQ0hBTk5FTCA9ICdvbmVrZXlASlNfQlJJREdFX01FU1NBR0VfSVBDX0NIQU5ORUwnO1xuZXhwb3J0IGNvbnN0IEpTX0JSSURHRV9NRVNTQUdFX0VYVF9DSEFOTkVMID0gJ29uZWtleUBKU19CUklER0VfTUVTU0FHRV9FWFRfQ0hBTk5FTCc7XG5leHBvcnQgY29uc3QgSlNfQlJJREdFX01FU1NBR0VfRVhUX1BJTkcgPSAnb25la2V5QEpTX0JSSURHRV9NRVNTQUdFX0VYVF9QSU5HJztcbmV4cG9ydCBjb25zdCBKU19CUklER0VfTUVTU0FHRV9ESVJFQ1RJT04gPSB7XG4gICAgJ0hPU1RfVE9fSU5QQUdFJzogJ29uZWtleUBKU19CUklER0VfTUVTU0FHRV9ESVJFQ1RJT04tSE9TVF9UT19JTlBBR0UnLFxuICAgICdJTlBBR0VfVE9fSE9TVCc6ICdvbmVrZXlASlNfQlJJREdFX01FU1NBR0VfRElSRUNUSU9OLUlOUEFHRV9UT19IT1NUJyxcbn07XG5leHBvcnQgY29uc3QgRVhUX1BPUlRfQ1NfVE9fQkcgPSAnb25la2V5QEVYVF9QT1JUX0NTX1RPX0JHJztcbmV4cG9ydCBjb25zdCBFWFRfUE9SVF9VSV9UT19CRyA9ICdvbmVrZXlARVhUX1BPUlRfVUlfVE9fQkcnO1xuZXhwb3J0IGNvbnN0IERFQlVHX0xPR0dFUl9TVE9SQUdFX0tFWSA9ICckJE9ORUtFWV9ERUJVR19MT0dHRVInO1xuIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbi8qKlxuICogVGhpcyBpcyB0aGUgd2ViIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICovXG5pbXBvcnQgeyBERUJVR19MT0dHRVJfU1RPUkFHRV9LRVkgfSBmcm9tICcuLi9jb25zdHMnO1xuaW1wb3J0IGh1bWFuaXplIGZyb20gJ21zJztcbmNvbnN0IHN0b3JhZ2VLZXkgPSBERUJVR19MT0dHRVJfU1RPUkFHRV9LRVk7XG5jb25zdCBleHBvcnRzQnJvd3NlciA9IHt9O1xuZXhwb3J0c0Jyb3dzZXIuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzQnJvd3Nlci5zYXZlID0gc2F2ZTtcbmV4cG9ydHNCcm93c2VyLmxvYWQgPSBsb2FkO1xuZXhwb3J0c0Jyb3dzZXIudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0c0Jyb3dzZXIuc3RvcmFnZSA9IGN1c3RvbUxvY2FsU3RvcmFnZSgpO1xuZXhwb3J0c0Jyb3dzZXIuaHVtYW5pemUgPSBodW1hbml6ZTtcbmV4cG9ydHNCcm93c2VyLmRlc3Ryb3kgPSAoKCkgPT4ge1xuICAgIGxldCB3YXJuZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignSW5zdGFuY2UgbWV0aG9kIGBkZWJ1Zy5kZXN0cm95KClgIGlzIGRlcHJlY2F0ZWQgYW5kIG5vIGxvbmdlciBkb2VzIGFueXRoaW5nLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBgZGVidWdgLicpO1xuICAgICAgICB9XG4gICAgfTtcbn0pKCk7XG4vKipcbiAqIENvbG9ycy5cbiAqL1xuZXhwb3J0c0Jyb3dzZXIuY29sb3JzID0gW1xuICAgICcjMDAwMENDJyxcbiAgICAnIzAwMDBGRicsXG4gICAgJyMwMDMzQ0MnLFxuICAgICcjMDAzM0ZGJyxcbiAgICAnIzAwNjZDQycsXG4gICAgJyMwMDY2RkYnLFxuICAgICcjMDA5OUNDJyxcbiAgICAnIzAwOTlGRicsXG4gICAgJyMwMENDMDAnLFxuICAgICcjMDBDQzMzJyxcbiAgICAnIzAwQ0M2NicsXG4gICAgJyMwMENDOTknLFxuICAgICcjMDBDQ0NDJyxcbiAgICAnIzAwQ0NGRicsXG4gICAgJyMzMzAwQ0MnLFxuICAgICcjMzMwMEZGJyxcbiAgICAnIzMzMzNDQycsXG4gICAgJyMzMzMzRkYnLFxuICAgICcjMzM2NkNDJyxcbiAgICAnIzMzNjZGRicsXG4gICAgJyMzMzk5Q0MnLFxuICAgICcjMzM5OUZGJyxcbiAgICAnIzMzQ0MwMCcsXG4gICAgJyMzM0NDMzMnLFxuICAgICcjMzNDQzY2JyxcbiAgICAnIzMzQ0M5OScsXG4gICAgJyMzM0NDQ0MnLFxuICAgICcjMzNDQ0ZGJyxcbiAgICAnIzY2MDBDQycsXG4gICAgJyM2NjAwRkYnLFxuICAgICcjNjYzM0NDJyxcbiAgICAnIzY2MzNGRicsXG4gICAgJyM2NkNDMDAnLFxuICAgICcjNjZDQzMzJyxcbiAgICAnIzk5MDBDQycsXG4gICAgJyM5OTAwRkYnLFxuICAgICcjOTkzM0NDJyxcbiAgICAnIzk5MzNGRicsXG4gICAgJyM5OUNDMDAnLFxuICAgICcjOTlDQzMzJyxcbiAgICAnI0NDMDAwMCcsXG4gICAgJyNDQzAwMzMnLFxuICAgICcjQ0MwMDY2JyxcbiAgICAnI0NDMDA5OScsXG4gICAgJyNDQzAwQ0MnLFxuICAgICcjQ0MwMEZGJyxcbiAgICAnI0NDMzMwMCcsXG4gICAgJyNDQzMzMzMnLFxuICAgICcjQ0MzMzY2JyxcbiAgICAnI0NDMzM5OScsXG4gICAgJyNDQzMzQ0MnLFxuICAgICcjQ0MzM0ZGJyxcbiAgICAnI0NDNjYwMCcsXG4gICAgJyNDQzY2MzMnLFxuICAgICcjQ0M5OTAwJyxcbiAgICAnI0NDOTkzMycsXG4gICAgJyNDQ0NDMDAnLFxuICAgICcjQ0NDQzMzJyxcbiAgICAnI0ZGMDAwMCcsXG4gICAgJyNGRjAwMzMnLFxuICAgICcjRkYwMDY2JyxcbiAgICAnI0ZGMDA5OScsXG4gICAgJyNGRjAwQ0MnLFxuICAgICcjRkYwMEZGJyxcbiAgICAnI0ZGMzMwMCcsXG4gICAgJyNGRjMzMzMnLFxuICAgICcjRkYzMzY2JyxcbiAgICAnI0ZGMzM5OScsXG4gICAgJyNGRjMzQ0MnLFxuICAgICcjRkYzM0ZGJyxcbiAgICAnI0ZGNjYwMCcsXG4gICAgJyNGRjY2MzMnLFxuICAgICcjRkY5OTAwJyxcbiAgICAnI0ZGOTkzMycsXG4gICAgJyNGRkNDMDAnLFxuICAgICcjRkZDQzMzJyxcbl07XG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKi9cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcbiAgICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gICAgLy8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2VcbiAgICAvLyBleHBsaWNpdGx5XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHdpbmRvdy5wcm9jZXNzICYmXG4gICAgICAgICh3aW5kb3cucHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInIHx8IHdpbmRvdy5wcm9jZXNzLl9fbndqcykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cbiAgICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJlxuICAgICAgICBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBJcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuICAgIC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG4gICAgcmV0dXJuICgodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiZcbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmXG4gICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuICAgICAgICAvLyBJcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG4gICAgICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgd2luZG93LmNvbnNvbGUgJiZcbiAgICAgICAgICAgICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcbiAgICAgICAgLy8gSXMgZmlyZWZveCA+PSB2MzE/XG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuICAgICAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQgJiZcbiAgICAgICAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmXG4gICAgICAgICAgICBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcbiAgICAgICAgLy8gRG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuICAgICAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQgJiZcbiAgICAgICAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSkpO1xufVxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gICAgYXJnc1swXSA9IGAkeyh0aGlzLnVzZUNvbG9ycyA/ICclYycgOiAnJykgK1xuICAgICAgICB0aGlzLm5hbWVzcGFjZSArXG4gICAgICAgICh0aGlzLnVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKSArXG4gICAgICAgIGFyZ3NbMF0gK1xuICAgICAgICAodGhpcy51c2VDb2xvcnMgPyAnJWMgJyA6ICcgJyl9KyR7ZXhwb3J0c0Jyb3dzZXIuaHVtYW5pemUodGhpcy5kaWZmKX1gO1xuICAgIGlmICghdGhpcy51c2VDb2xvcnMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjID0gYGNvbG9yOiAke3RoaXMuY29sb3J9YDtcbiAgICBhcmdzLnNwbGljZSgxLCAwLCBjLCAnY29sb3I6IGluaGVyaXQnKTtcbiAgICAvLyBUaGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuICAgIC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cbiAgICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGxldCBsYXN0QyA9IDA7XG4gICAgYXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIChtYXRjaCkgPT4ge1xuICAgICAgICBpZiAobWF0Y2ggPT09ICclJScpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCArPSAxO1xuICAgICAgICBpZiAobWF0Y2ggPT09ICclYycpIHtcbiAgICAgICAgICAgIC8vIFdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgICAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUuZGVidWcoKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmRlYnVnYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKiBJZiBgY29uc29sZS5kZWJ1Z2AgaXMgbm90IGF2YWlsYWJsZSwgZmFsbHMgYmFja1xuICogdG8gYGNvbnNvbGUubG9nYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5leHBvcnRzQnJvd3Nlci5sb2cgPSAoLi4uYXJncykgPT4ge1xuICAgIGlmIChjb25zb2xlLmRlYnVnKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoLi4uYXJncyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvbnNvbGUubG9nKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKC4uLmFyZ3MpO1xuICAgIH1cbn07XG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChuYW1lc3BhY2VzKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgZXhwb3J0c0Jyb3dzZXIuc3RvcmFnZS5zZXRJdGVtKHN0b3JhZ2VLZXksIG5hbWVzcGFjZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgeWllbGQgZXhwb3J0c0Jyb3dzZXIuc3RvcmFnZS5yZW1vdmVJdGVtKHN0b3JhZ2VLZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gU3dhbGxvd1xuICAgICAgICAgICAgLy8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdkZWJ1ZyBsb2dnZXIgc3RvcmFnZSBlcnJvcicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbG9hZCgpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBsZXQgcjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHIgPSB5aWVsZCBleHBvcnRzQnJvd3Nlci5zdG9yYWdlLmdldEl0ZW0oc3RvcmFnZUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBTd2FsbG93XG4gICAgICAgICAgICAvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2RlYnVnIGxvZ2dlciBzdG9yYWdlIGVycm9yJywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcbiAgICAgICAgaWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG4gICAgICAgICAgICByID0gcHJvY2Vzcy5lbnYuREVCVUc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfSk7XG59XG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjdXN0b21Mb2NhbFN0b3JhZ2UoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbC4kJG9uZWtleUFwcFN0b3JhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWwuJCRvbmVrZXlBcHBTdG9yYWdlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRWTUxLaXQgKEFwcGxlIFRWIEpTIFJ1bnRpbWUpIGRvZXMgbm90IGhhdmUgYSB3aW5kb3cgb2JqZWN0LCBqdXN0IGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHRcbiAgICAgICAgLy8gVGhlIEJyb3dzZXIgYWxzbyBoYXMgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dC5cbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5sb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUud2FybignZGVidWdMb2dnZXIgaW5pdCB3YXJuaW5nLCBuZWl0aGVyIGBnbG9iYWwuJCRvbmVrZXlBcHBTdG9yYWdlYCBub3IgYHdpbmRvdy5sb2NhbFN0b3JhZ2VgIGZvdW5kLicpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0SXRlbSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0SXRlbSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBub29wXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVtb3ZlSXRlbSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBub29wXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gU3dhbGxvd1xuICAgICAgICAvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cbiAgICAgICAgY29uc29sZS5lcnJvcignZGVidWcgbG9nZ2VyIHN0b3JhZ2UgZXJyb3InLCBlcnJvcik7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgZXhwb3J0c0Jyb3dzZXI7XG4iLCJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICovXG5pbXBvcnQgaHVtYW5pemUgZnJvbSAnbXMnO1xuZnVuY3Rpb24gc2V0dXAoZW52KSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1ZztcbiAgICAgICAgY3JlYXRlRGVidWcuZGVmYXVsdCA9IGNyZWF0ZURlYnVnO1xuICAgICAgICBjcmVhdGVEZWJ1Zy5jb2VyY2UgPSBjb2VyY2U7XG4gICAgICAgIGNyZWF0ZURlYnVnLmRpc2FibGUgPSBkaXNhYmxlO1xuICAgICAgICBjcmVhdGVEZWJ1Zy5lbmFibGUgPSBlbmFibGU7XG4gICAgICAgIGNyZWF0ZURlYnVnLmVuYWJsZWQgPSBlbmFibGVkO1xuICAgICAgICBjcmVhdGVEZWJ1Zy5odW1hbml6ZSA9IGh1bWFuaXplO1xuICAgICAgICBjcmVhdGVEZWJ1Zy5kZXN0cm95ID0gZGVzdHJveTtcbiAgICAgICAgT2JqZWN0LmtleXMoZW52KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIGNyZWF0ZURlYnVnW2tleV0gPSBlbnZba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG4gICAgICAgIGNyZWF0ZURlYnVnLnNraXBzID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG4gICAgICAgICAqXG4gICAgICAgICAqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZURlYnVnLmZvcm1hdHRlcnMgPSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaih2KSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJHtlcnJvci5tZXNzYWdlfWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNlbGVjdHMgYSBjb2xvciBmb3IgYSBkZWJ1ZyBuYW1lc3BhY2VcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIHN0cmluZyBmb3IgdGhlIGRlYnVnIGluc3RhbmNlIHRvIGJlIGNvbG9yZWRcbiAgICAgICAgICogQHJldHVybiB7TnVtYmVyfFN0cmluZ30gQW4gQU5TSSBjb2xvciBjb2RlIGZvciB0aGUgZ2l2ZW4gbmFtZXNwYWNlXG4gICAgICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG4gICAgICAgICAgICBsZXQgaGFzaCA9IDA7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzcGFjZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGhhc2ggPSAoaGFzaCA8PCA1KSAtIGhhc2ggKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgICAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZURlYnVnLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGNyZWF0ZURlYnVnLmNvbG9ycy5sZW5ndGhdO1xuICAgICAgICB9XG4gICAgICAgIGNyZWF0ZURlYnVnLnNlbGVjdENvbG9yID0gc2VsZWN0Q29sb3I7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICAgICAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAgICAgICAgICogQGFwaSBwdWJsaWNcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuICAgICAgICAgICAgbGV0IHByZXZUaW1lO1xuICAgICAgICAgICAgbGV0IGVuYWJsZU92ZXJyaWRlID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBuYW1lc3BhY2VzQ2FjaGU7XG4gICAgICAgICAgICBsZXQgZW5hYmxlZENhY2hlO1xuICAgICAgICAgICAgZnVuY3Rpb24gZGVidWcoLi4uYXJncykge1xuICAgICAgICAgICAgICAgIC8vIERpc2FibGVkP1xuICAgICAgICAgICAgICAgIGlmICghZGVidWcuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSBkZWJ1ZztcbiAgICAgICAgICAgICAgICAvLyBTZXQgYGRpZmZgIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnIgPSBOdW1iZXIobmV3IERhdGUoKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuICAgICAgICAgICAgICAgIHNlbGYuZGlmZiA9IG1zO1xuICAgICAgICAgICAgICAgIHNlbGYucHJldiA9IHByZXZUaW1lO1xuICAgICAgICAgICAgICAgIHNlbGYuY3VyciA9IGN1cnI7XG4gICAgICAgICAgICAgICAgcHJldlRpbWUgPSBjdXJyO1xuICAgICAgICAgICAgICAgIGFyZ3NbMF0gPSBjcmVhdGVEZWJ1Zy5jb2VyY2UoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzBdICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBBbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuICAgICAgICAgICAgICAgICAgICBhcmdzLnVuc2hpZnQoJyVPJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG4gICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICBhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgKG1hdGNoLCBmb3JtYXQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggPT09ICclJScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnJSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVyID0gY3JlYXRlRGVidWcuZm9ybWF0dGVyc1tmb3JtYXRdO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZvcm1hdHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsID0gYXJnc1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyBBcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuICAgICAgICAgICAgICAgIGNyZWF0ZURlYnVnLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2dGbiA9IHNlbGYubG9nIHx8IGNyZWF0ZURlYnVnLmxvZztcbiAgICAgICAgICAgICAgICBsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbiAgICAgICAgICAgIGRlYnVnLnVzZUNvbG9ycyA9IGNyZWF0ZURlYnVnLnVzZUNvbG9ycygpO1xuICAgICAgICAgICAgZGVidWcuY29sb3IgPSBjcmVhdGVEZWJ1Zy5zZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuICAgICAgICAgICAgZGVidWcuZXh0ZW5kID0gZXh0ZW5kO1xuICAgICAgICAgICAgZGVidWcuZGVzdHJveSA9IGNyZWF0ZURlYnVnLmRlc3Ryb3k7IC8vIFhYWCBUZW1wb3JhcnkuIFdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRlYnVnLCAnZW5hYmxlZCcsIHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmFibGVPdmVycmlkZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVuYWJsZU92ZXJyaWRlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lc3BhY2VzQ2FjaGUgIT09IGNyZWF0ZURlYnVnLm5hbWVzcGFjZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZXNDYWNoZSA9IGNyZWF0ZURlYnVnLm5hbWVzcGFjZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVkQ2FjaGUgPSBjcmVhdGVEZWJ1Zy5lbmFibGVkKG5hbWVzcGFjZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVuYWJsZWRDYWNoZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlT3ZlcnJpZGUgPSB2O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIEVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNyZWF0ZURlYnVnLmluaXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjcmVhdGVEZWJ1Zy5pbml0KGRlYnVnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkZWJ1ZztcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBleHRlbmQobmFtZXNwYWNlLCBkZWxpbWl0ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0RlYnVnID0gY3JlYXRlRGVidWcodGhpcy5uYW1lc3BhY2UgKyAodHlwZW9mIGRlbGltaXRlciA9PT0gJ3VuZGVmaW5lZCcgPyAnOicgOiBkZWxpbWl0ZXIpICsgbmFtZXNwYWNlKTtcbiAgICAgICAgICAgIG5ld0RlYnVnLmxvZyA9IHRoaXMubG9nO1xuICAgICAgICAgICAgcmV0dXJuIG5ld0RlYnVnO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG4gICAgICAgICAqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gICAgICAgICAqIEBhcGkgcHVibGljXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCBjcmVhdGVEZWJ1Zy5zYXZlKG5hbWVzcGFjZXMpO1xuICAgICAgICAgICAgICAgIGNyZWF0ZURlYnVnLm5hbWVzcGFjZXMgPSBuYW1lc3BhY2VzO1xuICAgICAgICAgICAgICAgIGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG4gICAgICAgICAgICAgICAgY3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcbiAgICAgICAgICAgICAgICBsZXQgaTtcbiAgICAgICAgICAgICAgICBjb25zdCBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVuID0gc3BsaXQubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXNwbGl0W2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZURlYnVnLnNraXBzLnB1c2gobmV3IFJlZ0V4cChgXiR7bmFtZXNwYWNlcy5zdWJzdHIoMSl9JGApKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZURlYnVnLm5hbWVzLnB1c2gobmV3IFJlZ0V4cChgXiR7bmFtZXNwYWNlc30kYCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAgICAgICAgICogQGFwaSBwdWJsaWNcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICAgICAgICBjb25zdCBuYW1lc3BhY2VzID0gW1xuICAgICAgICAgICAgICAgIC4uLmNyZWF0ZURlYnVnLm5hbWVzLm1hcCh0b05hbWVzcGFjZSksXG4gICAgICAgICAgICAgICAgLi4uY3JlYXRlRGVidWcuc2tpcHMubWFwKHRvTmFtZXNwYWNlKS5tYXAoKG5hbWVzcGFjZSkgPT4gYC0ke25hbWVzcGFjZX1gKSxcbiAgICAgICAgICAgIF0uam9pbignLCcpO1xuICAgICAgICAgICAgY3JlYXRlRGVidWcuZW5hYmxlKCcnKTtcbiAgICAgICAgICAgIHJldHVybiBuYW1lc3BhY2VzO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAgICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICAgICAqIEBhcGkgcHVibGljXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcbiAgICAgICAgICAgIGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGk7XG4gICAgICAgICAgICBsZXQgbGVuO1xuICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoY3JlYXRlRGVidWcuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoY3JlYXRlRGVidWcubmFtZXNbaV0udGVzdChuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnQgcmVnZXhwIHRvIG5hbWVzcGFjZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gcmVneGVwXG4gICAgICAgICAqIEByZXR1cm4ge1N0cmluZ30gbmFtZXNwYWNlXG4gICAgICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gdG9OYW1lc3BhY2UocmVnZXhwKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVnZXhwXG4gICAgICAgICAgICAgICAgLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAuc3Vic3RyaW5nKDIsIHJlZ2V4cC50b1N0cmluZygpLmxlbmd0aCAtIDIpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcLlxcKlxcPyQvLCAnKicpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2VyY2UgYHZhbGAuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICAgICAgICAgKiBAcmV0dXJuIHtNaXhlZH1cbiAgICAgICAgICogQGFwaSBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gICAgICAgICAgICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogWFhYIERPIE5PVCBVU0UuIFRoaXMgaXMgYSB0ZW1wb3Jhcnkgc3R1YiBmdW5jdGlvbi5cbiAgICAgICAgICogWFhYIEl0IFdJTEwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignSW5zdGFuY2UgbWV0aG9kIGBkZWJ1Zy5kZXN0cm95KClgIGlzIGRlcHJlY2F0ZWQgYW5kIG5vIGxvbmdlciBkb2VzIGFueXRoaW5nLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBgZGVidWdgLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHlpZWxkIGNyZWF0ZURlYnVnLmxvYWQoKTtcbiAgICAgICAgeWllbGQgY3JlYXRlRGVidWcuZW5hYmxlKGNvbmZpZyk7XG4gICAgICAgIHJldHVybiBjcmVhdGVEZWJ1ZztcbiAgICB9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IHNldHVwO1xuIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5pbXBvcnQgc2V0dXAgZnJvbSAnLi9jb21tb24nO1xuaW1wb3J0IGJyb3dzZXIgZnJvbSAnLi9icm93c2VyJztcbmZ1bmN0aW9uIGNyZWF0ZURlYnVnQXN5bmMoKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIHNldHVwKGJyb3dzZXIpO1xuICAgIH0pO1xufVxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRGVidWdBc3luYztcbiIsImV4cG9ydCAqIGZyb20gJy4vSnNCcmlkZ2VCYXNlJztcbmV4cG9ydCAqIGZyb20gJy4vUHJvdmlkZXJCYXNlJztcbmV4cG9ydCAqIGZyb20gJy4vbG9nZ2Vycyc7XG5leHBvcnQgKiBmcm9tICcuL2luamVjdEpzQnJpZGdlJztcbmV4cG9ydCAqIGZyb20gJy4vaW5qZWN0ZWRQcm92aWRlclJlY2VpdmVIYW5kbGVyJztcbmltcG9ydCAqIGFzIGNvbnN0cyBmcm9tICcuL2NvbnN0cyc7XG5leHBvcnQgeyBjb25zdHMgfTtcbmltcG9ydCBpbmplY3RlZEZhY3RvcnkgZnJvbSAnLi9pbmplY3RlZEZhY3RvcnknO1xuZXhwb3J0IHsgaW5qZWN0ZWRGYWN0b3J5IH07XG5pbXBvcnQgc2l0ZU1ldGFkYXRhIGZyb20gJy4vc2l0ZU1ldGFkYXRhJztcbmV4cG9ydCB7IHNpdGVNZXRhZGF0YSB9O1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2ZXJzaW9uSW5mbyB9IGZyb20gJy4vdmVyc2lvbkluZm8nO1xuIiwiaW1wb3J0IHsgREVCVUdfTE9HR0VSX1NUT1JBR0VfS0VZIH0gZnJvbSAnLi9jb25zdHMnO1xuZnVuY3Rpb24gZml4R2xvYmFsU2hpbSgpIHtcbiAgICAvLyBGSVggZXJyb3JzIGluIFJlYWN0TmF0aXZlXG4gICAgLy8gICAgUmVmZXJlbmNlRXJyb3I6IENhbid0IGZpbmQgdmFyaWFibGU6IGdsb2JhbFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB3aW5kb3cuZ2xvYmFsID0gd2luZG93Lmdsb2JhbCB8fCB3aW5kb3cgfHwgd2luZG93Lmdsb2JhbFRoaXM7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHdpbmRvdy5nbG9iYWwgPSB3aW5kb3cuZ2xvYmFsIHx8IHdpbmRvdyB8fCB3aW5kb3cuZ2xvYmFsVGhpcztcbn1cbmZ1bmN0aW9uIGluamVjdEpzQnJpZGdlKGJyaWRnZUNyZWF0b3IpIHtcbiAgICB2YXIgX2E7XG4gICAgZml4R2xvYmFsU2hpbSgpO1xuICAgIGlmICghKChfYSA9IHdpbmRvdyA9PT0gbnVsbCB8fCB3aW5kb3cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHdpbmRvdy4kb25la2V5KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuanNCcmlkZ2UpKSB7XG4gICAgICAgIHdpbmRvdy4kb25la2V5ID0gd2luZG93LiRvbmVrZXkgfHwge307XG4gICAgICAgIHdpbmRvdy4kb25la2V5LmpzQnJpZGdlID0gYnJpZGdlQ3JlYXRvcigpO1xuICAgICAgICBpZiAodHlwZW9mIGxvY2FsU3RvcmFnZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9jYWxTdG9yYWdlLmdldEl0ZW0oREVCVUdfTE9HR0VSX1NUT1JBR0VfS0VZKSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJz09PT09IGpzQnJpZGdlIGluamVjdGVkIHN1Y2Nlc3MhID4+Pj4+ICcsIHBlcmZvcm1hbmNlLm5vdygpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gd2luZG93LiRvbmVrZXkuanNCcmlkZ2U7XG59XG5leHBvcnQgeyBpbmplY3RKc0JyaWRnZSB9O1xuIiwiZnVuY3Rpb24gY3JlYXRlQ29kZVdpdGhTY3JpcHRUYWcoeyBjb2RlIH0pIHtcbiAgICAvLyBzY3JpcHQgaWQgY2hlY2ssIG9ubHkgaW5qZWN0IG9uY2UuXG4gICAgcmV0dXJuIGBcbiAgICAoZnVuY3Rpb24oKXtcbiAgICAgIGNvbnN0IHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgIHMuc2V0QXR0cmlidXRlKCdhc3luYycsICdmYWxzZScpO1xuICAgICAgcy5zZXRBdHRyaWJ1dGUoJ2RhdGEtb25la2V5LWluamVjdGVkJywgJ3RydWUnKTtcbiAgICAgIHMudGV4dENvbnRlbnQ9JHtKU09OLnN0cmluZ2lmeShjb2RlKX07XG4gICAgICAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLmFwcGVuZENoaWxkKHMpO1xuICAgICAgcy5yZW1vdmUoKTtcbiAgICB9KSgpO1xuICBgO1xufVxuZnVuY3Rpb24gaW5qZWN0Q29kZVdpdGhTY3JpcHRUYWcoeyBjb2RlLCBmaWxlLCByZW1vdmUgPSB0cnVlLCB9KSB7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICBzLnNldEF0dHJpYnV0ZSgnYXN5bmMnLCAnZmFsc2UnKTtcbiAgICAgICAgcy5zZXRBdHRyaWJ1dGUoJ2RlZmVyJywgJ2ZhbHNlJyk7XG4gICAgICAgIHMuc2V0QXR0cmlidXRlKCdkYXRhLW9uZWtleS1pbmplY3RlZCcsICd0cnVlJyk7XG4gICAgICAgIGlmIChjb2RlKSB7XG4gICAgICAgICAgICBzLnRleHRDb250ZW50ID0gSlNPTi5zdHJpbmdpZnkoY29kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpbGUpIHtcbiAgICAgICAgICAgIHMuc3JjID0gZmlsZTtcbiAgICAgICAgfVxuICAgICAgICBzLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChyZW1vdmUgJiYgZmlsZSkge1xuICAgICAgICAgICAgICAgIHMucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIChkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuYXBwZW5kQ2hpbGQocyk7XG4gICAgICAgIGlmIChyZW1vdmUgJiYgY29kZSkge1xuICAgICAgICAgICAgcy5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgIH0pKCk7XG59XG5mdW5jdGlvbiBjcmVhdGVDb2RlSnNCcmlkZ2VSZWNlaXZlKHBheWxvYWRTdHIpIHtcbiAgICByZXR1cm4gYFxuICBpZih3aW5kb3cuJG9uZWtleSAmJiB3aW5kb3cuJG9uZWtleS5qc0JyaWRnZSl7XG4gICAgd2luZG93LiRvbmVrZXkuanNCcmlkZ2UucmVjZWl2ZSgke0pTT04uc3RyaW5naWZ5KHBheWxvYWRTdHIpfSk7XG4gIH1cbiAgdm9pZCAwO1xuICBgO1xufVxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGluamVjdENvZGVXaXRoU2NyaXB0VGFnLFxuICAgIGNyZWF0ZUNvZGVXaXRoU2NyaXB0VGFnLFxuICAgIGNyZWF0ZUNvZGVKc0JyaWRnZVJlY2VpdmUsXG59O1xuIiwiaW1wb3J0IHsgY29uc29sZUVycm9ySW5EZXYgfSBmcm9tICcuL2xvZ2dlcnMnO1xuZnVuY3Rpb24gaW5qZWN0ZWRQcm92aWRlclJlY2VpdmVIYW5kbGVyKHBheWxvYWQsIGJyaWRnZSkge1xuICAgIC8vIGV0aGVyZXVtLCBzb2xhbmEsIGNvbmZsdXhcbiAgICBjb25zdCBwcm92aWRlckh1YiA9IChicmlkZ2UgPT09IG51bGwgfHwgYnJpZGdlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBicmlkZ2UucHJvdmlkZXJzSHViKSB8fCB3aW5kb3cuJG9uZWtleTtcbiAgICBjb25zdCBwcm92aWRlck5hbWUgPSBwYXlsb2FkLnNjb3BlO1xuICAgIGNvbnN0IHBheWxvYWREYXRhID0gcGF5bG9hZC5kYXRhO1xuICAgIGlmICghcHJvdmlkZXJOYW1lKSB7XG4gICAgICAgIGNvbnNvbGVFcnJvckluRGV2KCdwcm92aWRlck5hbWUgKHNjb3BlKSBpcyByZXF1aXJlZCBpbiBpbmplY3RlZFByb3ZpZGVyUmVjZWl2ZUhhbmRsZXIuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcHJvdmlkZXJzID0gW11cbiAgICAgICAgLmNvbmNhdChwcm92aWRlckh1Yltwcm92aWRlck5hbWVdKVxuICAgICAgICAuZmlsdGVyKEJvb2xlYW4pO1xuICAgIGlmICghcHJvdmlkZXJzIHx8ICFwcm92aWRlcnMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnNvbGVFcnJvckluRGV2KGBbJHtwcm92aWRlck5hbWV9XSBwcm92aWRlciBpcyBOT1QgaW5qZWN0ZWQgdG8gZG9jdW1lbnQgb3IgYnJpZGdlLmApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGVtaXQgZXZlbnRzIHRvIGluamVjdGVkIHByb3ZpZGVyXG4gICAgcHJvdmlkZXJzLmZvckVhY2goKHByb3ZpZGVyKSA9PiB7XG4gICAgICAgIGlmIChwcm92aWRlciAmJiBwcm92aWRlci5lbWl0KSB7XG4gICAgICAgICAgICBwcm92aWRlci5lbWl0KCdtZXNzYWdlX2xvd19sZXZlbCcsIHBheWxvYWREYXRhKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0IHsgaW5qZWN0ZWRQcm92aWRlclJlY2VpdmVIYW5kbGVyIH07XG4iLCIvLyBAdHMtaWdub3JlXG5pbXBvcnQgY3JlYXRlRGVidWdBc3luYyBmcm9tICcuL2RlYnVnJztcbmltcG9ydCB7IERFQlVHX0xPR0dFUl9TVE9SQUdFX0tFWSB9IGZyb20gJy4vY29uc3RzJztcbi8vIGVuYWJsZSBkZWJ1Z0xvZ2dlcjpcbi8vICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCckJE9ORUtFWV9ERUJVR19MT0dHRVInLCAnKicpO1xuZnVuY3Rpb24gY29uc29sZUVycm9ySW5EZXYoLi4uYXJncykge1xuICAgIGNvbnN0IGxvZ2dlckNvbmZpZyA9IHR5cGVvZiBsb2NhbFN0b3JhZ2UgIT09ICd1bmRlZmluZWQnICYmIGxvY2FsU3RvcmFnZS5nZXRJdGVtKERFQlVHX0xPR0dFUl9TVE9SQUdFX0tFWSk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgfHwgbG9nZ2VyQ29uZmlnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoLi4uYXJncyk7XG4gICAgfVxufVxuY29uc3QgZmFrZUxvZ2dlciA9IHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgX2lzRmFrZUxvZ2dlcjogdHJ1ZSxcbiAgICBsb2c6ICguLi5hcmdzKSA9PiB1bmRlZmluZWQsXG4gICAgd2FybjogKC4uLmFyZ3MpID0+IHVuZGVmaW5lZCxcbiAgICBlcnJvcjogKC4uLmFyZ3MpID0+IHVuZGVmaW5lZCxcbiAgICBkZWJ1ZzogKC4uLmFyZ3MpID0+IHVuZGVmaW5lZCxcbiAgICBpbmZvOiAoLi4uYXJncykgPT4gdW5kZWZpbmVkLFxuICAgIHRyYWNlOiAoLi4uYXJncykgPT4gdW5kZWZpbmVkLFxufTtcbmNsYXNzIEZha2VEZWJ1Z0xvZ2dlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2RlYnVnID0ge1xuICAgICAgICAgICAgZW5hYmxlKGNvbmZpZykge1xuICAgICAgICAgICAgICAgIC8vbm9vcFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fZXh0ZXJuYWxMb2dnZXIgPSBmYWtlTG9nZ2VyO1xuICAgICAgICB0aGlzLl9jcmVhdGVFeHRlcm5hbExvZyA9IChuYW1lKSA9PiAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgY29uc3QgX2xvZ2dlciA9IHRoaXMuX2V4dGVybmFsTG9nZ2VyO1xuICAgICAgICAgICAgaWYgKF9sb2dnZXIpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudFxuICAgICAgICAgICAgICAgIHJldHVybiBfbG9nZ2VyLmxvZyhuYW1lLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5qc0JyaWRnZSA9IHRoaXMuX2NyZWF0ZUV4dGVybmFsTG9nKCdqc0JyaWRnZSA+PicpO1xuICAgICAgICB0aGlzLnByb3ZpZGVyQmFzZSA9IHRoaXMuX2NyZWF0ZUV4dGVybmFsTG9nKCdwcm92aWRlckJhc2UgPj4nKTtcbiAgICAgICAgdGhpcy5leHRJbmplY3RlZCA9IHRoaXMuX2NyZWF0ZUV4dGVybmFsTG9nKCdleHRJbmplY3RlZCA+PicpO1xuICAgICAgICB0aGlzLmV4dENvbnRlbnRTY3JpcHRzID0gdGhpcy5fY3JlYXRlRXh0ZXJuYWxMb2coJ2V4dENvbnRlbnRTY3JpcHRzID4+Jyk7XG4gICAgICAgIHRoaXMud2VidmlldyA9IHRoaXMuX2NyZWF0ZUV4dGVybmFsTG9nKCd3ZWJ2aWV3ID4+Jyk7XG4gICAgICAgIHRoaXMuZGVza3RvcEluamVjdGVkID0gdGhpcy5fY3JlYXRlRXh0ZXJuYWxMb2coJ2Rlc2t0b3BJbmplY3RlZCA+PicpO1xuICAgICAgICB0aGlzLmV0aGVyZXVtID0gdGhpcy5fY3JlYXRlRXh0ZXJuYWxMb2coJ2V0aGVyZXVtID4+Jyk7XG4gICAgfVxuICAgIF9hdHRhY2hFeHRlcm5hbExvZ2dlcihsb2dnZXIpIHtcbiAgICAgICAgaWYgKGxvZ2dlcikge1xuICAgICAgICAgICAgdGhpcy5fZXh0ZXJuYWxMb2dnZXIgPSBsb2dnZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2NyZWF0ZURlYnVnSW5zdGFuY2UobmFtZSkge1xuICAgICAgICAvLyBub29wXG4gICAgfVxufVxuY2xhc3MgQXBwRGVidWdMb2dnZXIgZXh0ZW5kcyBGYWtlRGVidWdMb2dnZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9kZWJ1Z0luc3RhbmNlQ3JlYXRlZE1hcCA9IHt9O1xuICAgICAgICB2b2lkIGNyZWF0ZURlYnVnQXN5bmMoKS50aGVuKChkZWJ1ZykgPT4gKHRoaXMuX2RlYnVnID0gZGVidWcpKTtcbiAgICB9XG4gICAgX2NyZWF0ZURlYnVnSW5zdGFuY2UobmFtZSkge1xuICAgICAgICBpZiAodGhpcy5fZGVidWdJbnN0YW5jZUNyZWF0ZWRNYXBbbmFtZV0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kZWJ1Z0luc3RhbmNlQ3JlYXRlZE1hcFtuYW1lXSA9IHRydWU7XG4gICAgICAgIGlmIChuYW1lICYmIHRoaXMuX2RlYnVnICYmIHR5cGVvZiB0aGlzLl9kZWJ1ZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtY2FsbCxAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnRcbiAgICAgICAgICAgIGNvbnN0IF9kZWJ1Z0xvZyA9IHRoaXMuX2RlYnVnKG5hbWUpO1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgY29uc3QgX29yaWdpbkxvZyA9IHRoaXNbbmFtZV07XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50LEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtY2FsbCxAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnRcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFyZ3VtZW50XG4gICAgICAgICAgICAgICAgX2RlYnVnTG9nKC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgIGlmIChfb3JpZ2luTG9nICYmIHR5cGVvZiBfb3JpZ2luTG9nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFyZ3VtZW50XG4gICAgICAgICAgICAgICAgICAgIF9vcmlnaW5Mb2coLi4uYXJncyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIFRPRE8gbWVyZ2UgRmFrZURlYnVnTG9nZ2VyIGFuZCBBcHBEZWJ1Z0xvZ2dlciB0byBzaW5nbGUgY2xhc3NcbmNvbnN0IGZha2VEZWJ1Z0xvZ2dlciA9IG5ldyBGYWtlRGVidWdMb2dnZXIoKTtcbmNvbnN0IGFwcERlYnVnTG9nZ2VyID0gbmV3IEFwcERlYnVnTG9nZ2VyKCk7XG5leHBvcnQgeyBmYWtlRGVidWdMb2dnZXIsIGFwcERlYnVnTG9nZ2VyLCBmYWtlTG9nZ2VyLCBjb25zb2xlRXJyb3JJbkRldiB9O1xuIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGUgZ2l2ZW4gaW1hZ2UgVVJMIGV4aXN0c1xuICogQHBhcmFtIHVybCAtIHRoZSB1cmwgb2YgdGhlIGltYWdlXG4gKiBAcmV0dXJucyBXaGV0aGVyIHRoZSBpbWFnZSBleGlzdHMuXG4gKi9cbmZ1bmN0aW9uIGltZ0V4aXN0cyh1cmwpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgICAgICAgICBpbWcub25sb2FkID0gKCkgPT4gcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgIGltZy5vbmVycm9yID0gKCkgPT4gcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgICAgICBpbWcuc3JjID0gdXJsO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8qKlxuICogR2V0cyBzaXRlIG1ldGFkYXRhIGFuZCByZXR1cm5zIGl0XG4gKlxuICovXG5mdW5jdGlvbiBnZXRTaXRlTWV0YWRhdGEoKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IGdldFNpdGVOYW1lKHdpbmRvdyksXG4gICAgICAgICAgICBpY29uOiB5aWVsZCBnZXRTaXRlSWNvbih3aW5kb3cpLFxuICAgICAgICB9O1xuICAgIH0pO1xufVxuLyoqXG4gKiBFeHRyYWN0cyBhIG5hbWUgZm9yIHRoZSBzaXRlIGZyb20gdGhlIERPTVxuICovXG5mdW5jdGlvbiBnZXRTaXRlTmFtZSh3aW5kb3dPYmplY3QpIHtcbiAgICBjb25zdCB7IGRvY3VtZW50IH0gPSB3aW5kb3dPYmplY3Q7XG4gICAgY29uc3Qgc2l0ZU5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkID4gbWV0YVtwcm9wZXJ0eT1cIm9nOnNpdGVfbmFtZVwiXScpO1xuICAgIGlmIChzaXRlTmFtZSkge1xuICAgICAgICByZXR1cm4gc2l0ZU5hbWUuY29udGVudDtcbiAgICB9XG4gICAgY29uc3QgbWV0YVRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZCA+IG1ldGFbbmFtZT1cInRpdGxlXCJdJyk7XG4gICAgaWYgKG1ldGFUaXRsZSkge1xuICAgICAgICByZXR1cm4gbWV0YVRpdGxlLmNvbnRlbnQ7XG4gICAgfVxuICAgIGlmIChkb2N1bWVudC50aXRsZSAmJiBkb2N1bWVudC50aXRsZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC50aXRsZTtcbiAgICB9XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZTtcbn1cbi8qKlxuICogRXh0cmFjdHMgYW4gaWNvbiBmb3IgdGhlIHNpdGUgZnJvbSB0aGUgRE9NXG4gKiBAcmV0dXJucyBhbiBpY29uIFVSTFxuICovXG5mdW5jdGlvbiBnZXRTaXRlSWNvbih3aW5kb3dPYmplY3QpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCB7IGRvY3VtZW50IH0gPSB3aW5kb3dPYmplY3Q7XG4gICAgICAgIGNvbnN0IGljb25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaGVhZCA+IGxpbmtbcmVsfj1cImljb25cIl0nKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNvbnN0IGljb25zQXJyID0gaWNvbnM7XG4gICAgICAgIGZvciAoY29uc3QgaWNvbiBvZiBpY29uc0Fycikge1xuICAgICAgICAgICAgaWYgKGljb24gJiYgKHlpZWxkIGltZ0V4aXN0cyhpY29uLmhyZWYpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpY29uLmhyZWY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSk7XG59XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgZ2V0U2l0ZU1ldGFkYXRhLFxuICAgIGdldFNpdGVJY29uLFxuICAgIGdldFNpdGVOYW1lLFxuICAgIGltZ0V4aXN0cyxcbn07XG4iLCJjb25zdCB2ZXJzaW9uID0gJzAuMC43LWFscGhhLjAnO1xuY29uc3QgdmVyc2lvbkJ1aWxkID0gJzIwMjAtMDEwMS0xJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICB2ZXJzaW9uLFxuICAgIHZlcnNpb25CdWlsZCxcbn07XG4iLCJpbXBvcnQgc2FmZVN0cmluZ2lmeSBmcm9tICdmYXN0LXNhZmUtc3RyaW5naWZ5Jztcbi8qKlxuICogRXJyb3Igc3ViY2xhc3MgaW1wbGVtZW50aW5nIEpTT04gUlBDIDIuMCBlcnJvcnMgYW5kIFdlYjMgUlBDIGVycm9yc1xuICogcGVyIEVJUC0xNDc0LlxuICogUGVybWl0cyBhbnkgaW50ZWdlciBlcnJvciBjb2RlLlxuICovXG5leHBvcnQgY2xhc3MgV2ViM1JwY0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGNvZGUsIG1lc3NhZ2UsIGRhdGEpIHtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGNvZGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiY29kZVwiIG11c3QgYmUgYW4gaW50ZWdlci4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW1lc3NhZ2UgfHwgdHlwZW9mIG1lc3NhZ2UgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wibWVzc2FnZVwiIG11c3QgYmUgYSBub25lbXB0eSBzdHJpbmcuJyk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgIGlmIChkYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHBsYWluIG9iamVjdCB3aXRoIGFsbCBwdWJsaWMgY2xhc3MgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIGNvbnN0IHNlcmlhbGl6ZWQgPSB7XG4gICAgICAgICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICAgICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLmRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc2VyaWFsaXplZC5kYXRhID0gdGhpcy5kYXRhO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnN0YWNrKSB7XG4gICAgICAgICAgICBzZXJpYWxpemVkLnN0YWNrID0gdGhpcy5zdGFjaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VyaWFsaXplZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBzZXJpYWxpemVkIGVycm9yLCBvbWl0dGluZ1xuICAgICAqIGFueSBjaXJjdWxhciByZWZlcmVuY2VzLlxuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gc2FmZVN0cmluZ2lmeSh0aGlzLnNlcmlhbGl6ZSgpLCBzdHJpbmdpZnlSZXBsYWNlciwgMik7XG4gICAgfVxufVxuLyoqXG4gKiBFcnJvciBzdWJjbGFzcyBpbXBsZW1lbnRpbmcgV2ViMyBQcm92aWRlciBlcnJvcnMgcGVyIEVJUC0xMTkzLlxuICogUGVybWl0cyBpbnRlZ2VyIGVycm9yIGNvZGVzIGluIHRoZSBbIDEwMDAgPD0gNDk5OSBdIHJhbmdlLlxuICovXG5leHBvcnQgY2xhc3MgV2ViM1Byb3ZpZGVyRXJyb3IgZXh0ZW5kcyBXZWIzUnBjRXJyb3Ige1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbiBXZWIzIFByb3ZpZGVyIEpTT04tUlBDIGVycm9yLlxuICAgICAqIGBjb2RlYCBtdXN0IGJlIGFuIGludGVnZXIgaW4gdGhlIDEwMDAgPD0gNDk5OSByYW5nZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb2RlLCBtZXNzYWdlLCBkYXRhKSB7XG4gICAgICAgIGlmICghaXNWYWxpZFdlYjNQcm92aWRlckNvZGUoY29kZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignXCJjb2RlXCIgbXVzdCBiZSBhbiBpbnRlZ2VyIHN1Y2ggdGhhdDogMTAwMCA8PSBjb2RlIDw9IDQ5OTknKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihjb2RlLCBtZXNzYWdlLCBkYXRhKTtcbiAgICB9XG59XG4vLyBJbnRlcm5hbFxuZnVuY3Rpb24gaXNWYWxpZFdlYjNQcm92aWRlckNvZGUoY29kZSkge1xuICAgIHJldHVybiBOdW1iZXIuaXNJbnRlZ2VyKGNvZGUpICYmIGNvZGUgPj0gMTAwMCAmJiBjb2RlIDw9IDQ5OTk7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnlSZXBsYWNlcihfLCB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gJ1tDaXJjdWxhcl0nKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbiIsImV4cG9ydCBjb25zdCBlcnJvckNvZGVzID0ge1xuICAgIHJwYzoge1xuICAgICAgICBpbnZhbGlkSW5wdXQ6IC0zMjAwMCxcbiAgICAgICAgcmVzb3VyY2VOb3RGb3VuZDogLTMyMDAxLFxuICAgICAgICByZXNvdXJjZVVuYXZhaWxhYmxlOiAtMzIwMDIsXG4gICAgICAgIHRyYW5zYWN0aW9uUmVqZWN0ZWQ6IC0zMjAwMyxcbiAgICAgICAgbWV0aG9kTm90U3VwcG9ydGVkOiAtMzIwMDQsXG4gICAgICAgIGxpbWl0RXhjZWVkZWQ6IC0zMjAwNSxcbiAgICAgICAgcGFyc2U6IC0zMjcwMCxcbiAgICAgICAgaW52YWxpZFJlcXVlc3Q6IC0zMjYwMCxcbiAgICAgICAgbWV0aG9kTm90Rm91bmQ6IC0zMjYwMSxcbiAgICAgICAgaW52YWxpZFBhcmFtczogLTMyNjAyLFxuICAgICAgICBpbnRlcm5hbDogLTMyNjAzLFxuICAgIH0sXG4gICAgcHJvdmlkZXI6IHtcbiAgICAgICAgdXNlclJlamVjdGVkUmVxdWVzdDogNDAwMSxcbiAgICAgICAgdW5hdXRob3JpemVkOiA0MTAwLFxuICAgICAgICB1bnN1cHBvcnRlZE1ldGhvZDogNDIwMCxcbiAgICAgICAgZGlzY29ubmVjdGVkOiA0OTAwLFxuICAgICAgICBjaGFpbkRpc2Nvbm5lY3RlZDogNDkwMSxcbiAgICAgICAgcmVxdWVzdFRpbWVvdXQ6IDQ1MDAsXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgZXJyb3JWYWx1ZXMgPSB7XG4gICAgJy0zMjcwMCc6IHtcbiAgICAgICAgc3RhbmRhcmQ6ICdKU09OIFJQQyAyLjAnLFxuICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBKU09OIHdhcyByZWNlaXZlZCBieSB0aGUgc2VydmVyLiBBbiBlcnJvciBvY2N1cnJlZCBvbiB0aGUgc2VydmVyIHdoaWxlIHBhcnNpbmcgdGhlIEpTT04gdGV4dC4nLFxuICAgIH0sXG4gICAgJy0zMjYwMCc6IHtcbiAgICAgICAgc3RhbmRhcmQ6ICdKU09OIFJQQyAyLjAnLFxuICAgICAgICBtZXNzYWdlOiAnVGhlIEpTT04gc2VudCBpcyBub3QgYSB2YWxpZCBSZXF1ZXN0IG9iamVjdC4nLFxuICAgIH0sXG4gICAgJy0zMjYwMSc6IHtcbiAgICAgICAgc3RhbmRhcmQ6ICdKU09OIFJQQyAyLjAnLFxuICAgICAgICBtZXNzYWdlOiAnVGhlIG1ldGhvZCBkb2VzIG5vdCBleGlzdCAvIGlzIG5vdCBhdmFpbGFibGUuJyxcbiAgICB9LFxuICAgICctMzI2MDInOiB7XG4gICAgICAgIHN0YW5kYXJkOiAnSlNPTiBSUEMgMi4wJyxcbiAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgbWV0aG9kIHBhcmFtZXRlcihzKS4nLFxuICAgIH0sXG4gICAgJy0zMjYwMyc6IHtcbiAgICAgICAgc3RhbmRhcmQ6ICdKU09OIFJQQyAyLjAnLFxuICAgICAgICBtZXNzYWdlOiAnSW50ZXJuYWwgSlNPTi1SUEMgZXJyb3IuJyxcbiAgICB9LFxuICAgICctMzIwMDAnOiB7XG4gICAgICAgIHN0YW5kYXJkOiAnRUlQLTE0NzQnLFxuICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBpbnB1dC4nLFxuICAgIH0sXG4gICAgJy0zMjAwMSc6IHtcbiAgICAgICAgc3RhbmRhcmQ6ICdFSVAtMTQ3NCcsXG4gICAgICAgIG1lc3NhZ2U6ICdSZXNvdXJjZSBub3QgZm91bmQuJyxcbiAgICB9LFxuICAgICctMzIwMDInOiB7XG4gICAgICAgIHN0YW5kYXJkOiAnRUlQLTE0NzQnLFxuICAgICAgICBtZXNzYWdlOiAnUmVzb3VyY2UgdW5hdmFpbGFibGUuJyxcbiAgICB9LFxuICAgICctMzIwMDMnOiB7XG4gICAgICAgIHN0YW5kYXJkOiAnRUlQLTE0NzQnLFxuICAgICAgICBtZXNzYWdlOiAnVHJhbnNhY3Rpb24gcmVqZWN0ZWQuJyxcbiAgICB9LFxuICAgICctMzIwMDQnOiB7XG4gICAgICAgIHN0YW5kYXJkOiAnRUlQLTE0NzQnLFxuICAgICAgICBtZXNzYWdlOiAnTWV0aG9kIG5vdCBzdXBwb3J0ZWQuJyxcbiAgICB9LFxuICAgICctMzIwMDUnOiB7XG4gICAgICAgIHN0YW5kYXJkOiAnRUlQLTE0NzQnLFxuICAgICAgICBtZXNzYWdlOiAnUmVxdWVzdCBsaW1pdCBleGNlZWRlZC4nLFxuICAgIH0sXG4gICAgJzQwMDEnOiB7XG4gICAgICAgIHN0YW5kYXJkOiAnRUlQLTExOTMnLFxuICAgICAgICBtZXNzYWdlOiAnVXNlciByZWplY3RlZCB0aGUgcmVxdWVzdC4nLFxuICAgIH0sXG4gICAgJzQxMDAnOiB7XG4gICAgICAgIHN0YW5kYXJkOiAnRUlQLTExOTMnLFxuICAgICAgICBtZXNzYWdlOiAnVGhlIHJlcXVlc3RlZCBhY2NvdW50IGFuZC9vciBtZXRob2QgaGFzIG5vdCBiZWVuIGF1dGhvcml6ZWQgYnkgdGhlIHVzZXIuJyxcbiAgICB9LFxuICAgICc0MjAwJzoge1xuICAgICAgICBzdGFuZGFyZDogJ0VJUC0xMTkzJyxcbiAgICAgICAgbWVzc2FnZTogJ1RoZSByZXF1ZXN0ZWQgbWV0aG9kIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBXZWIzIHByb3ZpZGVyLicsXG4gICAgfSxcbiAgICAnNDkwMCc6IHtcbiAgICAgICAgc3RhbmRhcmQ6ICdFSVAtMTE5MycsXG4gICAgICAgIG1lc3NhZ2U6ICdUaGUgcHJvdmlkZXIgaXMgZGlzY29ubmVjdGVkIGZyb20gYWxsIGNoYWlucy4nLFxuICAgIH0sXG4gICAgJzQ5MDEnOiB7XG4gICAgICAgIHN0YW5kYXJkOiAnRUlQLTExOTMnLFxuICAgICAgICBtZXNzYWdlOiAnVGhlIHByb3ZpZGVyIGlzIGRpc2Nvbm5lY3RlZCBmcm9tIHRoZSBzcGVjaWZpZWQgY2hhaW4uJyxcbiAgICB9LFxuICAgICc0NTAwJzoge1xuICAgICAgICBzdGFuZGFyZDogJycsXG4gICAgICAgIG1lc3NhZ2U6ICdUaGUgcmVxdWVzdCBieSB0aGlzIFdlYjMgcHJvdmlkZXIgaXMgdGltZW91dC4nLFxuICAgIH0sXG59O1xuLy8gaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0xNDc0I2Vycm9yLWNvZGVzXG4vLyBodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTExOTMjcHJvdmlkZXItZXJyb3JzXG4iLCJpbXBvcnQgeyBXZWIzUnBjRXJyb3IsIFdlYjNQcm92aWRlckVycm9yIH0gZnJvbSAnLi9jbGFzc2VzJztcbmltcG9ydCB7IGdldE1lc3NhZ2VGcm9tQ29kZSB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgZXJyb3JDb2RlcyB9IGZyb20gJy4vZXJyb3ItY29uc3RhbnRzJztcbmV4cG9ydCBjb25zdCB3ZWIzRXJyb3JzID0ge1xuICAgIHJwYzoge1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGEgSlNPTiBSUEMgMi4wIFBhcnNlICgtMzI3MDApIGVycm9yLlxuICAgICAgICAgKi9cbiAgICAgICAgcGFyc2U6IChhcmcpID0+IGdldFdlYjNKc29uUnBjRXJyb3IoZXJyb3JDb2Rlcy5ycGMucGFyc2UsIGFyZyksXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgYSBKU09OIFJQQyAyLjAgSW52YWxpZCBSZXF1ZXN0ICgtMzI2MDApIGVycm9yLlxuICAgICAgICAgKi9cbiAgICAgICAgaW52YWxpZFJlcXVlc3Q6IChhcmcpID0+IGdldFdlYjNKc29uUnBjRXJyb3IoZXJyb3JDb2Rlcy5ycGMuaW52YWxpZFJlcXVlc3QsIGFyZyksXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgYSBKU09OIFJQQyAyLjAgSW52YWxpZCBQYXJhbXMgKC0zMjYwMikgZXJyb3IuXG4gICAgICAgICAqL1xuICAgICAgICBpbnZhbGlkUGFyYW1zOiAoYXJnKSA9PiBnZXRXZWIzSnNvblJwY0Vycm9yKGVycm9yQ29kZXMucnBjLmludmFsaWRQYXJhbXMsIGFyZyksXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgYSBKU09OIFJQQyAyLjAgTWV0aG9kIE5vdCBGb3VuZCAoLTMyNjAxKSBlcnJvci5cbiAgICAgICAgICovXG4gICAgICAgIG1ldGhvZE5vdEZvdW5kOiAoYXJnKSA9PiBnZXRXZWIzSnNvblJwY0Vycm9yKGVycm9yQ29kZXMucnBjLm1ldGhvZE5vdEZvdW5kLCBhcmcpLFxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGEgSlNPTiBSUEMgMi4wIEludGVybmFsICgtMzI2MDMpIGVycm9yLlxuICAgICAgICAgKi9cbiAgICAgICAgaW50ZXJuYWw6IChhcmcpID0+IGdldFdlYjNKc29uUnBjRXJyb3IoZXJyb3JDb2Rlcy5ycGMuaW50ZXJuYWwsIGFyZyksXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgYSBKU09OIFJQQyAyLjAgU2VydmVyIGVycm9yLlxuICAgICAgICAgKiBQZXJtaXRzIGludGVnZXIgZXJyb3IgY29kZXMgaW4gdGhlIFsgLTMyMDk5IDw9IC0zMjAwNSBdIHJhbmdlLlxuICAgICAgICAgKiBDb2RlcyAtMzIwMDAgdGhyb3VnaCAtMzIwMDQgYXJlIHJlc2VydmVkIGJ5IEVJUC0xNDc0LlxuICAgICAgICAgKi9cbiAgICAgICAgc2VydmVyOiAob3B0cykgPT4ge1xuICAgICAgICAgICAgaWYgKCFvcHRzIHx8IHR5cGVvZiBvcHRzICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG9wdHMpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXZWIzIFJQQyBTZXJ2ZXIgZXJyb3JzIG11c3QgcHJvdmlkZSBzaW5nbGUgb2JqZWN0IGFyZ3VtZW50LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyBjb2RlIH0gPSBvcHRzO1xuICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGNvZGUpIHx8IGNvZGUgPiAtMzIwMDUgfHwgY29kZSA8IC0zMjA5OSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignXCJjb2RlXCIgbXVzdCBiZSBhbiBpbnRlZ2VyIHN1Y2ggdGhhdDogLTMyMDk5IDw9IGNvZGUgPD0gLTMyMDA1Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZ2V0V2ViM0pzb25ScGNFcnJvcihjb2RlLCBvcHRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBhbiBXZWIzIEpTT04gUlBDIEludmFsaWQgSW5wdXQgKC0zMjAwMCkgZXJyb3IuXG4gICAgICAgICAqL1xuICAgICAgICBpbnZhbGlkSW5wdXQ6IChhcmcpID0+IGdldFdlYjNKc29uUnBjRXJyb3IoZXJyb3JDb2Rlcy5ycGMuaW52YWxpZElucHV0LCBhcmcpLFxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGFuIFdlYjMgSlNPTiBSUEMgUmVzb3VyY2UgTm90IEZvdW5kICgtMzIwMDEpIGVycm9yLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVzb3VyY2VOb3RGb3VuZDogKGFyZykgPT4gZ2V0V2ViM0pzb25ScGNFcnJvcihlcnJvckNvZGVzLnJwYy5yZXNvdXJjZU5vdEZvdW5kLCBhcmcpLFxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGFuIFdlYjMgSlNPTiBSUEMgUmVzb3VyY2UgVW5hdmFpbGFibGUgKC0zMjAwMikgZXJyb3IuXG4gICAgICAgICAqL1xuICAgICAgICByZXNvdXJjZVVuYXZhaWxhYmxlOiAoYXJnKSA9PiBnZXRXZWIzSnNvblJwY0Vycm9yKGVycm9yQ29kZXMucnBjLnJlc291cmNlVW5hdmFpbGFibGUsIGFyZyksXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgYW4gV2ViMyBKU09OIFJQQyBUcmFuc2FjdGlvbiBSZWplY3RlZCAoLTMyMDAzKSBlcnJvci5cbiAgICAgICAgICovXG4gICAgICAgIHRyYW5zYWN0aW9uUmVqZWN0ZWQ6IChhcmcpID0+IGdldFdlYjNKc29uUnBjRXJyb3IoZXJyb3JDb2Rlcy5ycGMudHJhbnNhY3Rpb25SZWplY3RlZCwgYXJnKSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBhbiBXZWIzIEpTT04gUlBDIE1ldGhvZCBOb3QgU3VwcG9ydGVkICgtMzIwMDQpIGVycm9yLlxuICAgICAgICAgKi9cbiAgICAgICAgbWV0aG9kTm90U3VwcG9ydGVkOiAoYXJnKSA9PiBnZXRXZWIzSnNvblJwY0Vycm9yKGVycm9yQ29kZXMucnBjLm1ldGhvZE5vdFN1cHBvcnRlZCwgYXJnKSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBhbiBXZWIzIEpTT04gUlBDIExpbWl0IEV4Y2VlZGVkICgtMzIwMDUpIGVycm9yLlxuICAgICAgICAgKi9cbiAgICAgICAgbGltaXRFeGNlZWRlZDogKGFyZykgPT4gZ2V0V2ViM0pzb25ScGNFcnJvcihlcnJvckNvZGVzLnJwYy5saW1pdEV4Y2VlZGVkLCBhcmcpLFxuICAgIH0sXG4gICAgcHJvdmlkZXI6IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBhbiBXZWIzIFByb3ZpZGVyIFVzZXIgUmVqZWN0ZWQgUmVxdWVzdCAoNDAwMSkgZXJyb3IuXG4gICAgICAgICAqL1xuICAgICAgICB1c2VyUmVqZWN0ZWRSZXF1ZXN0OiAoYXJnKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0V2ViM1Byb3ZpZGVyRXJyb3IoZXJyb3JDb2Rlcy5wcm92aWRlci51c2VyUmVqZWN0ZWRSZXF1ZXN0LCBhcmcpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGFuIFdlYjMgUHJvdmlkZXIgVW5hdXRob3JpemVkICg0MTAwKSBlcnJvci5cbiAgICAgICAgICovXG4gICAgICAgIHVuYXV0aG9yaXplZDogKGFyZykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGdldFdlYjNQcm92aWRlckVycm9yKGVycm9yQ29kZXMucHJvdmlkZXIudW5hdXRob3JpemVkLCBhcmcpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGFuIFdlYjMgUHJvdmlkZXIgVW5zdXBwb3J0ZWQgTWV0aG9kICg0MjAwKSBlcnJvci5cbiAgICAgICAgICovXG4gICAgICAgIHVuc3VwcG9ydGVkTWV0aG9kOiAoYXJnKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0V2ViM1Byb3ZpZGVyRXJyb3IoZXJyb3JDb2Rlcy5wcm92aWRlci51bnN1cHBvcnRlZE1ldGhvZCwgYXJnKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBhbiBXZWIzIFByb3ZpZGVyIE5vdCBDb25uZWN0ZWQgKDQ5MDApIGVycm9yLlxuICAgICAgICAgKi9cbiAgICAgICAgZGlzY29ubmVjdGVkOiAoYXJnKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0V2ViM1Byb3ZpZGVyRXJyb3IoZXJyb3JDb2Rlcy5wcm92aWRlci5kaXNjb25uZWN0ZWQsIGFyZyk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgYW4gV2ViMyBQcm92aWRlciBDaGFpbiBOb3QgQ29ubmVjdGVkICg0OTAxKSBlcnJvci5cbiAgICAgICAgICovXG4gICAgICAgIGNoYWluRGlzY29ubmVjdGVkOiAoYXJnKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0V2ViM1Byb3ZpZGVyRXJyb3IoZXJyb3JDb2Rlcy5wcm92aWRlci5jaGFpbkRpc2Nvbm5lY3RlZCwgYXJnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVxdWVzdFRpbWVvdXQ6IChhcmcpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBnZXRXZWIzUHJvdmlkZXJFcnJvcihlcnJvckNvZGVzLnByb3ZpZGVyLnJlcXVlc3RUaW1lb3V0LCBhcmcpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGEgY3VzdG9tIFdlYjMgUHJvdmlkZXIgZXJyb3IuXG4gICAgICAgICAqL1xuICAgICAgICBjdXN0b206IChvcHRzKSA9PiB7XG4gICAgICAgICAgICBpZiAoIW9wdHMgfHwgdHlwZW9mIG9wdHMgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkob3B0cykpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dlYjMgUHJvdmlkZXIgY3VzdG9tIGVycm9ycyBtdXN0IHByb3ZpZGUgc2luZ2xlIG9iamVjdCBhcmd1bWVudC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgY29kZSwgbWVzc2FnZSwgZGF0YSB9ID0gb3B0cztcbiAgICAgICAgICAgIGlmICghbWVzc2FnZSB8fCB0eXBlb2YgbWVzc2FnZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wibWVzc2FnZVwiIG11c3QgYmUgYSBub25lbXB0eSBzdHJpbmcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgV2ViM1Byb3ZpZGVyRXJyb3IoY29kZSwgbWVzc2FnZSwgZGF0YSk7XG4gICAgICAgIH0sXG4gICAgfSxcbn07XG4vLyBJbnRlcm5hbFxuZnVuY3Rpb24gZ2V0V2ViM0pzb25ScGNFcnJvcihjb2RlLCBhcmcpIHtcbiAgICBjb25zdCBbbWVzc2FnZSwgZGF0YV0gPSBwYXJzZU9wdHMoYXJnKTtcbiAgICByZXR1cm4gbmV3IFdlYjNScGNFcnJvcihjb2RlLCBtZXNzYWdlIHx8IGdldE1lc3NhZ2VGcm9tQ29kZShjb2RlKSwgZGF0YSk7XG59XG5mdW5jdGlvbiBnZXRXZWIzUHJvdmlkZXJFcnJvcihjb2RlLCBhcmcpIHtcbiAgICBjb25zdCBbbWVzc2FnZSwgZGF0YV0gPSBwYXJzZU9wdHMoYXJnKTtcbiAgICByZXR1cm4gbmV3IFdlYjNQcm92aWRlckVycm9yKGNvZGUsIG1lc3NhZ2UgfHwgZ2V0TWVzc2FnZUZyb21Db2RlKGNvZGUpLCBkYXRhKTtcbn1cbmZ1bmN0aW9uIHBhcnNlT3B0cyhhcmcpIHtcbiAgICBpZiAoYXJnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIFthcmddO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgbWVzc2FnZSwgZGF0YSB9ID0gYXJnO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UgJiYgdHlwZW9mIG1lc3NhZ2UgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHNwZWNpZnkgc3RyaW5nIG1lc3NhZ2UuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW21lc3NhZ2UgfHwgdW5kZWZpbmVkLCBkYXRhXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gW107XG59XG4iLCJpbXBvcnQgeyBXZWIzUnBjRXJyb3IsIFdlYjNQcm92aWRlckVycm9yIH0gZnJvbSAnLi9jbGFzc2VzJztcbmltcG9ydCB7IHNlcmlhbGl6ZUVycm9yLCBnZXRNZXNzYWdlRnJvbUNvZGUsIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyB3ZWIzRXJyb3JzIH0gZnJvbSAnLi9lcnJvcnMnO1xuaW1wb3J0IHsgZXJyb3JDb2RlcyB9IGZyb20gJy4vZXJyb3ItY29uc3RhbnRzJztcbmV4cG9ydCB7IGVycm9yQ29kZXMsIHdlYjNFcnJvcnMsIFdlYjNScGNFcnJvciwgV2ViM1Byb3ZpZGVyRXJyb3IsIHNlcmlhbGl6ZUVycm9yLCBnZXRNZXNzYWdlRnJvbUNvZGUsIH07XG4iLCJpbXBvcnQgeyBlcnJvckNvZGVzLCBlcnJvclZhbHVlcyB9IGZyb20gJy4vZXJyb3ItY29uc3RhbnRzJztcbmltcG9ydCB7IFdlYjNScGNFcnJvciB9IGZyb20gJy4vY2xhc3Nlcyc7XG5jb25zdCBGQUxMQkFDS19FUlJPUl9DT0RFID0gZXJyb3JDb2Rlcy5ycGMuaW50ZXJuYWw7XG5jb25zdCBGQUxMQkFDS19NRVNTQUdFID0gJ1Vuc3BlY2lmaWVkIGVycm9yIG1lc3NhZ2UuIFRoaXMgaXMgYSBidWcsIHBsZWFzZSByZXBvcnQgaXQuJztcbmNvbnN0IEZBTExCQUNLX0VSUk9SID0ge1xuICAgIGNvZGU6IEZBTExCQUNLX0VSUk9SX0NPREUsXG4gICAgbWVzc2FnZTogZ2V0TWVzc2FnZUZyb21Db2RlKEZBTExCQUNLX0VSUk9SX0NPREUpLFxufTtcbmV4cG9ydCBjb25zdCBKU09OX1JQQ19TRVJWRVJfRVJST1JfTUVTU0FHRSA9ICdVbnNwZWNpZmllZCBzZXJ2ZXIgZXJyb3IuJztcbi8qKlxuICogR2V0cyB0aGUgbWVzc2FnZSBmb3IgYSBnaXZlbiBjb2RlLCBvciBhIGZhbGxiYWNrIG1lc3NhZ2UgaWYgdGhlIGNvZGUgaGFzXG4gKiBubyBjb3JyZXNwb25kaW5nIG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRNZXNzYWdlRnJvbUNvZGUoY29kZSwgZmFsbGJhY2tNZXNzYWdlID0gRkFMTEJBQ0tfTUVTU0FHRSkge1xuICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKGNvZGUpKSB7XG4gICAgICAgIGNvbnN0IGNvZGVTdHJpbmcgPSBjb2RlLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmIChoYXNLZXkoZXJyb3JWYWx1ZXMsIGNvZGVTdHJpbmcpKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3JWYWx1ZXNbY29kZVN0cmluZ10ubWVzc2FnZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNKc29uUnBjU2VydmVyRXJyb3IoY29kZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBKU09OX1JQQ19TRVJWRVJfRVJST1JfTUVTU0FHRTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsbGJhY2tNZXNzYWdlO1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGdpdmVuIGNvZGUgaXMgdmFsaWQuXG4gKiBBIGNvZGUgaXMgb25seSB2YWxpZCBpZiBpdCBoYXMgYSBtZXNzYWdlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZENvZGUoY29kZSkge1xuICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihjb2RlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGNvZGVTdHJpbmcgPSBjb2RlLnRvU3RyaW5nKCk7XG4gICAgaWYgKGVycm9yVmFsdWVzW2NvZGVTdHJpbmddKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoaXNKc29uUnBjU2VydmVyRXJyb3IoY29kZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gZXJyb3IgdG8gYW4gV2ViMyBKU09OIFJQQy1jb21wYXRpYmxlIGVycm9yIG9iamVjdC5cbiAqIE1lcmVseSBjb3BpZXMgdGhlIGdpdmVuIGVycm9yJ3MgdmFsdWVzIGlmIGl0IGlzIGFscmVhZHkgY29tcGF0aWJsZS5cbiAqIElmIHRoZSBnaXZlbiBlcnJvciBpcyBub3QgZnVsbHkgY29tcGF0aWJsZSwgaXQgd2lsbCBiZSBwcmVzZXJ2ZWQgb24gdGhlXG4gKiByZXR1cm5lZCBvYmplY3QncyBkYXRhLm9yaWdpbmFsRXJyb3IgcHJvcGVydHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVFcnJvcihlcnJvciwgeyBmYWxsYmFja0Vycm9yID0gRkFMTEJBQ0tfRVJST1IsIHNob3VsZEluY2x1ZGVTdGFjayA9IGZhbHNlLCB9ID0ge30pIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGlmICghZmFsbGJhY2tFcnJvciB8fFxuICAgICAgICAhTnVtYmVyLmlzSW50ZWdlcihmYWxsYmFja0Vycm9yLmNvZGUpIHx8XG4gICAgICAgIHR5cGVvZiBmYWxsYmFja0Vycm9yLm1lc3NhZ2UgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwcm92aWRlIGZhbGxiYWNrIGVycm9yIHdpdGggaW50ZWdlciBudW1iZXIgY29kZSBhbmQgc3RyaW5nIG1lc3NhZ2UuJyk7XG4gICAgfVxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFdlYjNScGNFcnJvcikge1xuICAgICAgICByZXR1cm4gZXJyb3Iuc2VyaWFsaXplKCk7XG4gICAgfVxuICAgIGNvbnN0IHNlcmlhbGl6ZWQgPSB7fTtcbiAgICBpZiAoZXJyb3IgJiZcbiAgICAgICAgdHlwZW9mIGVycm9yID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAhQXJyYXkuaXNBcnJheShlcnJvcikgJiZcbiAgICAgICAgaGFzS2V5KGVycm9yLCAnY29kZScpICYmXG4gICAgICAgIGlzVmFsaWRDb2RlKGVycm9yLmNvZGUpKSB7XG4gICAgICAgIGNvbnN0IF9lcnJvciA9IGVycm9yO1xuICAgICAgICBzZXJpYWxpemVkLmNvZGUgPSBfZXJyb3IuY29kZTtcbiAgICAgICAgaWYgKF9lcnJvci5tZXNzYWdlICYmIHR5cGVvZiBfZXJyb3IubWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHNlcmlhbGl6ZWQubWVzc2FnZSA9IF9lcnJvci5tZXNzYWdlO1xuICAgICAgICAgICAgaWYgKGhhc0tleShfZXJyb3IsICdkYXRhJykpIHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkLmRhdGEgPSBfZXJyb3IuZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNlcmlhbGl6ZWQubWVzc2FnZSA9IGdldE1lc3NhZ2VGcm9tQ29kZShzZXJpYWxpemVkLmNvZGUpO1xuICAgICAgICAgICAgc2VyaWFsaXplZC5kYXRhID0geyBvcmlnaW5hbEVycm9yOiBhc3NpZ25PcmlnaW5hbEVycm9yKGVycm9yKSB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzZXJpYWxpemVkLmNvZGUgPSBmYWxsYmFja0Vycm9yLmNvZGU7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSAoX2EgPSBlcnJvcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1lc3NhZ2U7XG4gICAgICAgIHNlcmlhbGl6ZWQubWVzc2FnZSA9IChtZXNzYWdlICYmIHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgPyBtZXNzYWdlXG4gICAgICAgICAgICA6IGZhbGxiYWNrRXJyb3IubWVzc2FnZSk7XG4gICAgICAgIHNlcmlhbGl6ZWQuZGF0YSA9IHsgb3JpZ2luYWxFcnJvcjogYXNzaWduT3JpZ2luYWxFcnJvcihlcnJvcikgfTtcbiAgICB9XG4gICAgY29uc3Qgc3RhY2sgPSAoX2IgPSBlcnJvcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnN0YWNrO1xuICAgIGlmIChzaG91bGRJbmNsdWRlU3RhY2sgJiYgZXJyb3IgJiYgc3RhY2sgJiYgdHlwZW9mIHN0YWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICBzZXJpYWxpemVkLnN0YWNrID0gc3RhY2s7XG4gICAgfVxuICAgIHJldHVybiBzZXJpYWxpemVkO1xufVxuLy8gSW50ZXJuYWxcbmZ1bmN0aW9uIGlzSnNvblJwY1NlcnZlckVycm9yKGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSA+PSAtMzIwOTkgJiYgY29kZSA8PSAtMzIwMDA7XG59XG5mdW5jdGlvbiBhc3NpZ25PcmlnaW5hbEVycm9yKGVycm9yKSB7XG4gICAgaWYgKGVycm9yICYmIHR5cGVvZiBlcnJvciA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoZXJyb3IpKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBlcnJvcik7XG4gICAgfVxuICAgIHJldHVybiBlcnJvcjtcbn1cbmZ1bmN0aW9uIGhhc0tleShvYmosIGtleSkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xufVxuIiwiaW1wb3J0IHsgSnNCcmlkZ2VCYXNlIH0gZnJvbSAnQG9uZWtleWZlL2Nyb3NzLWlucGFnZS1wcm92aWRlci1jb3JlJztcbmNsYXNzIEpzQnJpZGdlTmF0aXZlSW5qZWN0ZWQgZXh0ZW5kcyBKc0JyaWRnZUJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnNlbmRBc1N0cmluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuaXNJbmplY3RlZCA9IHRydWU7XG4gICAgfVxuICAgIHNlbmRQYXlsb2FkKHBheWxvYWQpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5SZWFjdE5hdGl2ZVdlYlZpZXcpIHtcbiAgICAgICAgICAgIHdpbmRvdy5SZWFjdE5hdGl2ZVdlYlZpZXcucG9zdE1lc3NhZ2UocGF5bG9hZCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgeyBKc0JyaWRnZU5hdGl2ZUluamVjdGVkIH07XG4iLCJleHBvcnQgKiBmcm9tICcuL0pzQnJpZGdlTmF0aXZlSW5qZWN0ZWQnO1xuIiwiZXhwb3J0ICogZnJvbSAnLi9pbmplY3RXZWIzUHJvdmlkZXInO1xuIiwiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnQgKi9cbmltcG9ydCB7IFByb3ZpZGVyQmFzZSB9IGZyb20gJ0BvbmVrZXlmZS9jcm9zcy1pbnBhZ2UtcHJvdmlkZXItY29yZSc7XG5pbXBvcnQgeyBJSW5qZWN0ZWRQcm92aWRlck5hbWVzIH0gZnJvbSAnQG9uZWtleWZlL2Nyb3NzLWlucGFnZS1wcm92aWRlci10eXBlcyc7XG5jbGFzcyBQcm92aWRlclByaXZhdGUgZXh0ZW5kcyBQcm92aWRlckJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnByb3ZpZGVyTmFtZSA9IElJbmplY3RlZFByb3ZpZGVyTmFtZXMuJHByaXZhdGU7XG4gICAgfVxufVxuY2xhc3MgUHJvdmlkZXJFdGhlcmV1bSBleHRlbmRzIFByb3ZpZGVyQmFzZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMucHJvdmlkZXJOYW1lID0gSUluamVjdGVkUHJvdmlkZXJOYW1lcy5ldGhlcmV1bTtcbiAgICB9XG59XG5mdW5jdGlvbiBpbmplY3RXZWIzUHJvdmlkZXIoKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBpZiAoISgoX2EgPSB3aW5kb3cgPT09IG51bGwgfHwgd2luZG93ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB3aW5kb3cuJG9uZWtleSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmpzQnJpZGdlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09uZUtleSBqc0JyaWRnZSBub3QgZm91bmQuJyk7XG4gICAgfVxuICAgIGNvbnN0IGJyaWRnZSA9IChfYiA9IHdpbmRvdyA9PT0gbnVsbCB8fCB3aW5kb3cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHdpbmRvdy4kb25la2V5KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuanNCcmlkZ2U7XG4gICAgY29uc3QgZXRoZXJldW0gPSBuZXcgUHJvdmlkZXJFdGhlcmV1bSh7XG4gICAgICAgIGJyaWRnZSxcbiAgICB9KTtcbiAgICBjb25zdCAkcHJpdmF0ZSA9IG5ldyBQcm92aWRlclByaXZhdGUoe1xuICAgICAgICBicmlkZ2UsXG4gICAgfSk7XG4gICAgLy8gcHJvdmlkZXJIdWJcbiAgICBjb25zdCAkb25la2V5ID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB3aW5kb3cuJG9uZWtleSksIHsganNCcmlkZ2U6IGJyaWRnZSwgZXRoZXJldW0sXG4gICAgICAgICRwcml2YXRlLCBzb2xhbmE6IG51bGwsIGNvbmZsdXg6IG51bGwsIHNvbGxldDogbnVsbCB9KTtcbiAgICB3aW5kb3cuJG9uZWtleSA9ICRvbmVrZXk7XG4gICAgLy8gVE9ETyBjb25mbGljdCB3aXRoIE1ldGFNYXNrXG4gICAgd2luZG93LmV0aGVyZXVtID0gZXRoZXJldW07XG4gICAgLy8gd2luZG93LndlYjMgPSBldGhlcmV1bTsgLy8gZGFwcCBjcmVhdGUgd2ViMy5qcyBvciBldGhlcnMuanMgaXRzZWxmXG4gICAgLy8gVE9ETyB1c2UgaW5pdGlhbGl6ZUlucGFnZVByb3ZpZGVyLnRzXG4gICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdldGhlcmV1bSNpbml0aWFsaXplZCcpKTtcbiAgICByZXR1cm4gJG9uZWtleTtcbn1cbmV4cG9ydCB7IGluamVjdFdlYjNQcm92aWRlciB9O1xuIiwiZXhwb3J0IHZhciBJSnNCcmlkZ2VNZXNzYWdlVHlwZXM7XG4oZnVuY3Rpb24gKElKc0JyaWRnZU1lc3NhZ2VUeXBlcykge1xuICAgIElKc0JyaWRnZU1lc3NhZ2VUeXBlc1tcIlJFU1BPTlNFXCJdID0gXCJSRVNQT05TRVwiO1xuICAgIElKc0JyaWRnZU1lc3NhZ2VUeXBlc1tcIlJFUVVFU1RcIl0gPSBcIlJFUVVFU1RcIjtcbn0pKElKc0JyaWRnZU1lc3NhZ2VUeXBlcyB8fCAoSUpzQnJpZGdlTWVzc2FnZVR5cGVzID0ge30pKTtcbmV4cG9ydCB2YXIgSUluamVjdGVkUHJvdmlkZXJOYW1lcztcbihmdW5jdGlvbiAoSUluamVjdGVkUHJvdmlkZXJOYW1lcykge1xuICAgIElJbmplY3RlZFByb3ZpZGVyTmFtZXNbXCJldGhlcmV1bVwiXSA9IFwiZXRoZXJldW1cIjtcbiAgICBJSW5qZWN0ZWRQcm92aWRlck5hbWVzW1wiY29uZmx1eFwiXSA9IFwiY29uZmx1eFwiO1xuICAgIElJbmplY3RlZFByb3ZpZGVyTmFtZXNbXCJzb2xhbmFcIl0gPSBcInNvbGFuYVwiO1xuICAgIElJbmplY3RlZFByb3ZpZGVyTmFtZXNbXCJzb2xsZXRcIl0gPSBcInNvbGxldFwiO1xuICAgIElJbmplY3RlZFByb3ZpZGVyTmFtZXNbXCJuZWFyXCJdID0gXCJuZWFyXCI7XG4gICAgSUluamVjdGVkUHJvdmlkZXJOYW1lc1tcIiRwcml2YXRlXCJdID0gXCIkcHJpdmF0ZVwiO1xufSkoSUluamVjdGVkUHJvdmlkZXJOYW1lcyB8fCAoSUluamVjdGVkUHJvdmlkZXJOYW1lcyA9IHt9KSk7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImltcG9ydCB7IEpzQnJpZGdlTmF0aXZlSW5qZWN0ZWQgfSBmcm9tICdAb25la2V5ZmUvbmF0aXZlLWJyaWRnZS1pbmplY3RlZCc7XG5pbXBvcnQgeyBpbmplY3RXZWIzUHJvdmlkZXIgfSBmcm9tICdAb25la2V5ZmUvaW5wYWdlLXByb3ZpZGVycy1odWInO1xuaW1wb3J0IHsgaW5qZWN0ZWRQcm92aWRlclJlY2VpdmVIYW5kbGVyLCBpbmplY3RKc0JyaWRnZSwgfSBmcm9tICdAb25la2V5ZmUvY3Jvc3MtaW5wYWdlLXByb3ZpZGVyLWNvcmUnO1xuY29uc3QgYnJpZGdlID0gKCkgPT4gbmV3IEpzQnJpZGdlTmF0aXZlSW5qZWN0ZWQoe1xuICAgIHJlY2VpdmVIYW5kbGVyOiBpbmplY3RlZFByb3ZpZGVyUmVjZWl2ZUhhbmRsZXIsXG59KTtcbmluamVjdEpzQnJpZGdlKGJyaWRnZSk7XG5pbmplY3RXZWIzUHJvdmlkZXIoKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby12b2lkXG52b2lkIDA7XG4iXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiYWRvcHQiLCJ2YWx1ZSIsInJlc29sdmUiLCJQcm9taXNlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiRXZlbnRFbWl0dGVyIiwiaXNQbGFpbk9iamVjdCIsImlzU3RyaW5nIiwiYXBwRGVidWdMb2dnZXIiLCJjb25zb2xlRXJyb3JJbkRldiIsIklKc0JyaWRnZU1lc3NhZ2VUeXBlcyIsIndlYjNFcnJvcnMiLCJ2ZXJzaW9uSW5mbyIsImlzTGVnYWN5RXh0TWVzc2FnZSIsInBheWxvYWQiLCJwYXlsb2FkT2JqIiwiQm9vbGVhbiIsIm5hbWUiLCJpbmNsdWRlcyIsIkJSSURHRV9FVkVOVFMiLCJtZXNzYWdlIiwiZXJyb3IiLCJKc0JyaWRnZUJhc2UiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsIl9hIiwiX2IiLCJpc0V4dFVpIiwiaXNJbmplY3RlZCIsInNlbmRBc1N0cmluZyIsImdsb2JhbE9uTWVzc2FnZUVuYWJsZWQiLCJwcm92aWRlcnNIdWIiLCJnbG9iYWxPbk1lc3NhZ2UiLCJyZWNlaXZlSGFuZGxlciIsInJldHVyblZhbHVlIiwiaWQiLCJyZXNwb25zZSIsInNjb3BlIiwicmVtb3RlSWQiLCJkYXRhIiwidHlwZSIsIlJFUVVFU1QiLCJyZXNwb25zZUVycm9yIiwiZW1pdCIsInZlcnNpb24iLCJyZW1vdGVJbmZvIiwib3JpZ2luIiwiZGVidWdMb2dnZXIiLCJjYWxsYmFja3MiLCJjYWxsYmFja0lkIiwiY2FsbGJhY2tzRXhwaXJlVGltZW91dCIsInRpbWVvdXQiLCJvbiIsImNvZGUiLCJyZWplY3RFeHBpcmVkQ2FsbGJhY2tzIiwiYXR0YWNoUHJvdmlkZXJJbnN0YW5jZSIsInByb3ZpZGVyIiwicHJvdmlkZXJOYW1lIiwicHVzaCIsImNyZWF0ZUNhbGxiYWNrSWQiLCJjcmVhdGVQYXlsb2FkIiwiRXJyb3IiLCJjcmVhdGVkIiwiRGF0ZSIsIm5vdyIsImVycm9ySW5mbyIsInN0YWNrIiwic2VuZCIsInN5bmMiLCJleGVjdXRvciIsIl9pZCIsImdsb2JhbCIsImxvY2F0aW9uIiwicGF5bG9hZFRvU2VuZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJqc0JyaWRnZSIsInNlbmRQYXlsb2FkIiwicmVqZWN0Q2FsbGJhY2siLCJwcm9jZXNzQ2FsbGJhY2siLCJtZXRob2QiLCJyZXNvbHZlQ2FsbGJhY2siLCJjYWxsYmFja0luZm8iLCJjbGVhckNhbGxiYWNrQ2FjaGUiLCJyZXF1ZXN0VGltZW91dCIsInNldFRpbWVvdXQiLCJyZWNlaXZlIiwicGF5bG9hZFJlY2VpdmVkIiwic2VuZGVyIiwicGFyc2UiLCJpbnRlcm5hbCIsIlJFU1BPTlNFIiwidW5kZWZpbmVkIiwiZXJyb3IwIiwiZXZlbnRNZXNzYWdlUGF5bG9hZCIsIk9iamVjdCIsImFzc2lnbiIsInJlcXVlc3RTeW5jIiwicmVxdWVzdCIsImluZm8iLCJjb25zb2xlIiwid2FybiIsImlzRnVuY3Rpb24iLCJzaXRlTWV0YWRhdGEiLCJmYWtlTG9nZ2VyIiwiZmFrZURlYnVnTG9nZ2VyIiwiTUVUSE9EUyIsIndhbGxldF9nZXRDb25uZWN0V2FsbGV0SW5mbyIsIndhbGxldF9zZW5kU2l0ZU1ldGFkYXRhIiwiUHJvdmlkZXJCYXNlIiwiX2MiLCJpc09uZUtleSIsImxvZ2dlciIsImJyaWRnZSIsIl9hdHRhY2hFeHRlcm5hbExvZ2dlciIsInNob3VsZFNlbmRNZXRhZGF0YSIsInNlbmRTaXRlTWV0YWRhdGEiLCJjb25maWdEZWJ1Z0xvZ2dlciIsImVuYWJsZWRLZXlzIiwiZm9yRWFjaCIsImtleSIsIl9jcmVhdGVEZWJ1Z0luc3RhbmNlIiwiX2RlYnVnIiwiZW5hYmxlIiwid2luZG93IiwiJG9uZWtleSIsIiRkZWJ1Z0xvZ2dlciIsImdldENvbm5lY3RXYWxsZXRJbmZvIiwidGltZXIiLCJicmlkZ2VSZXF1ZXN0IiwicGFyYW1zIiwidGltZSIsInByb3ZpZGVyU3RhdGUiLCJkZWJ1Z0xvZ2dlckNvbmZpZyIsIndhbGxldEluZm8iLCIkd2FsbGV0SW5mbyIsImVyciIsImNsZWFyVGltZW91dCIsImNhbGxiYWNrIiwiaGFzQ2FsbGJhY2siLCJwcm92aWRlckJhc2UiLCJyZXNEYXRhIiwicmVxIiwicmVzIiwibWV0YWRhdGEiLCJnZXRTaXRlTWV0YWRhdGEiLCJKU19CUklER0VfTUVTU0FHRV9JUENfQ0hBTk5FTCIsIkpTX0JSSURHRV9NRVNTQUdFX0VYVF9DSEFOTkVMIiwiSlNfQlJJREdFX01FU1NBR0VfRVhUX1BJTkciLCJKU19CUklER0VfTUVTU0FHRV9ESVJFQ1RJT04iLCJFWFRfUE9SVF9DU19UT19CRyIsIkVYVF9QT1JUX1VJX1RPX0JHIiwiREVCVUdfTE9HR0VSX1NUT1JBR0VfS0VZIiwiaHVtYW5pemUiLCJzdG9yYWdlS2V5IiwiZXhwb3J0c0Jyb3dzZXIiLCJmb3JtYXRBcmdzIiwic2F2ZSIsImxvYWQiLCJ1c2VDb2xvcnMiLCJzdG9yYWdlIiwiY3VzdG9tTG9jYWxTdG9yYWdlIiwiZGVzdHJveSIsIndhcm5lZCIsImNvbG9ycyIsInByb2Nlc3MiLCJfX253anMiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ0b0xvd2VyQ2FzZSIsIm1hdGNoIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJzdHlsZSIsIldlYmtpdEFwcGVhcmFuY2UiLCJmaXJlYnVnIiwiZXhjZXB0aW9uIiwidGFibGUiLCJwYXJzZUludCIsIlJlZ0V4cCIsIiQxIiwiYXJncyIsIm5hbWVzcGFjZSIsImRpZmYiLCJjIiwiY29sb3IiLCJzcGxpY2UiLCJpbmRleCIsImxhc3RDIiwicmVwbGFjZSIsImxvZyIsImRlYnVnIiwibmFtZXNwYWNlcyIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiciIsImdldEl0ZW0iLCJlbnYiLCJERUJVRyIsIiQkb25la2V5QXBwU3RvcmFnZSIsImxvY2FsU3RvcmFnZSIsInNldHVwIiwiY3JlYXRlRGVidWciLCJkZWZhdWx0IiwiY29lcmNlIiwiZGlzYWJsZSIsImVuYWJsZWQiLCJrZXlzIiwibmFtZXMiLCJza2lwcyIsImZvcm1hdHRlcnMiLCJqIiwidiIsInNlbGVjdENvbG9yIiwiaGFzaCIsImkiLCJsZW5ndGgiLCJjaGFyQ29kZUF0IiwiTWF0aCIsImFicyIsInByZXZUaW1lIiwiZW5hYmxlT3ZlcnJpZGUiLCJuYW1lc3BhY2VzQ2FjaGUiLCJlbmFibGVkQ2FjaGUiLCJzZWxmIiwiY3VyciIsIk51bWJlciIsIm1zIiwicHJldiIsInVuc2hpZnQiLCJmb3JtYXQiLCJmb3JtYXR0ZXIiLCJ2YWwiLCJjYWxsIiwibG9nRm4iLCJleHRlbmQiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJnZXQiLCJzZXQiLCJpbml0IiwiZGVsaW1pdGVyIiwibmV3RGVidWciLCJzcGxpdCIsImxlbiIsInN1YnN0ciIsIm1hcCIsInRvTmFtZXNwYWNlIiwiam9pbiIsInRlc3QiLCJyZWdleHAiLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsImJyb3dzZXIiLCJjcmVhdGVEZWJ1Z0FzeW5jIiwiY29uc3RzIiwiaW5qZWN0ZWRGYWN0b3J5IiwiZml4R2xvYmFsU2hpbSIsImdsb2JhbFRoaXMiLCJpbmplY3RKc0JyaWRnZSIsImJyaWRnZUNyZWF0b3IiLCJwZXJmb3JtYW5jZSIsImNyZWF0ZUNvZGVXaXRoU2NyaXB0VGFnIiwiaW5qZWN0Q29kZVdpdGhTY3JpcHRUYWciLCJmaWxlIiwicmVtb3ZlIiwicyIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJ0ZXh0Q29udGVudCIsInNyYyIsIm9ubG9hZCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZUNvZGVKc0JyaWRnZVJlY2VpdmUiLCJwYXlsb2FkU3RyIiwiaW5qZWN0ZWRQcm92aWRlclJlY2VpdmVIYW5kbGVyIiwicHJvdmlkZXJIdWIiLCJwYXlsb2FkRGF0YSIsInByb3ZpZGVycyIsImNvbmNhdCIsImZpbHRlciIsImxvZ2dlckNvbmZpZyIsIk5PREVfRU5WIiwiX2lzRmFrZUxvZ2dlciIsInRyYWNlIiwiRmFrZURlYnVnTG9nZ2VyIiwiX2V4dGVybmFsTG9nZ2VyIiwiX2NyZWF0ZUV4dGVybmFsTG9nIiwiX2xvZ2dlciIsImV4dEluamVjdGVkIiwiZXh0Q29udGVudFNjcmlwdHMiLCJ3ZWJ2aWV3IiwiZGVza3RvcEluamVjdGVkIiwiZXRoZXJldW0iLCJBcHBEZWJ1Z0xvZ2dlciIsIl9kZWJ1Z0luc3RhbmNlQ3JlYXRlZE1hcCIsIl9kZWJ1Z0xvZyIsIl9vcmlnaW5Mb2ciLCJpbWdFeGlzdHMiLCJ1cmwiLCJpbWciLCJvbmVycm9yIiwiZ2V0U2l0ZU5hbWUiLCJpY29uIiwiZ2V0U2l0ZUljb24iLCJ3aW5kb3dPYmplY3QiLCJzaXRlTmFtZSIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50IiwibWV0YVRpdGxlIiwidGl0bGUiLCJob3N0bmFtZSIsImljb25zIiwicXVlcnlTZWxlY3RvckFsbCIsImljb25zQXJyIiwiaHJlZiIsInZlcnNpb25CdWlsZCIsInNhZmVTdHJpbmdpZnkiLCJXZWIzUnBjRXJyb3IiLCJpc0ludGVnZXIiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVkIiwic3RyaW5naWZ5UmVwbGFjZXIiLCJXZWIzUHJvdmlkZXJFcnJvciIsImlzVmFsaWRXZWIzUHJvdmlkZXJDb2RlIiwiXyIsImVycm9yQ29kZXMiLCJycGMiLCJpbnZhbGlkSW5wdXQiLCJyZXNvdXJjZU5vdEZvdW5kIiwicmVzb3VyY2VVbmF2YWlsYWJsZSIsInRyYW5zYWN0aW9uUmVqZWN0ZWQiLCJtZXRob2ROb3RTdXBwb3J0ZWQiLCJsaW1pdEV4Y2VlZGVkIiwiaW52YWxpZFJlcXVlc3QiLCJtZXRob2ROb3RGb3VuZCIsImludmFsaWRQYXJhbXMiLCJ1c2VyUmVqZWN0ZWRSZXF1ZXN0IiwidW5hdXRob3JpemVkIiwidW5zdXBwb3J0ZWRNZXRob2QiLCJkaXNjb25uZWN0ZWQiLCJjaGFpbkRpc2Nvbm5lY3RlZCIsImVycm9yVmFsdWVzIiwic3RhbmRhcmQiLCJnZXRNZXNzYWdlRnJvbUNvZGUiLCJhcmciLCJnZXRXZWIzSnNvblJwY0Vycm9yIiwic2VydmVyIiwib3B0cyIsIkFycmF5IiwiaXNBcnJheSIsImdldFdlYjNQcm92aWRlckVycm9yIiwiY3VzdG9tIiwicGFyc2VPcHRzIiwic2VyaWFsaXplRXJyb3IiLCJGQUxMQkFDS19FUlJPUl9DT0RFIiwiRkFMTEJBQ0tfTUVTU0FHRSIsIkZBTExCQUNLX0VSUk9SIiwiSlNPTl9SUENfU0VSVkVSX0VSUk9SX01FU1NBR0UiLCJmYWxsYmFja01lc3NhZ2UiLCJjb2RlU3RyaW5nIiwiaGFzS2V5IiwiaXNKc29uUnBjU2VydmVyRXJyb3IiLCJpc1ZhbGlkQ29kZSIsImZhbGxiYWNrRXJyb3IiLCJzaG91bGRJbmNsdWRlU3RhY2siLCJfZXJyb3IiLCJvcmlnaW5hbEVycm9yIiwiYXNzaWduT3JpZ2luYWxFcnJvciIsIm9iaiIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiSnNCcmlkZ2VOYXRpdmVJbmplY3RlZCIsImFyZ3VtZW50cyIsIlJlYWN0TmF0aXZlV2ViVmlldyIsInBvc3RNZXNzYWdlIiwiSUluamVjdGVkUHJvdmlkZXJOYW1lcyIsIlByb3ZpZGVyUHJpdmF0ZSIsIiRwcml2YXRlIiwiUHJvdmlkZXJFdGhlcmV1bSIsImluamVjdFdlYjNQcm92aWRlciIsInNvbGFuYSIsImNvbmZsdXgiLCJzb2xsZXQiLCJkaXNwYXRjaEV2ZW50IiwiRXZlbnQiXSwic291cmNlUm9vdCI6IiJ9