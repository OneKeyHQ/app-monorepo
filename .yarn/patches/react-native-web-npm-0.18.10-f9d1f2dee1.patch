diff --git a/dist/exports/Dimensions/index.js b/dist/exports/Dimensions/index.js
index 63af38bc973616969f5ccf3f6ab99d035e79c5f8..bf9c5660ceeb130627c7069cd888fbd67b2bb31a 100644
--- a/dist/exports/Dimensions/index.js
+++ b/dist/exports/Dimensions/index.js
@@ -7,99 +7,108 @@
  *
  * 
  */
-import invariant from 'fbjs/lib/invariant';
-import canUseDOM from '../../modules/canUseDom';
-var dimensions = {
-  window: {
-    fontScale: 1,
-    height: 0,
-    scale: 1,
-    width: 0
-  },
-  screen: {
-    fontScale: 1,
-    height: 0,
-    scale: 1,
-    width: 0
-  }
-};
-var listeners = {};
-var shouldInit = canUseDOM;
-
-function update() {
-  if (!canUseDOM) {
-    return;
-  }
-
-  var win = window;
-  var docEl = win.document.documentElement;
-  dimensions.window = {
-    fontScale: 1,
-    height: docEl.clientHeight,
-    scale: win.devicePixelRatio || 1,
-    width: docEl.clientWidth
-  };
-  dimensions.screen = {
-    fontScale: 1,
-    height: win.screen.height,
-    scale: win.devicePixelRatio || 1,
-    width: win.screen.width
-  };
-}
-
-function handleResize() {
-  update();
-
-  if (Array.isArray(listeners['change'])) {
-    listeners['change'].forEach(handler => handler(dimensions));
-  }
-}
-
-export default class Dimensions {
-  static get(dimension) {
-    if (shouldInit) {
-      shouldInit = false;
-      update();
-    }
-
-    invariant(dimensions[dimension], "No dimension set for key " + dimension);
-    return dimensions[dimension];
-  }
-
-  static set(initialDimensions) {
-    if (initialDimensions) {
-      if (canUseDOM) {
-        invariant(false, 'Dimensions cannot be set in the browser');
-      } else {
-        if (initialDimensions.screen != null) {
-          dimensions.screen = initialDimensions.screen;
-        }
-
-        if (initialDimensions.window != null) {
-          dimensions.window = initialDimensions.window;
-        }
-      }
-    }
-  }
-
-  static addEventListener(type, handler) {
-    listeners[type] = listeners[type] || [];
-    listeners[type].push(handler);
-    return {
-      remove: () => {
-        this.removeEventListener(type, handler);
-      }
-    };
-  }
-
-  static removeEventListener(type, handler) {
-    if (Array.isArray(listeners[type])) {
-      listeners[type] = listeners[type].filter(_handler => _handler !== handler);
-    }
-  }
-
-}
-
-if (canUseDOM) {
-  window.addEventListener('resize', handleResize, false);
-}
\ No newline at end of file
+ import invariant from 'fbjs/lib/invariant';
+ import canUseDOM from '../../modules/canUseDom';
+ 
+ var dimensions = {
+   window: {
+     fontScale: 1,
+     height: 0,
+     scale: 1,
+     width: 0
+   },
+   screen: {
+     fontScale: 1,
+     height: 0,
+     scale: 1,
+     width: 0
+   }
+ };
+ var listeners = {};
+ var shouldInit = canUseDOM;
+ 
+ function update() {
+   if (!canUseDOM) {
+     return;
+   }
+ 
+   var win = window;
+   var docEl = win.document.documentElement;
+   let updated = false;
+   const newWindow = {
+     fontScale: 1,
+     height: docEl.clientHeight,
+     scale: win.devicePixelRatio || 1,
+     width: docEl.clientWidth
+   };
+   const newScreen = {
+     fontScale: 1,
+     height: win.screen.height,
+     scale: win.devicePixelRatio || 1,
+     width: win.screen.width
+   };
+   if (JSON.stringify(newWindow) !== JSON.stringify(dimensions.window)) {
+     updated = true;
+     dimensions.window = newWindow;
+   }
+   if (JSON.stringify(newScreen) !== JSON.stringify(dimensions.screen)) {
+     updated = true;
+     dimensions.screen = newScreen;
+   }
+   return updated;
+ }
+ 
+ function handleResize() {
+   if (update() && Array.isArray(listeners['change'])) {
+     listeners['change'].forEach(handler => handler(dimensions));
+   }
+ }
+ 
+ export default class Dimensions {
+   static get(dimension) {
+     if (shouldInit) {
+       shouldInit = false;
+       update();
+     }
+ 
+     invariant(dimensions[dimension], "No dimension set for key " + dimension);
+     return dimensions[dimension];
+   }
+ 
+   static set(initialDimensions) {
+     if (initialDimensions) {
+       if (canUseDOM) {
+         invariant(false, 'Dimensions cannot be set in the browser');
+       } else {
+         if (initialDimensions.screen != null) {
+           dimensions.screen = initialDimensions.screen;
+         }
+ 
+         if (initialDimensions.window != null) {
+           dimensions.window = initialDimensions.window;
+         }
+       }
+     }
+   }
+ 
+   static addEventListener(type, handler) {
+     listeners[type] = listeners[type] || [];
+     listeners[type].push(handler);
+     return {
+       remove: () => {
+         this.removeEventListener(type, handler);
+       }
+     };
+   }
+ 
+   static removeEventListener(type, handler) {
+     if (Array.isArray(listeners[type])) {
+       listeners[type] = listeners[type].filter(_handler => _handler !== handler);
+     }
+   }
+ 
+ }
+ 
+ if (canUseDOM) {
+   window.addEventListener('resize', handleResize, false);
+ }
\ No newline at end of file
diff --git a/dist/exports/Image/index.js b/dist/exports/Image/index.js
index 93c5f22f3b5c7625f3d428302033aae287a576f8..b06dbea0187ab4721133806a9c60f92bbfbcc037 100644
--- a/dist/exports/Image/index.js
+++ b/dist/exports/Image/index.js
@@ -179,6 +179,14 @@ var Image = /*#__PURE__*/React.forwardRef((props, ref) => {
     }
   }
 
+  var isMountedRef = React.useRef(true);
+  React.useEffect(() => {
+    isMountedRef.current = true;
+    return () => {
+      isMountedRef.current = false;
+    };
+  }, []);
+
   var _React$useState = React.useState(() => {
     var uri = resolveAssetUri(source);
 
@@ -247,7 +255,7 @@ var Image = /*#__PURE__*/React.forwardRef((props, ref) => {
     if (resizeMode === 'center' || resizeMode === 'repeat' || onLayout) {
       var _layout = e.nativeEvent.layout;
       onLayout && onLayout(e);
-      updateLayout(_layout);
+      isMountedRef.current && updateLayout(_layout);
     }
   } // Image loading
 
@@ -257,14 +265,14 @@ var Image = /*#__PURE__*/React.forwardRef((props, ref) => {
     abortPendingRequest();
 
     if (uri != null) {
-      updateState(LOADING);
+      isMountedRef.current && updateState(LOADING);
 
       if (onLoadStart) {
         onLoadStart();
       }
 
       requestRef.current = ImageLoader.load(uri, function load(e) {
-        updateState(LOADED);
+        isMountedRef.current && updateState(LOADED);
 
         if (onLoad) {
           onLoad(e);
@@ -274,7 +282,7 @@ var Image = /*#__PURE__*/React.forwardRef((props, ref) => {
           onLoadEnd();
         }
       }, function error() {
-        updateState(ERRORED);
+        isMountedRef.current && updateState(ERRORED);
 
         if (onError) {
           onError({
