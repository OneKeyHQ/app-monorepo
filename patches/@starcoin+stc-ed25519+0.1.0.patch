diff --git a/node_modules/@starcoin/stc-ed25519/index.js b/node_modules/@starcoin/stc-ed25519/index.js
index c0b12a1..21b1f71 100644
--- a/node_modules/@starcoin/stc-ed25519/index.js
+++ b/node_modules/@starcoin/stc-ed25519/index.js
@@ -1,23 +1,30 @@
 "use strict";
 /*! noble-ed25519 - MIT License (c) Paul Miller (paulmillr.com) */
 Object.defineProperty(exports, "__esModule", { value: true });
+const BigInt_neg1 = BigInt(-1);
+const BigInt_0 = BigInt(0);
+const BigInt_1 = BigInt(1);
+const BigInt_2 = BigInt(2);
+const BigInt_8 = BigInt(8);
+const BigInt_19 = BigInt(19);
+
 exports.utils = exports.verify = exports.sign = exports.getPublicKey = exports.SignResult = exports.Signature = exports.Point = exports.ExtendedPoint = exports.CURVE = void 0;
 const CURVE = {
-    a: -1n,
-    d: 37095705934669439343138083508754565189542113879843219016388785533085940283555n,
-    P: BigInt(2 ** 255) - 19n,
-    n: BigInt(2 ** 252) + 27742317777372353535851937790883648493n,
-    h: 8n,
-    Gx: 15112221349535400772501151409588531511454012693041857206046113283949847762202n,
-    Gy: 46316835694926478169428394003475163141307993866256225615783033603165251855960n,
+    a: BigInt_neg1,
+    d: BigInt(37095705934669439343138083508754565189542113879843219016388785533085940283555),
+    P: BigInt(2 ** 255) - BigInt_19,
+    n: BigInt(2 ** 252) + BigInt(27742317777372353535851937790883648493),
+    h: BigInt_8,
+    Gx: BigInt(15112221349535400772501151409588531511454012693041857206046113283949847762202),
+    Gy: BigInt(46316835694926478169428394003475163141307993866256225615783033603165251855960),
 };
 exports.CURVE = CURVE;
 const B32 = 32;
-const SQRT_M1 = 19681161376707505956807079304988542015446066515923890162744021073123829784752n;
-const SQRT_AD_MINUS_ONE = 25063068953384623474111414158702152701244531502492656460079210482610430750235n;
-const INVSQRT_A_MINUS_D = 54469307008909316920995813868745141605393597292927456921205312896311721017578n;
-const ONE_MINUS_D_SQ = 1159843021668779879193775521855586647937357759715417654439879720876111806838n;
-const D_MINUS_ONE_SQ = 40440834346308536858101042469323190826248399146238708352240133220865137265952n;
+const SQRT_M1 = BigInt(19681161376707505956807079304988542015446066515923890162744021073123829784752);
+const SQRT_AD_MINUS_ONE = BigInt(25063068953384623474111414158702152701244531502492656460079210482610430750235);
+const INVSQRT_A_MINUS_D = BigInt(54469307008909316920995813868745141605393597292927456921205312896311721017578);
+const ONE_MINUS_D_SQ = BigInt(1159843021668779879193775521855586647937357759715417654439879720876111806838);
+const D_MINUS_ONE_SQ = BigInt(40440834346308536858101042469323190826248399146238708352240133220865137265952);
 class ExtendedPoint {
     constructor(x, y, z, t) {
         this.x = x;
@@ -31,7 +38,7 @@ class ExtendedPoint {
         }
         if (p.equals(Point.ZERO))
             return ExtendedPoint.ZERO;
-        return new ExtendedPoint(p.x, p.y, 1n, mod(p.x * p.y));
+        return new ExtendedPoint(p.x, p.y, BigInt_1, mod(p.x * p.y));
     }
     static toAffineBatch(points) {
         const toInv = invertBatch(points.map((p) => p.z));
@@ -50,8 +57,8 @@ class ExtendedPoint {
     static calcElligatorRistrettoMap(r0) {
         const { d } = CURVE;
         const r = mod(SQRT_M1 * r0 * r0);
-        const Ns = mod((r + 1n) * ONE_MINUS_D_SQ);
-        let c = -1n;
+        const Ns = mod((r + BigInt_1) * ONE_MINUS_D_SQ);
+        let c = BigInt_neg1;
         const D = mod((c - d * r) * mod(r + d));
         let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);
         let s_ = mod(s * r0);
@@ -61,12 +68,12 @@ class ExtendedPoint {
             s = s_;
         if (!Ns_D_is_sq)
             c = r;
-        const Nt = mod(c * (r - 1n) * D_MINUS_ONE_SQ - D);
+        const Nt = mod(c * (r - BigInt_1) * D_MINUS_ONE_SQ - D);
         const s2 = s * s;
         const W0 = mod((s + s) * D);
         const W1 = mod(Nt * SQRT_AD_MINUS_ONE);
-        const W2 = mod(1n - s2);
-        const W3 = mod(1n + s2);
+        const W2 = mod(BigInt_1 - s2);
+        const W3 = mod(BigInt_1 + s2);
         return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));
     }
     static fromRistrettoBytes(bytes) {
@@ -76,8 +83,8 @@ class ExtendedPoint {
         if (!equalBytes(numberToBytesPadded(s, B32), bytes) || edIsNegative(s))
             throw new Error(emsg);
         const s2 = mod(s * s);
-        const u1 = mod(1n + a * s2);
-        const u2 = mod(1n - a * s2);
+        const u1 = mod(BigInt_1 + a * s2);
+        const u2 = mod(BigInt_1 - a * s2);
         const u1_2 = mod(u1 * u1);
         const u2_2 = mod(u2 * u2);
         const v = mod(a * d * u1_2 - u2_2);
@@ -89,15 +96,15 @@ class ExtendedPoint {
             x = mod(-x);
         const y = mod(u1 * Dy);
         const t = mod(x * y);
-        if (!isValid || edIsNegative(t) || y === 0n)
+        if (!isValid || edIsNegative(t) || y === BigInt_0)
             throw new Error(emsg);
-        return new ExtendedPoint(x, y, 1n, t);
+        return new ExtendedPoint(x, y, BigInt_1, t);
     }
     toRistrettoBytes() {
         let { x, y, z, t } = this;
         const u1 = mod((z + y) * (z - y));
         const u2 = mod(x * y);
-        const { value: invsqrt } = invertSqrt(mod(u1 * u2 ** 2n));
+        const { value: invsqrt } = invertSqrt(mod(u1 * u2 ** BigInt_2));
         const D1 = mod(invsqrt * u1);
         const D2 = mod(invsqrt * u2);
         const zInv = mod(D1 * D2 * t);
@@ -130,11 +137,11 @@ class ExtendedPoint {
         const Y1 = this.y;
         const Z1 = this.z;
         const { a } = CURVE;
-        const A = mod(X1 ** 2n);
-        const B = mod(Y1 ** 2n);
-        const C = mod(2n * Z1 ** 2n);
+        const A = mod(X1 ** BigInt_2);
+        const B = mod(Y1 ** BigInt_2);
+        const C = mod(BigInt_2 * Z1 ** BigInt_2);
         const D = mod(a * A);
-        const E = mod((X1 + Y1) ** 2n - A - B);
+        const E = mod((X1 + Y1) ** BigInt_2 - A - B);
         const G = mod(D + B);
         const F = mod(G - C);
         const H = mod(D - B);
@@ -156,11 +163,11 @@ class ExtendedPoint {
         const A = mod((Y1 - X1) * (Y2 + X2));
         const B = mod((Y1 + X1) * (Y2 - X2));
         const F = mod(B - A);
-        if (F === 0n) {
+        if (F === BigInt_0) {
             return this.double();
         }
-        const C = mod(Z1 * 2n * T2);
-        const D = mod(T1 * 2n * Z2);
+        const C = mod(Z1 * BigInt_2 * T2);
+        const D = mod(T1 * BigInt_2 * Z2);
         const E = mod(D + C);
         const G = mod(B + A);
         const H = mod(D - C);
@@ -177,15 +184,15 @@ class ExtendedPoint {
         if (!isValidScalar(scalar))
             throw new TypeError('Point#multiply: expected number or bigint');
         let n = mod(BigInt(scalar), CURVE.n);
-        if (n === 1n)
+        if (n === BigInt_1)
             return this;
         let p = ExtendedPoint.ZERO;
         let d = this;
-        while (n > 0n) {
-            if (n & 1n)
+        while (n > BigInt_0) {
+            if (n & BigInt_1)
                 p = p.add(d);
             d = d.double();
-            n >>= 1n;
+            n >>= BigInt_1;
         }
         return p;
     }
@@ -233,7 +240,7 @@ class ExtendedPoint {
             n >>= shiftBy;
             if (wbits > windowSize) {
                 wbits -= maxNumber;
-                n += 1n;
+                n += BigInt_1;
             }
             if (wbits === 0) {
                 f = f.add(window % 2 ? precomputes[offset].negate() : precomputes[offset]);
@@ -258,8 +265,8 @@ class ExtendedPoint {
     }
 }
 exports.ExtendedPoint = ExtendedPoint;
-ExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, 1n, mod(CURVE.Gx * CURVE.Gy));
-ExtendedPoint.ZERO = new ExtendedPoint(0n, 1n, 1n, 0n);
+ExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, BigInt_1, mod(CURVE.Gx * CURVE.Gy));
+ExtendedPoint.ZERO = new ExtendedPoint(BigInt_0, BigInt_1, BigInt_1, BigInt_0);
 const pointPrecomputes = new WeakMap();
 class Point {
     constructor(x, y) {
@@ -283,12 +290,12 @@ class Point {
         if (y >= P)
             throw new Error('Point.fromHex expects hex <= Fp');
         const y2 = mod(y * y);
-        const u = mod(y2 - 1n);
-        const v = mod(d * y2 + 1n);
+        const u = mod(y2 - BigInt_1);
+        const v = mod(d * y2 + BigInt_1);
         let { isValid, value: x } = uvRatio(u, v);
         if (!isValid)
             throw new Error('Point.fromHex: invalid y coordinate');
-        const isXOdd = (x & 1n) === 1n;
+        const isXOdd = (x & BigInt_1) === BigInt_1;
         if (isLastByteOdd !== isXOdd) {
             x = mod(-x);
         }
@@ -304,7 +311,7 @@ class Point {
         for (let i = hex.length - 2, j = 0; j < B32 && i >= 0; i -= 2, j++) {
             u8[j] = Number.parseInt(hex[i] + hex[i + 1], 16);
         }
-        const mask = this.x & 1n ? 0x80 : 0;
+        const mask = this.x & BigInt_1 ? 0x80 : 0;
         u8[B32 - 1] |= mask;
         return u8;
     }
@@ -312,7 +319,7 @@ class Point {
         return bytesToHex(this.toRawBytes());
     }
     toX25519() {
-        return mod((1n + this.y) * invert(1n - this.y));
+        return mod((BigInt_1 + this.y) * invert(BigInt_1 - this.y));
     }
     equals(other) {
         return this.x === other.x && this.y === other.y;
@@ -332,7 +339,7 @@ class Point {
 }
 exports.Point = Point;
 Point.BASE = new Point(CURVE.Gx, CURVE.Gy);
-Point.ZERO = new Point(0n, 1n);
+Point.ZERO = new Point(BigInt_0, BigInt_1);
 class Signature {
     constructor(r, s) {
         this.r = r;
@@ -399,37 +406,37 @@ function numberToBytesPadded(num, length = B32) {
     return hexToBytes(hex).reverse();
 }
 function edIsNegative(num) {
-    return (mod(num) & 1n) === 1n;
+    return (mod(num) & BigInt_1) === BigInt_1;
 }
 function isValidScalar(num) {
-    if (typeof num === 'bigint' && num > 0n)
+    if (typeof num === 'bigint' && num > BigInt_0)
         return true;
     if (typeof num === 'number' && num > 0 && Number.isSafeInteger(num))
         return true;
     return false;
 }
 function bytesToNumberLE(uint8a) {
-    let value = 0n;
+    let value = BigInt_0;
     for (let i = 0; i < uint8a.length; i++) {
-        value += BigInt(uint8a[i]) << (8n * BigInt(i));
+        value += BigInt(uint8a[i]) << (BigInt_8 * BigInt(i));
     }
     return value;
 }
 function bytes255ToNumberLE(bytes) {
-    return mod(bytesToNumberLE(bytes) & (2n ** 255n - 1n));
+    return mod(bytesToNumberLE(bytes) & (BigInt_2 ** BigInt(255) - BigInt_1));
 }
 function mod(a, b = CURVE.P) {
     const res = a % b;
-    return res >= 0n ? res : b + res;
+    return res >= BigInt_0 ? res : b + res;
 }
 function invert(number, modulo = CURVE.P) {
-    if (number === 0n || modulo <= 0n) {
+    if (number === BigInt_0 || modulo <= BigInt_0) {
         throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
     }
     let a = mod(number, modulo);
     let b = modulo;
-    let [x, y, u, v] = [0n, 1n, 1n, 0n];
-    while (a !== 0n) {
+    let [x, y, u, v] = [BigInt_0, BigInt_1, BigInt_1, BigInt_0];
+    while (a !== BigInt_0) {
         const q = b / a;
         const r = b % a;
         const m = x - u * q;
@@ -439,23 +446,23 @@ function invert(number, modulo = CURVE.P) {
         [u, v] = [m, n];
     }
     const gcd = b;
-    if (gcd !== 1n)
+    if (gcd !== BigInt_1)
         throw new Error('invert: does not exist');
     return mod(x, modulo);
 }
 function invertBatch(nums, n = CURVE.P) {
     const len = nums.length;
     const scratch = new Array(len);
-    let acc = 1n;
+    let acc = BigInt_1;
     for (let i = 0; i < len; i++) {
-        if (nums[i] === 0n)
+        if (nums[i] === BigInt_0)
             continue;
         scratch[i] = acc;
         acc = mod(acc * nums[i], n);
     }
     acc = invert(acc, n);
     for (let i = len - 1; i >= 0; i--) {
-        if (nums[i] === 0n)
+        if (nums[i] === BigInt_0)
             continue;
         let tmp = mod(acc * nums[i], n);
         nums[i] = mod(acc * scratch[i], n);
@@ -466,7 +473,7 @@ function invertBatch(nums, n = CURVE.P) {
 function pow2(x, power) {
     const { P } = CURVE;
     let res = x;
-    while (power-- > 0n) {
+    while (power-- > BigInt_0) {
         res *= res;
         res %= P;
     }
@@ -476,16 +483,16 @@ function pow_2_252_3(x) {
     const { P } = CURVE;
     const x2 = (x * x) % P;
     const b2 = (x2 * x) % P;
-    const b4 = (pow2(b2, 2n) * b2) % P;
-    const b5 = (pow2(b4, 1n) * x) % P;
-    const b10 = (pow2(b5, 5n) * b5) % P;
-    const b20 = (pow2(b10, 10n) * b10) % P;
-    const b40 = (pow2(b20, 20n) * b20) % P;
-    const b80 = (pow2(b40, 40n) * b40) % P;
-    const b160 = (pow2(b80, 80n) * b80) % P;
-    const b240 = (pow2(b160, 80n) * b80) % P;
-    const b250 = (pow2(b240, 10n) * b10) % P;
-    const pow_p_5_8 = (pow2(b250, 2n) * x) % P;
+    const b4 = (pow2(b2, BigInt_2) * b2) % P;
+    const b5 = (pow2(b4, BigInt_1) * x) % P;
+    const b10 = (pow2(b5, BigInt(5)) * b5) % P;
+    const b20 = (pow2(b10, BigInt(10)) * b10) % P;
+    const b40 = (pow2(b20, BigInt(20)) * b20) % P;
+    const b80 = (pow2(b40, BigInt(40)) * b40) % P;
+    const b160 = (pow2(b80, BigInt(80)) * b80) % P;
+    const b240 = (pow2(b160, BigInt(80)) * b80) % P;
+    const b250 = (pow2(b240, BigInt(10)) * b10) % P;
+    const pow_p_5_8 = (pow2(b250, BigInt_2) * x) % P;
     return pow_p_5_8;
 }
 function uvRatio(u, v) {
@@ -507,7 +514,7 @@ function uvRatio(u, v) {
     return { isValid: useRoot1 || useRoot2, value: x };
 }
 function invertSqrt(number) {
-    return uvRatio(1n, number);
+    return uvRatio(BigInt_1, number);
 }
 async function sha512ToNumberLE(...args) {
     const messageArray = concatBytes(...args);
@@ -591,7 +598,7 @@ async function verify(signature, hash, publicKey) {
     const Ph = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(hs);
     const Gs = ExtendedPoint.BASE.multiply(signature.s);
     const RPh = ExtendedPoint.fromAffine(signature.r).add(Ph);
-    return RPh.subtract(Gs).multiplyUnsafe(8n).equals(ExtendedPoint.ZERO);
+    return RPh.subtract(Gs).multiplyUnsafe(BigInt_8).equals(ExtendedPoint.ZERO);
 }
 exports.verify = verify;
 Point.BASE._setWindowSize(8);
@@ -636,7 +643,7 @@ exports.utils = {
     precompute(windowSize = 8, point = Point.BASE) {
         const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);
         cached._setWindowSize(windowSize);
-        cached.multiply(1n);
+        cached.multiply(BigInt_1);
         return cached;
     },
 };
