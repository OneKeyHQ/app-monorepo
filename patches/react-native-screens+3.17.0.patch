diff --git a/node_modules/react-native-screens/ios/RNSFullWindowOverlay.mm b/node_modules/react-native-screens/ios/RNSFullWindowOverlay.mm
index 52d1914..9522963 100644
--- a/node_modules/react-native-screens/ios/RNSFullWindowOverlay.mm
+++ b/node_modules/react-native-screens/ios/RNSFullWindowOverlay.mm
@@ -25,6 +25,38 @@
   return NO;
 }
 
+- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
+{
+  BOOL canReceiveTouchEvents = ([self isUserInteractionEnabled] && ![self isHidden]);
+  if (!canReceiveTouchEvents) {
+    return nil;
+  }
+
+  // `hitSubview` is the topmost subview which was hit. The hit point can
+  // be outside the bounds of `view` (e.g., if -clipsToBounds is NO).
+  UIView *hitSubview = nil;
+  BOOL isPointInside = [self pointInside:point withEvent:event];
+  if (![self clipsToBounds] || isPointInside) {
+    // Take z-index into account when calculating the touch target.
+    NSArray<UIView *> *sortedSubviews = [self reactZIndexSortedSubviews];
+
+    // The default behaviour of UIKit is that if a view does not contain a point,
+    // then no subviews will be returned from hit testing, even if they contain
+    // the hit point. By doing hit testing directly on the subviews, we bypass
+    // the strict containment policy (i.e., UIKit guarantees that every ancestor
+    // of the hit view will return YES from -pointInside:withEvent:). See:
+    //  - https://developer.apple.com/library/ios/qa/qa2013/qa1812.html
+    for (UIView *subview in [sortedSubviews reverseObjectEnumerator]) {
+      CGPoint convertedPoint = [subview convertPoint:point fromView:self];
+      hitSubview = [subview hitTest:convertedPoint withEvent:event];
+      if (hitSubview != nil) {
+        break;
+      }
+    }
+  }
+  return hitSubview;
+}
+
 @end
 
 @implementation RNSFullWindowOverlay {
@@ -89,19 +121,13 @@
 
 - (void)didMoveToWindow
 {
-  if (self.window == nil) {
-    if (_container != nil) {
-      [_container removeFromSuperview];
-      [_touchHandler detachFromView:_container];
-    }
-  } else {
-    if (_touchHandler == nil) {
+  if (self.window != nil && _touchHandler == nil) {
 #ifdef RN_FABRIC_ENABLED
-      _touchHandler = [RCTSurfaceTouchHandler new];
+    _touchHandler = [RCTSurfaceTouchHandler new];
 #else
-      _touchHandler = [[RCTTouchHandler alloc] initWithBridge:_bridge];
+    _touchHandler = [[RCTTouchHandler alloc] initWithBridge:_bridge];
 #endif
-    }
+      
     [_touchHandler attachToView:_container];
   }
 }
