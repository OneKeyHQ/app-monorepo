diff --git a/node_modules/react-native-reanimated/android/CMakeLists.txt b/node_modules/react-native-reanimated/android/CMakeLists.txt
index d93b7c3..1f55ecd 100644
--- a/node_modules/react-native-reanimated/android/CMakeLists.txt
+++ b/node_modules/react-native-reanimated/android/CMakeLists.txt
@@ -2,7 +2,7 @@ cmake_minimum_required(VERSION 3.5.1)
 
 set (CMAKE_VERBOSE_MAKEFILE ON)
 set (CMAKE_CXX_STANDARD 17)
-set (DEFAULT_FLAGS "-DFOLLY_NO_CONFIG=1 -DFOLLY_HAVE_CLOCK_GETTIME=1 -DFOLLY_HAVE_MEMRCHR=1 -DFOLLY_USE_LIBCPP=1 -DFOLLY_MOBILE=1 -DFOLLY_HAVE_RECVMMSG=1 -DFOLLY_HAVE_PTHREAD=1 -DON_ANDROID -DONANDROID -DANDROID -DFOR_HERMES=${FOR_HERMES} -fexceptions -fno-omit-frame-pointer -frtti -Wno-sign-compare -std=c++17 -Wall")
+set (DEFAULT_FLAGS "-DFOLLY_NO_CONFIG=1 -DFOLLY_HAVE_CLOCK_GETTIME=1 -DFOLLY_HAVE_MEMRCHR=1 -DFOLLY_USE_LIBCPP=1 -DFOLLY_MOBILE=1 -DFOLLY_HAVE_RECVMMSG=1 -DFOLLY_HAVE_PTHREAD=1 -DON_ANDROID -DONANDROID -DANDROID -fexceptions -fno-omit-frame-pointer -frtti -Wno-sign-compare -std=c++17 -Wall")
 if(${IS_NEW_ARCHITECTURE_ENABLED})
     set (ALL_FLAGS "${DEFAULT_FLAGS} -DRCT_NEW_ARCH_ENABLED")
 else()
@@ -22,11 +22,11 @@ set (PACKAGE_NAME "reanimated")
 set (BUILD_DIR ${CMAKE_SOURCE_DIR}/build)
 set (SRC_DIR ${CMAKE_SOURCE_DIR}/src)
 
+set (ignoreMe "${PLAYGROUND_APP_NAME}")
+
 if(${CLIENT_SIDE_BUILD})
-    set (NODE_MODULES_DIR "${CMAKE_SOURCE_DIR}/../../")
     set (COMMON_SRC_DIR "${CMAKE_SOURCE_DIR}/../Common")
 else()
-    set (NODE_MODULES_DIR "../${PLAYGROUND_APP_NAME}/node_modules")
     set (COMMON_SRC_DIR "${SRC_DIR}/main/Common")
 endif()
 
@@ -44,7 +44,6 @@ else()
 endif()
 
 file (GLOB LIBRN_DIR "${RN_SO_DIR}/${ANDROID_ABI}")
-file (GLOB HERMES_DIR "${BUILD_DIR}/third-party-ndk/hermes/jni/${ANDROID_ABI}")
 
 file(GLOB sources_tools  "${COMMON_SRC_DIR}/cpp/Tools/*.cpp")
 file(GLOB sources_native_modules  "${COMMON_SRC_DIR}/cpp/NativeModules/*.cpp")
@@ -121,7 +120,6 @@ target_include_directories(
         "${NODE_MODULES_DIR}/react-native/ReactCommon/turbomodule/core"
         "${NODE_MODULES_DIR}/react-native/ReactCommon/turbomodule"
         "${NODE_MODULES_DIR}/react-native/ReactCommon/yoga"
-        "${NODE_MODULES_DIR}/hermes-engine/android/include/"
         "${COMMON_SRC_DIR}/cpp/headers/Tools"
         "${COMMON_SRC_DIR}/cpp/headers/SpecTools"
         "${COMMON_SRC_DIR}/cpp/headers/NativeModules"
@@ -138,18 +136,6 @@ find_library(
         LOG_LIB
         log
 )
-find_library(
-        HERMES_LIB
-        hermes
-        PATHS ${HERMES_DIR}
-        NO_CMAKE_FIND_ROOT_PATH
-)
-find_library(
-        JSEXECUTOR_LIB
-        jscexecutor
-        PATHS ${LIBRN_DIR}
-        NO_CMAKE_FIND_ROOT_PATH
-)
 find_library(
         REACT_NATIVE_JNI_LIB
         reactnativejni
@@ -257,7 +243,20 @@ endif()
 
 set_target_properties(${PACKAGE_NAME} PROPERTIES LINKER_LANGUAGE CXX)
 
-if(${FOR_HERMES})
+if(${JS_RUNTIME} STREQUAL "hermes")
+    string(APPEND CMAKE_CXX_FLAGS " -DJS_RUNTIME_HERMES=1")
+    target_include_directories(
+            ${PACKAGE_NAME}
+            PRIVATE
+            "${JS_RUNTIME_DIR}/android/include"
+    )
+    file (GLOB HERMES_DIR "${BUILD_DIR}/third-party-ndk/hermes/jni/${ANDROID_ABI}")
+    find_library(
+            HERMES_LIB
+            hermes
+            PATHS ${HERMES_DIR}
+            NO_CMAKE_FIND_ROOT_PATH
+    )
     target_link_libraries(
             ${PACKAGE_NAME}
             ${LOG_LIB}
@@ -269,7 +268,40 @@ if(${FOR_HERMES})
             ${REACT_NATIVE_JNI_LIB}
             android
     )
+elseif(${JS_RUNTIME} STREQUAL "v8")
+    string(APPEND CMAKE_CXX_FLAGS " -DJS_RUNTIME_V8=1")
+    target_include_directories(
+            ${PACKAGE_NAME}
+            PRIVATE
+            "${JS_RUNTIME_DIR}/src"
+    )
+    file (GLOB V8_SO_DIR "${JS_RUNTIME_DIR}/android/build/intermediates/library_jni/*/jni/${ANDROID_ABI}")
+    find_library(
+            V8EXECUTOR_LIB
+            v8executor
+            PATHS ${V8_SO_DIR}
+            NO_CMAKE_FIND_ROOT_PATH
+    )
+    target_link_libraries(
+            ${PACKAGE_NAME}
+            ${LOG_LIB}
+            ${JSI_LIB}
+            ${FOLLY_LIB}
+            ${V8EXECUTOR_LIB}
+            ${GLOG_LIB}
+            ${FBJNI_LIB}
+            ${REACT_NATIVE_JNI_LIB}
+            android
+    )
 else()
+    set (ignoreMe "${JS_RUNTIME_DIR}")
+    string(APPEND CMAKE_CXX_FLAGS " -DJS_RUNTIME_JSC=1")
+    find_library(
+            JSEXECUTOR_LIB
+            jscexecutor
+            PATHS ${LIBRN_DIR}
+            NO_CMAKE_FIND_ROOT_PATH
+    )
     target_link_libraries(
             ${PACKAGE_NAME}
             ${LOG_LIB}
@@ -278,7 +310,6 @@ else()
             ${JSEXECUTOR_LIB}
             ${GLOG_LIB}
             ${FBJNI_LIB}
-            ${FOLLY_JSON_LIB}
             ${REACT_NATIVE_JNI_LIB}
             android
     )
diff --git a/node_modules/react-native-reanimated/android/CMakeLists.txt.orig b/node_modules/react-native-reanimated/android/CMakeLists.txt.orig
new file mode 100644
index 0000000..d93b7c3
--- /dev/null
+++ b/node_modules/react-native-reanimated/android/CMakeLists.txt.orig
@@ -0,0 +1,310 @@
+cmake_minimum_required(VERSION 3.5.1)
+
+set (CMAKE_VERBOSE_MAKEFILE ON)
+set (CMAKE_CXX_STANDARD 17)
+set (DEFAULT_FLAGS "-DFOLLY_NO_CONFIG=1 -DFOLLY_HAVE_CLOCK_GETTIME=1 -DFOLLY_HAVE_MEMRCHR=1 -DFOLLY_USE_LIBCPP=1 -DFOLLY_MOBILE=1 -DFOLLY_HAVE_RECVMMSG=1 -DFOLLY_HAVE_PTHREAD=1 -DON_ANDROID -DONANDROID -DANDROID -DFOR_HERMES=${FOR_HERMES} -fexceptions -fno-omit-frame-pointer -frtti -Wno-sign-compare -std=c++17 -Wall")
+if(${IS_NEW_ARCHITECTURE_ENABLED})
+    set (ALL_FLAGS "${DEFAULT_FLAGS} -DRCT_NEW_ARCH_ENABLED")
+else()
+    set (ALL_FLAGS ${DEFAULT_FLAGS})
+endif()
+set (CMAKE_CXX_FLAGS ${ALL_FLAGS})
+
+if(${NATIVE_DEBUG})
+    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -g")
+    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g")
+endif()
+
+set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
+set(CMAKE_EXPORT_COMPILE_COMMANDS ON CACHE INTERNAL "")
+
+set (PACKAGE_NAME "reanimated")
+set (BUILD_DIR ${CMAKE_SOURCE_DIR}/build)
+set (SRC_DIR ${CMAKE_SOURCE_DIR}/src)
+
+if(${CLIENT_SIDE_BUILD})
+    set (NODE_MODULES_DIR "${CMAKE_SOURCE_DIR}/../../")
+    set (COMMON_SRC_DIR "${CMAKE_SOURCE_DIR}/../Common")
+else()
+    set (NODE_MODULES_DIR "../${PLAYGROUND_APP_NAME}/node_modules")
+    set (COMMON_SRC_DIR "${SRC_DIR}/main/Common")
+endif()
+
+if(${IS_NEW_ARCHITECTURE_ENABLED})
+    if(${CLIENT_SIDE_BUILD})
+        set (RN_SO_DIR "${CMAKE_SOURCE_DIR}/../../../android/app/build/react-ndk/exported")
+        set (FBJNI_HEADERS_DIR "${CMAKE_SOURCE_DIR}/../../react-native/ReactAndroid/src/main/jni/first-party/fbjni/headers")
+    else()
+        set (RN_SO_DIR "${CMAKE_SOURCE_DIR}/../${PLAYGROUND_APP_NAME}/android/app/build/react-ndk/exported")
+        set (FBJNI_HEADERS_DIR "${CMAKE_SOURCE_DIR}/../${PLAYGROUND_APP_NAME}/node_modules/react-native/ReactAndroid/src/main/jni/first-party/fbjni/headers")
+    endif()
+else()
+    set (RN_SO_DIR ${NODE_MODULES_DIR}/react-native/ReactAndroid/src/main/jni/first-party/react/jni)
+    set (FBJNI_HEADERS_DIR "${NODE_MODULES_DIR}/react-native/ReactAndroid/src/main/jni/first-party/fbjni/headers")
+endif()
+
+file (GLOB LIBRN_DIR "${RN_SO_DIR}/${ANDROID_ABI}")
+file (GLOB HERMES_DIR "${BUILD_DIR}/third-party-ndk/hermes/jni/${ANDROID_ABI}")
+
+file(GLOB sources_tools  "${COMMON_SRC_DIR}/cpp/Tools/*.cpp")
+file(GLOB sources_native_modules  "${COMMON_SRC_DIR}/cpp/NativeModules/*.cpp")
+file(GLOB sources_shared_items  "${COMMON_SRC_DIR}/cpp/SharedItems/*.cpp")
+file(GLOB sources_registries  "${COMMON_SRC_DIR}/cpp/Registries/*.cpp")
+file(GLOB sources_android  "${SRC_DIR}/main/cpp/*.cpp")
+
+if(${REACT_NATIVE_TARGET_VERSION} LESS 66)
+        set (
+                INCLUDE_JSI_CPP
+                "${NODE_MODULES_DIR}/react-native/ReactCommon/jsi/jsi/jsi.cpp"
+        )
+        set (
+                INCLUDE_JSIDYNAMIC_CPP
+                "${NODE_MODULES_DIR}/react-native/ReactCommon/jsi/jsi/JSIDynamic.cpp"
+        )
+endif()
+
+if(${IS_NEW_ARCHITECTURE_ENABLED})
+    set(
+        FABRIC_UTILS_CPP
+        "${COMMON_SRC_DIR}/cpp/Fabric/FabricUtils.cpp"
+    )
+    set(
+        REANIMATED_UI_MANAGER_BINDING_CPP
+        "${COMMON_SRC_DIR}/cpp/Fabric/ReanimatedUIManagerBinding.cpp"
+    )
+endif()
+
+add_library(
+        ${PACKAGE_NAME}
+        SHARED
+        ${sources_native_modules}
+        ${sources_shared_items}
+        ${sources_registries}
+        ${sources_android}
+        ${source_tools}
+        ${INCLUDE_JSI_CPP}
+        ${INCLUDE_JSIDYNAMIC_CPP}
+        "${COMMON_SRC_DIR}/cpp/Tools/JSIStoreValueUser.cpp"
+        "${COMMON_SRC_DIR}/cpp/Tools/Mapper.cpp"
+        "${COMMON_SRC_DIR}/cpp/Tools/RuntimeDecorator.cpp"
+        "${COMMON_SRC_DIR}/cpp/Tools/Scheduler.cpp"
+        "${COMMON_SRC_DIR}/cpp/Tools/WorkletEventHandler.cpp"
+        "${COMMON_SRC_DIR}/cpp/Tools/FeaturesConfig.cpp"
+        "${COMMON_SRC_DIR}/cpp/LayoutAnimations/LayoutAnimationsProxy.cpp"
+        "${COMMON_SRC_DIR}/cpp/AnimatedSensor/AnimatedSensorModule.cpp"
+        ${FABRIC_UTILS_CPP}
+        ${REANIMATED_UI_MANAGER_BINDING_CPP}
+)
+
+# includes
+
+file (GLOB LIBFBJNI_INCLUDE_DIR ${FBJNI_HEADERS_DIR})
+
+target_include_directories(
+        ${PACKAGE_NAME}
+        PRIVATE
+        "${LIBFBJNI_INCLUDE_DIR}"
+        "${BUILD_DIR}/third-party-ndk/boost/boost_${BOOST_VERSION}"
+        "${BUILD_DIR}/third-party-ndk/double-conversion"
+        "${BUILD_DIR}/third-party-ndk/folly"
+        "${BUILD_DIR}/third-party-ndk/glog/exported"
+        "${NODE_MODULES_DIR}/react-native/React"
+        "${NODE_MODULES_DIR}/react-native/React/Base"
+        "${NODE_MODULES_DIR}/react-native/ReactAndroid/src/main/jni"
+        "${NODE_MODULES_DIR}/react-native/ReactAndroid/src/main/java/com/facebook/react/turbomodule/core/jni"
+        "${NODE_MODULES_DIR}/react-native/ReactAndroid/src/main/java/com/facebook/react/fabric/jni"
+        "${NODE_MODULES_DIR}/react-native/ReactCommon"
+        "${NODE_MODULES_DIR}/react-native/ReactCommon/callinvoker"
+        "${NODE_MODULES_DIR}/react-native/ReactCommon/jsi"
+        "${NODE_MODULES_DIR}/react-native/ReactCommon/react/renderer/graphics/platform/cxx"
+        "${NODE_MODULES_DIR}/react-native/ReactCommon/runtimeexecutor"
+        "${NODE_MODULES_DIR}/react-native/ReactCommon/turbomodule/core"
+        "${NODE_MODULES_DIR}/react-native/ReactCommon/turbomodule"
+        "${NODE_MODULES_DIR}/react-native/ReactCommon/yoga"
+        "${NODE_MODULES_DIR}/hermes-engine/android/include/"
+        "${COMMON_SRC_DIR}/cpp/headers/Tools"
+        "${COMMON_SRC_DIR}/cpp/headers/SpecTools"
+        "${COMMON_SRC_DIR}/cpp/headers/NativeModules"
+        "${COMMON_SRC_DIR}/cpp/headers/SharedItems"
+        "${COMMON_SRC_DIR}/cpp/headers/Registries"
+        "${COMMON_SRC_DIR}/cpp/headers/LayoutAnimations"
+        "${COMMON_SRC_DIR}/cpp/headers/AnimatedSensor"
+        "${COMMON_SRC_DIR}/cpp/headers/Fabric"
+        "${COMMON_SRC_DIR}/cpp/hidden_headers"
+        "${SRC_DIR}/main/cpp/headers"
+)
+
+find_library(
+        LOG_LIB
+        log
+)
+find_library(
+        HERMES_LIB
+        hermes
+        PATHS ${HERMES_DIR}
+        NO_CMAKE_FIND_ROOT_PATH
+)
+find_library(
+        JSEXECUTOR_LIB
+        jscexecutor
+        PATHS ${LIBRN_DIR}
+        NO_CMAKE_FIND_ROOT_PATH
+)
+find_library(
+        REACT_NATIVE_JNI_LIB
+        reactnativejni
+        PATHS ${LIBRN_DIR}
+        NO_CMAKE_FIND_ROOT_PATH
+)
+find_library(
+        GLOG_LIB
+        glog
+        PATHS ${LIBRN_DIR}
+        NO_CMAKE_FIND_ROOT_PATH
+)
+find_library(
+        FBJNI_LIB
+        fbjni
+        PATHS ${LIBRN_DIR}
+        NO_CMAKE_FIND_ROOT_PATH
+)
+
+if(${REACT_NATIVE_TARGET_VERSION} LESS 69)
+    find_library(
+            FOLLY_LIB
+            folly_json
+            PATHS ${LIBRN_DIR}
+            NO_CMAKE_FIND_ROOT_PATH
+    )
+else()
+    find_library(
+            FOLLY_LIB
+            folly_runtime
+            PATHS ${LIBRN_DIR}
+            NO_CMAKE_FIND_ROOT_PATH
+    )
+endif()
+
+if(${REACT_NATIVE_TARGET_VERSION} LESS 66)
+    set (JSI_LIB "")
+else()
+    find_library(
+            JSI_LIB
+            jsi
+            PATHS ${LIBRN_DIR}
+            NO_CMAKE_FIND_ROOT_PATH
+    )
+endif()
+
+if(${IS_NEW_ARCHITECTURE_ENABLED})
+    find_library(
+            REACT_RENDER_UIMANAGER
+            react_render_uimanager
+            PATHS ${LIBRN_DIR}
+            NO_CMAKE_FIND_ROOT_PATH
+    )
+    find_library(
+            REACT_RENDER_MOUNTING
+            react_render_mounting
+            PATHS ${LIBRN_DIR}
+            NO_CMAKE_FIND_ROOT_PATH
+    )
+    find_library(
+            REACT_RENDER_COMPONENTREGISTRY
+            react_render_componentregistry
+            PATHS ${LIBRN_DIR}
+            NO_CMAKE_FIND_ROOT_PATH
+    )
+    find_library(
+            REACT_RENDER_CORE
+            react_render_core
+            PATHS ${LIBRN_DIR}
+            NO_CMAKE_FIND_ROOT_PATH
+    )
+    find_library(
+            REACT_DEBUG
+            react_debug
+            PATHS ${LIBRN_DIR}
+            NO_CMAKE_FIND_ROOT_PATH
+    )
+    find_library(
+            REACT_RENDER_DEBUG
+            react_render_debug
+            PATHS ${LIBRN_DIR}
+            NO_CMAKE_FIND_ROOT_PATH
+    )
+    find_library(
+            RRC_ROOT
+            rrc_root
+            PATHS ${LIBRN_DIR}
+            NO_CMAKE_FIND_ROOT_PATH
+    )
+    find_library(
+            REACT_RENDER_SCHEDULER
+            react_render_scheduler
+            PATHS ${LIBRN_DIR}
+            NO_CMAKE_FIND_ROOT_PATH
+    )
+    find_library(
+            FABRICJNI
+            fabricjni
+            PATHS ${LIBRN_DIR}
+            NO_CMAKE_FIND_ROOT_PATH
+    )
+endif()
+
+# build shared lib
+
+set_target_properties(${PACKAGE_NAME} PROPERTIES LINKER_LANGUAGE CXX)
+
+if(${FOR_HERMES})
+    target_link_libraries(
+            ${PACKAGE_NAME}
+            ${LOG_LIB}
+            ${JSI_LIB}
+            ${HERMES_LIB}
+            ${GLOG_LIB}
+            ${FBJNI_LIB}
+            ${FOLLY_LIB}
+            ${REACT_NATIVE_JNI_LIB}
+            android
+    )
+else()
+    target_link_libraries(
+            ${PACKAGE_NAME}
+            ${LOG_LIB}
+            ${JSI_LIB}
+            ${FOLLY_LIB}
+            ${JSEXECUTOR_LIB}
+            ${GLOG_LIB}
+            ${FBJNI_LIB}
+            ${FOLLY_JSON_LIB}
+            ${REACT_NATIVE_JNI_LIB}
+            android
+    )
+endif()
+
+if(${IS_NEW_ARCHITECTURE_ENABLED})
+    target_link_libraries(
+            ${PACKAGE_NAME}
+            ${REACT_RENDER_UIMANAGER}
+            ${REACT_RENDER_MOUNTING}
+            ${REACT_RENDER_COMPONENTREGISTRY}
+            ${REACT_RENDER_CORE}
+            ${REACT_DEBUG}
+            ${REACT_RENDER_DEBUG}
+            ${RRC_ROOT}
+            ${FABRICJNI}
+            ${REACT_RENDER_SCHEDULER}
+    )
+endif()
+
+if(${REACT_NATIVE_TARGET_VERSION} LESS 64)
+    add_library(
+            turbomodulejsijni
+            # Sets the library as a shared library.
+            SHARED
+            # Provides a relative path to your source file(s).
+            ./empty.cpp
+    )
+endif()
diff --git a/node_modules/react-native-reanimated/android/build.gradle b/node_modules/react-native-reanimated/android/build.gradle
index 8108042..be24d72 100644
--- a/node_modules/react-native-reanimated/android/build.gradle
+++ b/node_modules/react-native-reanimated/android/build.gradle
@@ -134,13 +134,36 @@ def thirdPartyNdkDir = new File("$buildDir/third-party-ndk")
 def reactNativeThirdParty = new File("$reactNative/ReactAndroid/src/main/jni/third-party")
 
 def _stackProtectorFlag = true
-def FOR_HERMES = ""
 
-if (findProject(":app")) {
-    FOR_HERMES = project(":app").ext.react.enableHermes
-} else {
-    FOR_HERMES = System.getenv("FOR_HERMES") == "True"
-}
+def CMAKE_NODE_MODULES_DIR = CLIENT_SIDE_BUILD
+    ? project.getProjectDir().getParentFile().getParent()
+    : Paths.get(project.getProjectDir().getParent(), getPlaygroundAppName(), "node_modules").toString()
+
+def JS_RUNTIME = {
+    // Returns the js runtime explicitly requested in the environment variable
+    if (System.getenv("JS_RUNTIME")) {
+        return System.getenv("JS_RUNTIME")
+    }
+
+    // Detect js runtime from project setup
+    def defaultRuntimeType = "jsc";
+    def v8Project = rootProject.getSubprojects().find { project -> project.name == "react-native-v8" }
+    if (v8Project != null) {
+        return "v8"
+    }
+    def appProject = findProject(":app") ? project(":app") : null
+    return appProject?.ext?.react?.enableHermes ? "hermes" : defaultRuntimeType
+}.call()
+
+def jsRuntimeDir = {
+    if (JS_RUNTIME == "hermes") {
+        return Paths.get(CMAKE_NODE_MODULES_DIR, "hermes-engine")
+    } else if (JS_RUNTIME == "v8") {
+        return findProject(":react-native-v8").getProjectDir().getParent()
+    } else {
+        return Paths.get(CMAKE_NODE_MODULES_DIR, "react-native", "ReactCommon", "jsi")
+    }
+}.call()
 
 def reactNativeArchitectures() {
     def value = project.getProperties().get("reactNativeArchitectures")
@@ -205,7 +228,9 @@ android {
                         "-DREACT_NATIVE_TARGET_VERSION=${REACT_VERSION}",
                         "-DANDROID_TOOLCHAIN=clang",
                         "-DBOOST_VERSION=${BOOST_VERSION}",
-                        "-DFOR_HERMES=${FOR_HERMES}",
+                        "-DNODE_MODULES_DIR=${CMAKE_NODE_MODULES_DIR}",
+                        "-DJS_RUNTIME=${JS_RUNTIME}",
+                        "-DJS_RUNTIME_DIR=${jsRuntimeDir}",
                         "-DCLIENT_SIDE_BUILD=${CLIENT_SIDE_BUILD}",
                         "-DIS_NEW_ARCHITECTURE_ENABLED=${isNewArchitectureEnabled()}",
                         "-DPLAYGROUND_APP_NAME=${getPlaygroundAppName()}"
@@ -237,6 +262,7 @@ android {
                 "**/libhermes.so",
                 "**/libreactnativejni.so",
                 "**/libjscexecutor.so",
+                "**/libv8executor.so",
         ]
     }
     tasks.withType(JavaCompile) {
@@ -409,22 +435,24 @@ task prepareGlog(dependsOn: dependenciesPath ? [] : [downloadGlog], type: Copy)
 }
 
 task prepareHermes() {
-    def hermesPackagePath = findNodeModulePath(projectDir, "hermes-engine")
-    if (!hermesPackagePath) {
-        throw new GradleScriptException("Could not find the hermes-engine npm package", null)
-    }
+    doLast {
+        def hermesPackagePath = findNodeModulePath(projectDir, "hermes-engine")
+        if (!hermesPackagePath) {
+            throw new GradleScriptException("Could not find the hermes-engine npm package", null)
+        }
 
-    def hermesAAR = file("$hermesPackagePath/android/hermes-debug.aar")
-    if (!hermesAAR.exists()) {
-        throw new GradleScriptException("The hermes-engine npm package is missing \"android/hermes-debug.aar\"", null)
-    }
+        def hermesAAR = file("$hermesPackagePath/android/hermes-debug.aar")
+        if (!hermesAAR.exists()) {
+            throw new GradleScriptException("The hermes-engine npm package is missing \"android/hermes-debug.aar\"", null)
+        }
 
-    def soFiles = zipTree(hermesAAR).matching({ it.include "**/*.so" })
+        def soFiles = zipTree(hermesAAR).matching({ it.include "**/*.so" })
 
-    copy {
-        from soFiles
-        from "$reactNative/ReactAndroid/src/main/jni/first-party/hermes/Android.mk"
-        into "$thirdPartyNdkDir/hermes"
+        copy {
+            from soFiles
+            from "$reactNative/ReactAndroid/src/main/jni/first-party/hermes/Android.mk"
+            into "$thirdPartyNdkDir/hermes"
+        }
     }
 }
 
@@ -579,6 +607,18 @@ afterEvaluate {
             task.dependsOn(packageNdkLibs)
         }
     })
+
+    if (JS_RUNTIME == "hermes") {
+      extractAARHeaders.dependsOn(prepareHermes)
+      extractSOFiles.dependsOn(prepareHermes)
+    } else if (JS_RUNTIME == "v8") {
+        def buildTasks = tasks.findAll({ task ->
+            !task.name.contains("Clean") && (task.name.contains("externalNative") || task.name.contains("CMake") || task.name.startsWith("generateJsonModel")) })
+        buildTasks.forEach { task ->
+            def buildType = task.name.endsWith('Debug') ? 'Debug' : 'Release'
+            task.dependsOn(":react-native-v8:copy${buildType}JniLibsProjectOnly")
+        }
+    }
 }
 
 if (CLIENT_SIDE_BUILD) {
diff --git a/node_modules/react-native-reanimated/android/build.gradle.orig b/node_modules/react-native-reanimated/android/build.gradle.orig
new file mode 100644
index 0000000..8108042
--- /dev/null
+++ b/node_modules/react-native-reanimated/android/build.gradle.orig
@@ -0,0 +1,591 @@
+import com.android.Version
+
+import java.nio.file.Paths
+import org.apache.tools.ant.filters.ReplaceTokens
+import groovy.json.JsonSlurper
+
+/**
+ * Finds the path of the installed npm package with the given name using Node's
+ * module resolution algorithm, which searches "node_modules" directories up to
+ * the file system root. This handles various cases, including:
+ *
+ *   - Working in the open-source RN repo:
+ *       Gradle: /path/to/react-native/ReactAndroid
+ *       Node module: /path/to/react-native/node_modules/[package]
+ *
+ *   - Installing RN as a dependency of an app and searching for hoisted
+ *     dependencies:
+ *       Gradle: /path/to/app/node_modules/react-native/ReactAndroid
+ *       Node module: /path/to/app/node_modules/[package]
+ *
+ *   - Working in a larger repo (e.g., Facebook) that contains RN:
+ *       Gradle: /path/to/repo/path/to/react-native/ReactAndroid
+ *       Node module: /path/to/repo/node_modules/[package]
+ *
+ * The search begins at the given base directory (a File object). The returned
+ * path is a string.
+ */
+static def findNodeModulePath(baseDir, packageName) {
+    def basePath = baseDir.toPath().normalize()
+    // Node's module resolution algorithm searches up to the root directory,
+    // after which the base path will be null
+    while (basePath) {
+        def candidatePath = Paths.get(basePath.toString(), "node_modules", packageName)
+        if (candidatePath.toFile().exists()) {
+            return candidatePath.toString()
+        }
+        basePath = basePath.getParent()
+    }
+    return null
+}
+
+def safeExtGet(prop, fallback) {
+    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
+}
+
+def resolveBuildType() {
+    def buildType = System.getenv("CLIENT_SIDE_BUILD")
+    if (buildType != null) {
+        return buildType == "True"
+    }
+
+    if (hasProperty("clientSideBuild")) {
+        return property("clientSideBuild") == "true"
+    }
+
+    if (isDeveloperMode()) {
+        return false
+    }
+
+    return true
+}
+
+def isDeveloperMode() {
+    // developer mode, to run Example app
+    return file("$projectDir/../node_modules/react-native/package.json").exists()
+}
+
+def isNewArchitectureEnabled() {
+    // To opt-in for the New Architecture, you can either:
+    // - Set `newArchEnabled` to true inside the `gradle.properties` file
+    // - Invoke gradle with `-newArchEnabled=true`
+    // - Set an environment variable `ORG_GRADLE_PROJECT_newArchEnabled=true`
+    return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
+}
+
+def resolveReactNativeDirectory() {
+    if (isDeveloperMode()) {
+        return file("$projectDir/../${getPlaygroundAppName()}/node_modules/react-native")
+    }
+    return file("$projectDir/../../react-native")
+}
+
+def getPlaygroundAppName() { // only for the development
+    String playgroundAppName = ""
+    try {
+        rootProject.getSubprojects().forEach({project ->
+            if (project.plugins.hasPlugin("com.android.application")) {
+                var projectCatalogAbsolutePath = project.projectDir.toString().replace("/android/app", "")
+                var slashPosition = projectCatalogAbsolutePath.lastIndexOf("/")
+                playgroundAppName = projectCatalogAbsolutePath.substring(slashPosition + 1)
+            }
+        })
+    } catch(_) {
+        return "NOT_FOUND"
+    }
+    return playgroundAppName
+}
+
+boolean CLIENT_SIDE_BUILD = resolveBuildType()
+if (CLIENT_SIDE_BUILD) {
+    configurations.maybeCreate("default")
+}
+def reactNative = resolveReactNativeDirectory()
+def reactNativeManifest = file("$reactNative/package.json")
+def reactNativeManifestAsJson = new JsonSlurper().parseText(reactNativeManifest.text)
+def reactNativeVersion = reactNativeManifestAsJson.version as String
+def (major, minor, patch) = reactNativeVersion.tokenize('.')
+def rnMinorVersion = Integer.parseInt(minor)
+
+def localProps = new Properties()
+def localPropertiesFile = file("local.properties")
+if (localPropertiesFile.exists()) {
+    localProps.load(new InputStreamReader(new FileInputStream(localPropertiesFile), "UTF-8"))
+}
+
+def debugNativeLibraries = localProps.getProperty('NATIVE_DEBUG_ON', 'FALSE').toBoolean()
+def reactProperties = new Properties()
+file("$reactNative/ReactAndroid/gradle.properties").withInputStream { reactProperties.load(it) }
+
+def BOOST_VERSION = reactProperties.getProperty("BOOST_VERSION")
+def DOUBLE_CONVERSION_VERSION = reactProperties.getProperty("DOUBLE_CONVERSION_VERSION")
+def FOLLY_VERSION = reactProperties.getProperty("FOLLY_VERSION")
+def GLOG_VERSION = reactProperties.getProperty("GLOG_VERSION")
+def REACT_VERSION = reactProperties.getProperty("VERSION_NAME").split("\\.")[1].toInteger()
+def FBJNI_VERSION = "0.3.0"
+
+// We download various C++ open-source dependencies into downloads.
+// We then copy both the downloaded code and our custom makefiles and headers into third-party-ndk.
+// After that we build native code from src/main/jni with module path pointing at third-party-ndk.
+
+def downloadsDir = new File("$buildDir/downloads")
+def thirdPartyNdkDir = new File("$buildDir/third-party-ndk")
+
+def reactNativeThirdParty = new File("$reactNative/ReactAndroid/src/main/jni/third-party")
+
+def _stackProtectorFlag = true
+def FOR_HERMES = ""
+
+if (findProject(":app")) {
+    FOR_HERMES = project(":app").ext.react.enableHermes
+} else {
+    FOR_HERMES = System.getenv("FOR_HERMES") == "True"
+}
+
+def reactNativeArchitectures() {
+    def value = project.getProperties().get("reactNativeArchitectures")
+    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
+}
+
+// You need to have following folders in this directory:
+//   - boost_1_63_0
+//   - double-conversion-1.1.6
+//   - folly-deprecate-dynamic-initializer
+//   - glog-0.3.5
+def dependenciesPath = System.getenv("REACT_NATIVE_DEPENDENCIES")
+
+// The Boost library is a very large download (>100MB).
+// If Boost is already present on your system, define the REACT_NATIVE_BOOST_PATH env variable
+// and the build will use that.
+def boostPath = dependenciesPath ?: System.getenv("REACT_NATIVE_BOOST_PATH")
+
+def follyReplaceContent = '''
+  ssize_t r;
+  do {
+    r = open(name, flags, mode);
+  } while (r == -1 && errno == EINTR);
+  return r;
+'''
+
+buildscript {
+    repositories {
+        google()
+        mavenCentral()
+        maven {
+            url "https://plugins.gradle.org/m2/"
+        }
+    }
+    dependencies {
+        classpath "com.android.tools.build:gradle:4.2.2"
+        classpath "de.undercouch:gradle-download-task:4.1.2"
+        classpath "com.diffplug.spotless:spotless-plugin-gradle:5.15.0"
+    }
+}
+
+if (project == rootProject) {
+    apply from: "spotless.gradle"
+}
+
+apply plugin: "com.android.library"
+apply plugin: "maven-publish"
+apply plugin: "de.undercouch.download"
+
+android {
+    compileSdkVersion safeExtGet("compileSdkVersion", 30)
+    defaultConfig {
+        minSdkVersion safeExtGet("minSdkVersion", 16)
+        targetSdkVersion safeExtGet("targetSdkVersion", 30)
+        versionCode 1
+        versionName "1.0"
+        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
+        externalNativeBuild {
+            cmake {
+                arguments "-DANDROID_STL=c++_shared",
+                        "-DNATIVE_DEBUG=${debugNativeLibraries}",
+                        "-DREACT_NATIVE_TARGET_VERSION=${REACT_VERSION}",
+                        "-DANDROID_TOOLCHAIN=clang",
+                        "-DBOOST_VERSION=${BOOST_VERSION}",
+                        "-DFOR_HERMES=${FOR_HERMES}",
+                        "-DCLIENT_SIDE_BUILD=${CLIENT_SIDE_BUILD}",
+                        "-DIS_NEW_ARCHITECTURE_ENABLED=${isNewArchitectureEnabled()}",
+                        "-DPLAYGROUND_APP_NAME=${getPlaygroundAppName()}"
+                abiFilters (*reactNativeArchitectures())
+                _stackProtectorFlag ? (cppFlags("-fstack-protector-all")) : null
+            }
+        }
+
+        buildConfigField("boolean", "IS_INTERNAL_BUILD", "false")
+        buildConfigField("int", "EXOPACKAGE_FLAGS", "0")
+    }
+    externalNativeBuild {
+        cmake {
+            path "CMakeLists.txt"
+        }
+    }
+    lintOptions {
+        abortOnError false
+    }
+    packagingOptions {
+        println "Native libs debug enabled: ${debugNativeLibraries}"
+        doNotStrip debugNativeLibraries ? "**/**/*.so" : ''
+        excludes = [
+                "**/libc++_shared.so",
+                "**/libfbjni.so",
+                "**/libjsi.so",
+                "**/libfolly_json.so",
+                "**/libglog.so",
+                "**/libhermes.so",
+                "**/libreactnativejni.so",
+                "**/libjscexecutor.so",
+        ]
+    }
+    tasks.withType(JavaCompile) {
+        compileTask ->
+            compileTask.dependsOn(packageNdkLibs)
+    }
+    configurations {
+        extractHeaders
+        extractSO
+    }
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
+    packagingOptions {
+        // For some reason gradle only complains about the duplicated version of libreact_render libraries
+        // while there are more libraries copied in intermediates folder of the lib build directory, we exlude
+        // only the ones that make the build fail (ideally we should only include librnscreens_modules but we
+        // are only allowed to specify exlude patterns)
+        exclude "**/libreact_render*.so"
+    }
+    sourceSets.main {
+        java {
+            if (isNewArchitectureEnabled()) {
+                srcDirs += [
+                        "src/fabric/java",
+                ]
+            } else {
+                srcDirs += [
+                        "src/paper/java",
+                ]
+            }
+        }
+    }
+}
+
+task cleanCmakeCache() {
+    tasks.getByName("clean").dependsOn(cleanCmakeCache)
+    doFirst {
+        delete "${projectDir}/.cxx"
+    }
+}
+
+task printVersions {
+    println "Android gradle plugin: ${Version.ANDROID_GRADLE_PLUGIN_VERSION}"
+    println "Gradle: ${project.gradle.gradleVersion}"
+}
+
+task Log {
+    println("building Reanimated2")
+}
+
+task applyJavaPatches(type: Copy) {
+    def patchDirectory = file("${projectDir}/rnVersionPatch/${rnMinorVersion}")
+    if (patchDirectory.exists()) {
+        from ("${patchDirectory}") {
+            include "**/*.java"
+        }
+        into ("${projectDir}/src/main/java/com/swmansion/reanimated")
+    }
+}
+
+task createNativeDepsDirectories(dependsOn: applyJavaPatches) {
+    downloadsDir.mkdirs()
+    thirdPartyNdkDir.mkdirs()
+}
+
+task downloadBoost(dependsOn: createNativeDepsDirectories, type: Download) {
+    def transformedVersion = BOOST_VERSION.replace("_", ".")
+    def srcUrl = "https://boostorg.jfrog.io/artifactory/main/release/${transformedVersion}/source/boost_${BOOST_VERSION}.tar.gz"
+    if (rnMinorVersion < 69) {
+        srcUrl = "https://github.com/react-native-community/boost-for-react-native/releases/download/v${transformedVersion}-0/boost_${BOOST_VERSION}.tar.gz"
+    }
+    src(srcUrl)
+    onlyIfNewer(true)
+    overwrite(false)
+    dest(new File(downloadsDir, "boost_${BOOST_VERSION}.tar.gz"))
+}
+
+task prepareBoost(dependsOn: boostPath ? [] : [downloadBoost], type: Copy) {
+    from(boostPath ?: tarTree(resources.gzip(downloadBoost.dest)))
+    from("$reactNativeThirdParty/boost/Android.mk")
+    include("Android.mk", "boost_${BOOST_VERSION}/boost/**/*.hpp", "boost/boost/**/*.hpp")
+    includeEmptyDirs = false
+    into("$thirdPartyNdkDir/boost")
+    doLast {
+        file("$thirdPartyNdkDir/boost/boost").renameTo("$thirdPartyNdkDir/boost/boost_${BOOST_VERSION}")
+    }
+}
+
+task downloadDoubleConversion(dependsOn: createNativeDepsDirectories, type: Download) {
+    src("https://github.com/google/double-conversion/archive/v${DOUBLE_CONVERSION_VERSION}.tar.gz")
+    onlyIfNewer(true)
+    overwrite(false)
+    dest(new File(downloadsDir, "double-conversion-${DOUBLE_CONVERSION_VERSION}.tar.gz"))
+}
+
+task prepareDoubleConversion(dependsOn: dependenciesPath ? [] : [downloadDoubleConversion], type: Copy) {
+    from(dependenciesPath ?: tarTree(downloadDoubleConversion.dest))
+    from("$reactNativeThirdParty/double-conversion/Android.mk")
+    include("double-conversion-${DOUBLE_CONVERSION_VERSION}/src/**/*", "Android.mk")
+    filesMatching("*/src/**/*", { fname -> fname.path = "double-conversion/${fname.name}" })
+    includeEmptyDirs = false
+    into("$thirdPartyNdkDir/double-conversion")
+}
+
+task downloadFolly(dependsOn: createNativeDepsDirectories, type: Download) {
+    src("https://github.com/facebook/folly/archive/v${FOLLY_VERSION}.tar.gz")
+    onlyIfNewer(true)
+    overwrite(false)
+    dest(new File(downloadsDir, "folly-${FOLLY_VERSION}.tar.gz"))
+}
+
+task prepareFolly(dependsOn: dependenciesPath ? [] : [downloadFolly], type: Copy) {
+    from(dependenciesPath ?: tarTree(downloadFolly.dest))
+    from("$reactNativeThirdParty/folly/Android.mk")
+    include("folly-${FOLLY_VERSION}/folly/**/*", "Android.mk")
+    eachFile { fname -> fname.path = (fname.path - "folly-${FOLLY_VERSION}/") }
+    // Fixes problem with Folly failing to build on certain systems. See
+    // https://github.com/software-mansion/react-native-reanimated/issues/1024
+    filter { line -> line.replaceAll("return int\\(wrapNoInt\\(open, name, flags, mode\\)\\);", follyReplaceContent) }
+    includeEmptyDirs = false
+    into("$thirdPartyNdkDir/folly")
+}
+
+task downloadGlog(dependsOn: createNativeDepsDirectories, type: Download) {
+    src("https://github.com/google/glog/archive/v${GLOG_VERSION}.tar.gz")
+    onlyIfNewer(true)
+    overwrite(false)
+    dest(new File(downloadsDir, "glog-${GLOG_VERSION}.tar.gz"))
+}
+
+// Prepare glog sources to be compiled, this task will perform steps that normally should've been
+// executed by automake. This way we can avoid dependencies on make/automake
+task prepareGlog(dependsOn: dependenciesPath ? [] : [downloadGlog], type: Copy) {
+    duplicatesStrategy = "include"
+    from(dependenciesPath ?: tarTree(downloadGlog.dest))
+    from("$reactNativeThirdParty/glog/")
+    include("glog-${GLOG_VERSION}/src/**/*", "Android.mk", "config.h")
+    includeEmptyDirs = false
+    filesMatching("**/*.h.in") {
+        filter(ReplaceTokens, tokens: [
+                ac_cv_have_unistd_h           : "1",
+                ac_cv_have_stdint_h           : "1",
+                ac_cv_have_systypes_h         : "1",
+                ac_cv_have_inttypes_h         : "1",
+                ac_cv_have_libgflags          : "0",
+                ac_google_start_namespace     : "namespace google {",
+                ac_cv_have_uint16_t           : "1",
+                ac_cv_have_u_int16_t          : "1",
+                ac_cv_have___uint16           : "0",
+                ac_google_end_namespace       : "}",
+                ac_cv_have___builtin_expect   : "1",
+                ac_google_namespace           : "google",
+                ac_cv___attribute___noinline  : "__attribute__ ((noinline))",
+                ac_cv___attribute___noreturn  : "__attribute__ ((noreturn))",
+                ac_cv___attribute___printf_4_5: "__attribute__((__format__ (__printf__, 4, 5)))"
+        ])
+        it.path = (it.name - ".in")
+    }
+    into("$thirdPartyNdkDir/glog")
+
+    doLast {
+        copy {
+            from(fileTree(dir: "$thirdPartyNdkDir/glog", includes: ["stl_logging.h", "logging.h", "raw_logging.h", "vlog_is_on.h", "**/src/glog/log_severity.h"]).files)
+            includeEmptyDirs = false
+            into("$thirdPartyNdkDir/glog/exported/glog")
+        }
+    }
+}
+
+task prepareHermes() {
+    def hermesPackagePath = findNodeModulePath(projectDir, "hermes-engine")
+    if (!hermesPackagePath) {
+        throw new GradleScriptException("Could not find the hermes-engine npm package", null)
+    }
+
+    def hermesAAR = file("$hermesPackagePath/android/hermes-debug.aar")
+    if (!hermesAAR.exists()) {
+        throw new GradleScriptException("The hermes-engine npm package is missing \"android/hermes-debug.aar\"", null)
+    }
+
+    def soFiles = zipTree(hermesAAR).matching({ it.include "**/*.so" })
+
+    copy {
+        from soFiles
+        from "$reactNative/ReactAndroid/src/main/jni/first-party/hermes/Android.mk"
+        into "$thirdPartyNdkDir/hermes"
+    }
+}
+
+task prepareJSC {
+    doLast {
+        def jscPackagePath = findNodeModulePath(projectDir, "jsc-android")
+        if (!jscPackagePath) {
+            throw new GradleScriptException("Could not find the jsc-android npm package", null)
+        }
+
+        def jscDist = file("$jscPackagePath/dist")
+        if (!jscDist.exists()) {
+            throw new GradleScriptException("The jsc-android npm package is missing its \"dist\" directory", null)
+        }
+
+        def jscAAR = fileTree(jscDist).matching({ it.include "**/android-jsc/**/*.aar" }).singleFile
+        def soFiles = zipTree(jscAAR).matching({ it.include "**/*.so" })
+
+        def headerFiles = fileTree(jscDist).matching({ it.include "**/include/*.h" })
+
+        copy {
+            from(soFiles)
+            from(headerFiles)
+            from("$reactNative/ReactAndroid/src/main/jni/third-party/jsc/Android.mk")
+
+            filesMatching("**/*.h", { it.path = "JavaScriptCore/${it.name}" })
+
+            includeEmptyDirs(false)
+            into("$thirdPartyNdkDir/jsc")
+        }
+    }
+}
+
+task extractAARHeaders {
+    doLast {
+        configurations.extractHeaders.files.each {
+            def file = it.absoluteFile
+            def packageName = file.name.tokenize('-')[0]
+            copy {
+                from zipTree(file)
+                into "$reactNative/ReactAndroid/src/main/jni/first-party/$packageName/headers"
+                include "**/*.h"
+            }
+        }
+    }
+}
+
+task extractSOFiles {
+    doLast {
+        configurations.extractSO.files.each {
+            def file = it.absoluteFile
+            def packageName = file.name.tokenize('-')[0]
+            copy {
+                from zipTree(file)
+                into "$reactNative/ReactAndroid/src/main/jni/first-party/$packageName/"
+                include "jni/**/*.so"
+            }
+        }
+    }
+}
+
+task packageNdkLibs(type: Copy) {
+    from("$buildDir/reanimated-ndk/all")
+    include("**/libreanimated.so")
+    if(REACT_VERSION < 64) {
+        include("**/libturbomodulejsijni.so")
+    }
+    into("$projectDir/src/main/jniLibs")
+}
+
+repositories {
+    mavenCentral()
+    mavenLocal()
+    maven {
+        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
+        url "$reactNative/android"
+    }
+    maven {
+        // Android JSC is installed from npm
+        url "$reactNative/../jsc-android/dist"
+    }
+    google()
+}
+
+dependencies {
+    // noinspection GradleDynamicVersion
+    implementation "com.facebook.yoga:proguard-annotations:1.19.0"
+    if (isDeveloperMode() && !isNewArchitectureEnabled()) {
+        implementation "com.facebook.fbjni:fbjni:" + FBJNI_VERSION
+    }
+    else {
+        implementation "com.facebook.fbjni:fbjni-java-only:" + FBJNI_VERSION
+    }
+    implementation "com.facebook.react:react-native:+" // From node_modules
+    implementation "androidx.transition:transition:1.1.0"
+    extractHeaders("com.facebook.fbjni:fbjni:" + FBJNI_VERSION + ":headers")
+    extractSO("com.facebook.fbjni:fbjni:" + FBJNI_VERSION)
+
+    def jscAAR = fileTree("$reactNative/../jsc-android/dist/org/webkit/android-jsc").matching({ it.include "**/**/*.aar" }).singleFile
+    extractSO(files(jscAAR))
+}
+
+task unpackReactNativeAAR {
+    def buildType = "debug"
+    tasks.all({ task ->
+        if (task.name == "buildCMakeRelease") {
+            buildType = "release"
+        }
+    })
+    def rnAarMatcher = "**/react-native/**/*${buildType}.aar"
+    if (rnMinorVersion < 69) {
+        rnAarMatcher = "**/**/*.aar"
+    }
+    def rnAAR = fileTree("$reactNative/android").matching({ it.include rnAarMatcher }).singleFile
+    def file = rnAAR.absoluteFile
+    def packageName = file.name.tokenize('-')[0]
+    copy {
+        from zipTree(file)
+        into "$reactNative/ReactAndroid/src/main/jni/first-party/$packageName/"
+        include "jni/**/*.so"
+    }
+}
+
+task downloadNdkBuildDependencies {
+    if (!boostPath) {
+        dependsOn(downloadBoost)
+    }
+    dependsOn(downloadDoubleConversion)
+    dependsOn(downloadFolly)
+    dependsOn(downloadGlog)
+}
+
+task prepareThirdPartyNdkHeaders(dependsOn:[downloadNdkBuildDependencies, prepareBoost, prepareDoubleConversion, prepareFolly, prepareGlog, unpackReactNativeAAR]) {
+}
+
+def nativeBuildDependsOn(dependsOnTask) {
+    def buildTasks = tasks.findAll({ task ->
+        !task.name.contains("Clean") && (task.name.contains("externalNative") || task.name.contains("CMake")) })
+    buildTasks.forEach { task -> task.dependsOn(dependsOnTask) }
+}
+
+afterEvaluate {
+    extractAARHeaders.dependsOn(prepareThirdPartyNdkHeaders)
+    extractSOFiles.dependsOn(prepareThirdPartyNdkHeaders)
+
+    nativeBuildDependsOn(prepareThirdPartyNdkHeaders)
+    nativeBuildDependsOn(extractAARHeaders)
+    nativeBuildDependsOn(extractSOFiles)
+
+    tasks.forEach({ task ->
+        if (task.name.contains("JniLibFolders")) {
+            task.dependsOn(packageNdkLibs)
+        }
+    })
+}
+
+if (CLIENT_SIDE_BUILD) {
+    def aarDir = "${buildDir}/outputs"
+    def aar = file("${aarDir}/android-debug.aar")
+    if (aar == null) {
+        throw GradleScriptException("AAR build failed. No AAR found in ${aarDir}.")
+    }
+    artifacts.add("default", aar)
+}
diff --git a/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.cpp b/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.cpp
index 6fde321..4754a81 100644
--- a/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.cpp
+++ b/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.cpp
@@ -7,8 +7,10 @@
 #include <memory>
 #include <string>
 
-#if FOR_HERMES
+#if JS_RUNTIME_HERMES
 #include <hermes/hermes.h>
+#elif JS_RUNTIME_V8
+#include <v8runtime/V8RuntimeFactory.h>
 #else
 #include <jsi/JSCRuntime.h>
 #endif
@@ -192,11 +194,17 @@ void NativeProxy::installJSIBindings(
   auto setGestureStateFunction = [this](int handlerTag, int newState) -> void {
     setGestureState(handlerTag, newState);
   };
-#if FOR_HERMES
+#if JS_RUNTIME_HERMES
   auto config =
       ::hermes::vm::RuntimeConfig::Builder().withEnableSampleProfiling(false);
   std::shared_ptr<jsi::Runtime> animatedRuntime =
       facebook::hermes::makeHermesRuntime(config.build());
+#elif JS_RUNTIME_V8
+  auto config = std::make_unique<rnv8::V8RuntimeConfig>();
+  config->enableInspector = false;
+  config->appName = "reanimated";
+  std::shared_ptr<jsi::Runtime> animatedRuntime =
+      rnv8::createSharedV8Runtime(runtime_, std::move(config));
 #else
   std::shared_ptr<jsi::Runtime> animatedRuntime =
       facebook::jsc::makeJSCRuntime();
diff --git a/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.cpp.orig b/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.cpp.orig
new file mode 100644
index 0000000..6fde321
--- /dev/null
+++ b/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.cpp.orig
@@ -0,0 +1,482 @@
+#include <fbjni/fbjni.h>
+#include <jsi/JSIDynamic.h>
+#include <jsi/jsi.h>
+#include <react/jni/ReadableNativeArray.h>
+#include <react/jni/ReadableNativeMap.h>
+
+#include <memory>
+#include <string>
+
+#if FOR_HERMES
+#include <hermes/hermes.h>
+#else
+#include <jsi/JSCRuntime.h>
+#endif
+
+#include <android/log.h>
+#include "AndroidErrorHandler.h"
+#include "AndroidScheduler.h"
+#include "LayoutAnimationsProxy.h"
+#include "NativeProxy.h"
+#include "PlatformDepMethodsHolder.h"
+
+#ifdef RCT_NEW_ARCH_ENABLED
+#include <JFabricUIManager.h>
+#include "FabricUtils.h"
+#include "NewestShadowNodesRegistry.h"
+#include "ReanimatedUIManagerBinding.h"
+#endif
+
+namespace reanimated {
+
+using namespace facebook;
+using namespace react;
+
+NativeProxy::NativeProxy(
+    jni::alias_ref<NativeProxy::javaobject> jThis,
+    jsi::Runtime *rt,
+    std::shared_ptr<facebook::react::CallInvoker> jsCallInvoker,
+    std::shared_ptr<Scheduler> scheduler,
+    jni::global_ref<LayoutAnimations::javaobject> _layoutAnimations
+#ifdef RCT_NEW_ARCH_ENABLED
+    ,
+    jni::alias_ref<facebook::react::JFabricUIManager::javaobject>
+        fabricUIManager
+#endif
+    )
+    : javaPart_(jni::make_global(jThis)),
+      runtime_(rt),
+      jsCallInvoker_(jsCallInvoker),
+      layoutAnimations(std::move(_layoutAnimations)),
+      scheduler_(scheduler)
+#ifdef RCT_NEW_ARCH_ENABLED
+      ,
+      newestShadowNodesRegistry_(std::make_shared<NewestShadowNodesRegistry>())
+#endif
+{
+#ifdef RCT_NEW_ARCH_ENABLED
+  Binding *binding = fabricUIManager->getBinding();
+  RuntimeExecutor runtimeExecutor = getRuntimeExecutorFromBinding(binding);
+  std::shared_ptr<UIManager> uiManager =
+      binding->getScheduler()->getUIManager();
+  ReanimatedUIManagerBinding::createAndInstallIfNeeded(
+      *rt, runtimeExecutor, uiManager, newestShadowNodesRegistry_);
+#endif
+}
+
+NativeProxy::~NativeProxy() {
+  runtime_->global().setProperty(
+      *runtime_,
+      jsi::PropNameID::forAscii(*runtime_, "__reanimatedModuleProxy"),
+      jsi::Value::undefined());
+  // removed temporary, new event listener mechanism need fix on the RN side
+  // reactScheduler_->removeEventListener(eventListener_);
+}
+
+jni::local_ref<NativeProxy::jhybriddata> NativeProxy::initHybrid(
+    jni::alias_ref<jhybridobject> jThis,
+    jlong jsContext,
+    jni::alias_ref<facebook::react::CallInvokerHolder::javaobject>
+        jsCallInvokerHolder,
+    jni::alias_ref<AndroidScheduler::javaobject> androidScheduler,
+    jni::alias_ref<LayoutAnimations::javaobject> layoutAnimations
+#ifdef RCT_NEW_ARCH_ENABLED
+    ,
+    jni::alias_ref<facebook::react::JFabricUIManager::javaobject>
+        fabricUIManager
+#endif
+) {
+  auto jsCallInvoker = jsCallInvokerHolder->cthis()->getCallInvoker();
+  auto scheduler = androidScheduler->cthis()->getScheduler();
+  scheduler->setJSCallInvoker(jsCallInvoker);
+  return makeCxxInstance(
+      jThis,
+      (jsi::Runtime *)jsContext,
+      jsCallInvoker,
+      scheduler,
+      make_global(layoutAnimations)
+#ifdef RCT_NEW_ARCH_ENABLED
+          ,
+      fabricUIManager
+#endif
+      /**/);
+}
+
+void NativeProxy::installJSIBindings(
+#ifdef RCT_NEW_ARCH_ENABLED
+    jni::alias_ref<facebook::react::JFabricUIManager::javaobject>
+        fabricUIManager
+#endif
+    /**/) {
+#ifdef RCT_NEW_ARCH_ENABLED
+  // nothing
+#else
+  auto updatePropsFunction = [this](
+                                 jsi::Runtime &rt,
+                                 int viewTag,
+                                 const jsi::Value &viewName,
+                                 const jsi::Object &props) {
+    // viewName is for iOS only, we skip it here
+    this->updateProps(rt, viewTag, props);
+  };
+
+  auto measureFunction =
+      [this](int viewTag) -> std::vector<std::pair<std::string, double>> {
+    return measure(viewTag);
+  };
+
+  auto scrollToFunction =
+      [this](int viewTag, double x, double y, bool animated) -> void {
+    scrollTo(viewTag, x, y, animated);
+  };
+#endif
+
+  auto getCurrentTime = [this]() {
+    auto method =
+        javaPart_->getClass()->getMethod<local_ref<JString>()>("getUptime");
+    local_ref<JString> output = method(javaPart_.get());
+    return static_cast<double>(
+        std::strtoll(output->toStdString().c_str(), NULL, 10));
+  };
+
+  auto requestRender = [this, getCurrentTime](
+                           std::function<void(double)> onRender,
+                           jsi::Runtime &rt) {
+    // doNoUse -> NodesManager passes here a timestamp from choreographer which
+    // is useless for us as we use diffrent timer to better handle events. The
+    // lambda is translated to NodeManager.OnAnimationFrame and treated just
+    // like reanimated 1 frame callbacks which make use of the timestamp.
+    auto wrappedOnRender = [getCurrentTime, &rt, onRender](double doNotUse) {
+      jsi::Object global = rt.global();
+      jsi::String frameTimestampName =
+          jsi::String::createFromAscii(rt, "_frameTimestamp");
+      double frameTimestamp = getCurrentTime();
+      global.setProperty(rt, frameTimestampName, frameTimestamp);
+      onRender(frameTimestamp);
+      global.setProperty(rt, frameTimestampName, jsi::Value::undefined());
+    };
+    this->requestRender(std::move(wrappedOnRender));
+  };
+
+#ifdef RCT_NEW_ARCH_ENABLED
+  auto synchronouslyUpdateUIPropsFunction =
+      [this](jsi::Runtime &rt, Tag tag, const jsi::Value &props) {
+        this->synchronouslyUpdateUIProps(rt, tag, props);
+      };
+#else
+  auto propObtainer = [this](
+                          jsi::Runtime &rt,
+                          const int viewTag,
+                          const jsi::String &propName) -> jsi::Value {
+    auto method =
+        javaPart_->getClass()
+            ->getMethod<jni::local_ref<JString>(int, jni::local_ref<JString>)>(
+                "obtainProp");
+    local_ref<JString> propNameJStr =
+        jni::make_jstring(propName.utf8(rt).c_str());
+    auto result = method(javaPart_.get(), viewTag, propNameJStr);
+    std::string str = result->toStdString();
+    return jsi::Value(rt, jsi::String::createFromAscii(rt, str.c_str()));
+  };
+#endif
+
+  auto registerSensorFunction =
+      [this](int sensorType, int interval, std::function<void(double[])> setter)
+      -> int {
+    return this->registerSensor(sensorType, interval, std::move(setter));
+  };
+  auto unregisterSensorFunction = [this](int sensorId) {
+    unregisterSensor(sensorId);
+  };
+
+  auto setGestureStateFunction = [this](int handlerTag, int newState) -> void {
+    setGestureState(handlerTag, newState);
+  };
+#if FOR_HERMES
+  auto config =
+      ::hermes::vm::RuntimeConfig::Builder().withEnableSampleProfiling(false);
+  std::shared_ptr<jsi::Runtime> animatedRuntime =
+      facebook::hermes::makeHermesRuntime(config.build());
+#else
+  std::shared_ptr<jsi::Runtime> animatedRuntime =
+      facebook::jsc::makeJSCRuntime();
+#endif
+  auto workletRuntimeValue =
+      runtime_->global()
+          .getProperty(*runtime_, "ArrayBuffer")
+          .asObject(*runtime_)
+          .asFunction(*runtime_)
+          .callAsConstructor(*runtime_, {static_cast<double>(sizeof(void *))});
+  uintptr_t *workletRuntimeData = reinterpret_cast<uintptr_t *>(
+      workletRuntimeValue.getObject(*runtime_).getArrayBuffer(*runtime_).data(
+          *runtime_));
+  workletRuntimeData[0] = reinterpret_cast<uintptr_t>(animatedRuntime.get());
+
+  runtime_->global().setProperty(
+      *runtime_, "_WORKLET_RUNTIME", workletRuntimeValue);
+
+#ifdef RCT_NEW_ARCH_ENABLED
+  runtime_->global().setProperty(*runtime_, "_IS_FABRIC", true);
+#else
+  runtime_->global().setProperty(*runtime_, "_IS_FABRIC", false);
+#endif
+
+  std::shared_ptr<ErrorHandler> errorHandler =
+      std::make_shared<AndroidErrorHandler>(scheduler_);
+
+  // Layout Animations Start
+
+  auto notifyAboutProgress = [=](int tag, jsi::Value progress) {
+    this->layoutAnimations->cthis()->notifyAboutProgress(progress, tag);
+  };
+
+  auto notifyAboutEnd = [=](int tag, bool isCancelled) {
+    this->layoutAnimations->cthis()->notifyAboutEnd(tag, (isCancelled) ? 1 : 0);
+  };
+
+  auto configurePropsFunction = [=](jsi::Runtime &rt,
+                                    const jsi::Value &uiProps,
+                                    const jsi::Value &nativeProps) {
+    this->configureProps(rt, uiProps, nativeProps);
+  };
+
+  std::shared_ptr<LayoutAnimationsProxy> layoutAnimationsProxy =
+      std::make_shared<LayoutAnimationsProxy>(
+          notifyAboutProgress, notifyAboutEnd);
+  std::weak_ptr<jsi::Runtime> wrt = animatedRuntime;
+  layoutAnimations->cthis()->setWeakUIRuntime(wrt);
+
+  // Layout Animations End
+
+  PlatformDepMethodsHolder platformDepMethodsHolder = {
+      requestRender,
+#ifdef RCT_NEW_ARCH_ENABLED
+      synchronouslyUpdateUIPropsFunction,
+#else
+      updatePropsFunction,
+      scrollToFunction,
+      measureFunction,
+      configurePropsFunction,
+#endif
+      getCurrentTime,
+      registerSensorFunction,
+      unregisterSensorFunction,
+      setGestureStateFunction};
+
+  auto module = std::make_shared<NativeReanimatedModule>(
+      jsCallInvoker_,
+      scheduler_,
+      animatedRuntime,
+      errorHandler,
+#ifdef RCT_NEW_ARCH_ENABLED
+  // nothing
+#else
+      propObtainer,
+#endif
+      layoutAnimationsProxy,
+      platformDepMethodsHolder);
+
+  _nativeReanimatedModule = module;
+
+  std::weak_ptr<NativeReanimatedModule> weakModule = module;
+#ifdef RCT_NEW_ARCH_ENABLED
+  this->registerEventHandler([weakModule, getCurrentTime](
+                                 std::string eventName,
+                                 std::string eventAsString) {
+    if (auto module = weakModule.lock()) {
+      // handles RCTEvents from RNGestureHandler
+
+      std::string eventJSON = eventAsString.substr(
+          13, eventAsString.length() - 15); // removes "{ NativeMap: " and " }"
+      jsi::Runtime &rt = *module->runtime;
+      jsi::Value payload =
+          jsi::valueFromDynamic(rt, folly::parseJson(eventJSON));
+      // TODO: support NaN and INF values
+      // TODO: convert event directly to jsi::Value without JSON serialization
+
+      module->handleEvent(eventName, std::move(payload), getCurrentTime());
+    }
+  });
+#else
+  this->registerEventHandler(
+      [weakModule, getCurrentTime](
+          std::string eventName, std::string eventAsString) {
+        if (auto module = weakModule.lock()) {
+          jsi::Object global = module->runtime->global();
+          jsi::String eventTimestampName =
+              jsi::String::createFromAscii(*module->runtime, "_eventTimestamp");
+          global.setProperty(
+              *module->runtime, eventTimestampName, getCurrentTime());
+          module->onEvent(eventName, eventAsString);
+          global.setProperty(
+              *module->runtime, eventTimestampName, jsi::Value::undefined());
+        }
+      });
+#endif
+
+#ifdef RCT_NEW_ARCH_ENABLED
+  Binding *binding = fabricUIManager->getBinding();
+  std::shared_ptr<UIManager> uiManager =
+      binding->getScheduler()->getUIManager();
+  module->setUIManager(uiManager);
+  module->setNewestShadowNodesRegistry(newestShadowNodesRegistry_);
+  newestShadowNodesRegistry_ = nullptr;
+#endif
+  //  removed temporary, new event listener mechanism need fix on the RN side
+  //  eventListener_ = std::make_shared<EventListener>(
+  //      [module, getCurrentTime](const RawEvent &rawEvent) {
+  //        return module->handleRawEvent(rawEvent, getCurrentTime());
+  //      });
+  //  reactScheduler_ = binding->getScheduler();
+  //  reactScheduler_->addEventListener(eventListener_);
+
+  runtime_->global().setProperty(
+      *runtime_,
+      jsi::PropNameID::forAscii(*runtime_, "__reanimatedModuleProxy"),
+      jsi::Object::createFromHostObject(*runtime_, module));
+}
+
+bool NativeProxy::isAnyHandlerWaitingForEvent(std::string s) {
+  return _nativeReanimatedModule->isAnyHandlerWaitingForEvent(s);
+}
+
+void NativeProxy::performOperations() {
+#ifdef RCT_NEW_ARCH_ENABLED
+  _nativeReanimatedModule->performOperations();
+#endif
+}
+
+void NativeProxy::registerNatives() {
+  registerHybrid(
+      {makeNativeMethod("initHybrid", NativeProxy::initHybrid),
+       makeNativeMethod("installJSIBindings", NativeProxy::installJSIBindings),
+       makeNativeMethod(
+           "isAnyHandlerWaitingForEvent",
+           NativeProxy::isAnyHandlerWaitingForEvent),
+       makeNativeMethod("performOperations", NativeProxy::performOperations)});
+}
+
+void NativeProxy::requestRender(std::function<void(double)> onRender) {
+  static auto method =
+      javaPart_->getClass()
+          ->getMethod<void(AnimationFrameCallback::javaobject)>(
+              "requestRender");
+  method(
+      javaPart_.get(),
+      AnimationFrameCallback::newObjectCxxArgs(std::move(onRender)).get());
+}
+
+void NativeProxy::registerEventHandler(
+    std::function<void(std::string, std::string)> handler) {
+  static auto method =
+      javaPart_->getClass()->getMethod<void(EventHandler::javaobject)>(
+          "registerEventHandler");
+  method(
+      javaPart_.get(),
+      EventHandler::newObjectCxxArgs(std::move(handler)).get());
+}
+
+#ifdef RCT_NEW_ARCH_ENABLED
+// nothing
+#else
+void NativeProxy::updateProps(
+    jsi::Runtime &rt,
+    int viewTag,
+    const jsi::Object &props) {
+  auto method = javaPart_->getClass()
+                    ->getMethod<void(int, JMap<JString, JObject>::javaobject)>(
+                        "updateProps");
+  method(
+      javaPart_.get(), viewTag, JNIHelper::ConvertToPropsMap(rt, props).get());
+}
+
+void NativeProxy::scrollTo(int viewTag, double x, double y, bool animated) {
+  auto method =
+      javaPart_->getClass()->getMethod<void(int, double, double, bool)>(
+          "scrollTo");
+  method(javaPart_.get(), viewTag, x, y, animated);
+}
+
+std::vector<std::pair<std::string, double>> NativeProxy::measure(int viewTag) {
+  auto method =
+      javaPart_->getClass()->getMethod<local_ref<JArrayFloat>(int)>("measure");
+  local_ref<JArrayFloat> output = method(javaPart_.get(), viewTag);
+  size_t size = output->size();
+  auto elements = output->getRegion(0, size);
+  std::vector<std::pair<std::string, double>> result;
+
+  result.push_back({"x", elements[0]});
+  result.push_back({"y", elements[1]});
+
+  result.push_back({"pageX", elements[2]});
+  result.push_back({"pageY", elements[3]});
+
+  result.push_back({"width", elements[4]});
+  result.push_back({"height", elements[5]});
+
+  return result;
+}
+#endif // RCT_NEW_ARCH_ENABLED
+
+#ifdef RCT_NEW_ARCH_ENABLED
+inline jni::local_ref<ReadableMap::javaobject> castReadableMap(
+    jni::local_ref<ReadableNativeMap::javaobject> const &nativeMap) {
+  return make_local(reinterpret_cast<ReadableMap::javaobject>(nativeMap.get()));
+}
+
+void NativeProxy::synchronouslyUpdateUIProps(
+    jsi::Runtime &rt,
+    Tag tag,
+    const jsi::Value &props) {
+  static const auto method =
+      javaPart_->getClass()
+          ->getMethod<void(int, jni::local_ref<ReadableMap::javaobject>)>(
+              "synchronouslyUpdateUIProps");
+  jni::local_ref<ReadableMap::javaobject> uiProps = castReadableMap(
+      ReadableNativeMap::newObjectCxxArgs(jsi::dynamicFromValue(rt, props)));
+  method(javaPart_.get(), tag, uiProps);
+}
+#endif
+
+int NativeProxy::registerSensor(
+    int sensorType,
+    int interval,
+    std::function<void(double[])> setter) {
+  static auto method =
+      javaPart_->getClass()->getMethod<int(int, int, SensorSetter::javaobject)>(
+          "registerSensor");
+  return method(
+      javaPart_.get(),
+      sensorType,
+      interval,
+      SensorSetter::newObjectCxxArgs(std::move(setter)).get());
+}
+void NativeProxy::unregisterSensor(int sensorId) {
+  auto method = javaPart_->getClass()->getMethod<void(int)>("unregisterSensor");
+  method(javaPart_.get(), sensorId);
+}
+
+void NativeProxy::setGestureState(int handlerTag, int newState) {
+  auto method =
+      javaPart_->getClass()->getMethod<void(int, int)>("setGestureState");
+  method(javaPart_.get(), handlerTag, newState);
+}
+
+void NativeProxy::configureProps(
+    jsi::Runtime &rt,
+    const jsi::Value &uiProps,
+    const jsi::Value &nativeProps) {
+  auto method = javaPart_->getClass()
+                    ->getMethod<void(
+                        ReadableNativeArray::javaobject,
+                        ReadableNativeArray::javaobject)>("configureProps");
+  method(
+      javaPart_.get(),
+      ReadableNativeArray::newObjectCxxArgs(jsi::dynamicFromValue(rt, uiProps))
+          .get(),
+      ReadableNativeArray::newObjectCxxArgs(
+          jsi::dynamicFromValue(rt, nativeProps))
+          .get());
+}
+
+} // namespace reanimated
diff --git a/node_modules/react-native-reanimated/lib/Animated.js b/node_modules/react-native-reanimated/lib/Animated.js
index 0cc4432..9f14edb 100644
--- a/node_modules/react-native-reanimated/lib/Animated.js
+++ b/node_modules/react-native-reanimated/lib/Animated.js
@@ -3,6 +3,7 @@ import {
   addWhitelistedNativeProps,
   addWhitelistedUIProps,
 } from './ConfigHelper';
+import * as reanimated1 from './reanimated1';
 import ReanimatedComponents from './reanimated2/component';
 
 const Animated = {
@@ -12,7 +13,10 @@ const Animated = {
   // configuration
   addWhitelistedNativeProps,
   addWhitelistedUIProps,
+  // reanimated 1
+  ...reanimated1,
 };
 
 export * from './reanimated2';
+export * from './reanimated1';
 export default Animated;
diff --git a/node_modules/react-native-reanimated/lib/createAnimatedComponent.js b/node_modules/react-native-reanimated/lib/createAnimatedComponent.js
index 9ddcb4a..ef8a752 100644
--- a/node_modules/react-native-reanimated/lib/createAnimatedComponent.js
+++ b/node_modules/react-native-reanimated/lib/createAnimatedComponent.js
@@ -1,5 +1,14 @@
 import React from 'react';
 import { findNodeHandle, Platform, StyleSheet } from 'react-native';
+import ReanimatedEventEmitter from './ReanimatedEventEmitter';
+// @ts-ignore JS file
+import AnimatedEvent from './reanimated1/core/AnimatedEvent';
+// @ts-ignore JS file
+import AnimatedNode from './reanimated1/core/AnimatedNode';
+// @ts-ignore JS file
+import AnimatedValue from './reanimated1/core/AnimatedValue';
+// @ts-ignore JS file
+import { createOrReusePropsNode } from './reanimated1/core/AnimatedProps';
 import WorkletEventHandler from './reanimated2/WorkletEventHandler';
 import setAndForwardRef from './setAndForwardRef';
 import './reanimated2/layoutReanimation/LayoutAnimationRepository';
@@ -10,11 +19,27 @@ import { makeMutable, runOnUI, enableLayoutAnimations, } from './reanimated2/cor
 import { DefaultEntering, DefaultExiting, DefaultLayout, } from './reanimated2/layoutReanimation/defaultAnimations/Default';
 import { isJest, isChromeDebugger, shouldBeUseWeb, } from './reanimated2/PlatformChecker';
 import { initialUpdaterRun } from './reanimated2/animation';
-import { getShadowNodeWrapperFromRef } from './reanimated2/fabricUtils';
+const NODE_MAPPING = new Map();
+function listener(data) {
+    const component = NODE_MAPPING.get(data.viewTag);
+    component && component._updateFromNative(data.props);
+}
 function dummyListener() {
     // empty listener we use to assign to listener properties for which animated
     // event is used.
 }
+function hasAnimatedNodes(value) {
+    if (value instanceof AnimatedNode) {
+        return true;
+    }
+    if (Array.isArray(value)) {
+        return value.some((item) => hasAnimatedNodes(item));
+    }
+    if (value && typeof value === 'object') {
+        return Object.keys(value).some((key) => hasAnimatedNodes(value[key]));
+    }
+    return false;
+}
 function flattenArray(array) {
     if (!Array.isArray(array)) {
         return [array];
@@ -60,12 +85,35 @@ export default function createAnimatedComponent(Component, options) {
     class AnimatedComponent extends React.Component {
         constructor(props) {
             super(props);
+            this._invokeAnimatedPropsCallbackOnMount = false;
             this._styles = null;
             this._viewTag = -1;
             this._isFirstRender = true;
             this.animatedStyle = { value: {} };
             this.initialStyle = {};
             this._component = null;
+            // The system is best designed when setNativeProps is implemented. It is
+            // able to avoid re-rendering and directly set the attributes that changed.
+            // However, setNativeProps can only be implemented on native components
+            // If you want to animate a composite component, you need to re-render it.
+            // In this case, we have a fallback that uses forceUpdate.
+            this._animatedPropsCallback = () => {
+                if (this._component == null) {
+                    // AnimatedProps is created in will-mount because it's used in render.
+                    // But this callback may be invoked before mount in async mode,
+                    // In which case we should defer the setNativeProps() call.
+                    // React may throw away uncommitted work in async mode,
+                    // So a deferred call won't always be invoked.
+                    this._invokeAnimatedPropsCallbackOnMount = true;
+                }
+                else if (typeof this._component.setNativeProps !== 'function') {
+                    this.forceUpdate();
+                }
+                else {
+                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
+                    this._component.setNativeProps(this._propsAnimated.__getValue());
+                }
+            };
             this._setComponentRef = setAndForwardRef({
                 getForwardedRef: () => this.props.forwardedRef,
                 setLocalRef: (ref) => {
@@ -108,34 +156,60 @@ export default function createAnimatedComponent(Component, options) {
                     }
                 },
             });
+            this._attachProps(this.props);
             if (isJest()) {
                 this.animatedStyle = { value: {} };
             }
             this.sv = makeMutable({});
         }
         componentWillUnmount() {
+            this._detachPropUpdater();
+            this._propsAnimated && this._propsAnimated.__detach();
             this._detachNativeEvents();
             this._detachStyles();
             this.sv = null;
         }
         componentDidMount() {
+            if (this._invokeAnimatedPropsCallbackOnMount) {
+                this._invokeAnimatedPropsCallbackOnMount = false;
+                this._animatedPropsCallback();
+            }
+            this._propsAnimated &&
+                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
+                this._propsAnimated.setNativeView(this._component);
             this._attachNativeEvents();
+            this._attachPropUpdater();
             this._attachAnimatedStyles();
         }
+        _getEventViewRef() {
+            var _a;
+            // Make sure to get the scrollable node for components that implement
+            // `ScrollResponder.Mixin`.
+            return ((_a = this._component) === null || _a === void 0 ? void 0 : _a.getScrollableNode) ? this._component.getScrollableNode()
+                : this._component;
+        }
         _attachNativeEvents() {
-            const viewTag = findNodeHandle(this);
+            const node = this._getEventViewRef();
+            const viewTag = findNodeHandle((options === null || options === void 0 ? void 0 : options.setNativeProps) ? this : node);
             for (const key in this.props) {
                 const prop = this.props[key];
-                if (has('current', prop) &&
+                if (prop instanceof AnimatedEvent) {
+                    prop.attachEvent(node, key);
+                }
+                else if (has('current', prop) &&
                     prop.current instanceof WorkletEventHandler) {
                     prop.current.registerForEvents(viewTag, key);
                 }
             }
         }
         _detachNativeEvents() {
+            const node = this._getEventViewRef();
             for (const key in this.props) {
                 const prop = this.props[key];
-                if (has('current', prop) &&
+                if (prop instanceof AnimatedEvent) {
+                    prop.detachEvent(node, key);
+                }
+                else if (has('current', prop) &&
                     prop.current instanceof WorkletEventHandler) {
                     prop.current.unregisterFromEvents();
                 }
@@ -157,20 +231,19 @@ export default function createAnimatedComponent(Component, options) {
                 if ((_a = this.props.animatedProps) === null || _a === void 0 ? void 0 : _a.viewDescriptors) {
                     this.props.animatedProps.viewDescriptors.remove(this._viewTag);
                 }
-                if (global._IS_FABRIC) {
-                    const shadowNodeWrapper = getShadowNodeWrapperFromRef(this);
-                    runOnUI(() => {
-                        'worklet';
-                        _removeShadowNodeFromRegistry(shadowNodeWrapper);
-                    })();
-                }
             }
         }
         _reattachNativeEvents(prevProps) {
+            const node = this._getEventViewRef();
+            const attached = new Set();
+            const nextEvts = new Set();
             let viewTag;
             for (const key in this.props) {
                 const prop = this.props[key];
-                if (has('current', prop) &&
+                if (prop instanceof AnimatedEvent) {
+                    nextEvts.add(prop.__nodeID);
+                }
+                else if (has('current', prop) &&
                     prop.current instanceof WorkletEventHandler) {
                     if (viewTag === undefined) {
                         viewTag = prop.current.viewTag;
@@ -179,7 +252,17 @@ export default function createAnimatedComponent(Component, options) {
             }
             for (const key in prevProps) {
                 const prop = this.props[key];
-                if (has('current', prop) &&
+                if (prop instanceof AnimatedEvent) {
+                    if (!nextEvts.has(prop.__nodeID)) {
+                        // event was in prev props but not in current props, we detach
+                        prop.detachEvent(node, key);
+                    }
+                    else {
+                        // event was in prev and is still in current props
+                        attached.add(prop.__nodeID);
+                    }
+                }
+                else if (has('current', prop) &&
                     prop.current instanceof WorkletEventHandler &&
                     prop.current.reattachNeeded) {
                     prop.current.unregisterFromEvents();
@@ -187,7 +270,12 @@ export default function createAnimatedComponent(Component, options) {
             }
             for (const key in this.props) {
                 const prop = this.props[key];
-                if (has('current', prop) &&
+                if (prop instanceof AnimatedEvent &&
+                    !attached.has(prop.__nodeID)) {
+                    // not yet attached
+                    prop.attachEvent(node, key);
+                }
+                else if (has('current', prop) &&
                     prop.current instanceof WorkletEventHandler &&
                     prop.current.reattachNeeded) {
                     // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
@@ -196,6 +284,22 @@ export default function createAnimatedComponent(Component, options) {
                 }
             }
         }
+        _attachProps(nextProps) {
+            const oldPropsAnimated = this._propsAnimated;
+            this._propsAnimated = createOrReusePropsNode(nextProps, this._animatedPropsCallback, oldPropsAnimated);
+            // If prop node has been reused we don't need to call into "__detach"
+            if (oldPropsAnimated !== this._propsAnimated) {
+                // When you call detach, it removes the element from the parent list
+                // of children. If it goes to 0, then the parent also detaches itself
+                // and so on.
+                // An optimization is to attach the new elements and THEN detach the old
+                // ones instead of detaching and THEN attaching.
+                // This way the intermediate state isn't to go to 0 and trigger
+                // this expensive recursive detaching to then re-attach everything on
+                // the very next operation.
+                oldPropsAnimated && oldPropsAnimated.__detach();
+            }
+        }
         _updateFromNative(props) {
             var _a, _b;
             if (options === null || options === void 0 ? void 0 : options.setNativeProps) {
@@ -207,6 +311,13 @@ export default function createAnimatedComponent(Component, options) {
                 (_b = (_a = this._component) === null || _a === void 0 ? void 0 : _a.setNativeProps) === null || _b === void 0 ? void 0 : _b.call(_a, props);
             }
         }
+        _attachPropUpdater() {
+            const viewTag = findNodeHandle(this);
+            NODE_MAPPING.set(viewTag, this);
+            if (NODE_MAPPING.size === 1) {
+                ReanimatedEventEmitter.addListener('onReanimatedPropsChange', listener);
+            }
+        }
         _attachAnimatedStyles() {
             var _a, _b, _c;
             const styles = this.props.style
@@ -218,11 +329,9 @@ export default function createAnimatedComponent(Component, options) {
             this._animatedProps = this.props.animatedProps;
             let viewTag;
             let viewName;
-            let shadowNodeWrapper = null;
             if (Platform.OS === 'web') {
                 viewTag = findNodeHandle(this);
                 viewName = null;
-                shadowNodeWrapper = null;
             }
             else {
                 // hostInstance can be null for a component that doesn't render anything (render function returns null). Example: svg Stop: https://github.com/react-native-svg/react-native-svg/blob/develop/src/elements/Stop.tsx
@@ -242,9 +351,6 @@ export default function createAnimatedComponent(Component, options) {
                 if (hasReanimated2Props && (hostInstance === null || hostInstance === void 0 ? void 0 : hostInstance.viewConfig)) {
                     adaptViewConfig(hostInstance.viewConfig);
                 }
-                if (global._IS_FABRIC) {
-                    shadowNodeWrapper = getShadowNodeWrapperFromRef(this);
-                }
             }
             this._viewTag = viewTag;
             // remove old styles
@@ -264,11 +370,7 @@ export default function createAnimatedComponent(Component, options) {
                 }
             }
             styles.forEach((style) => {
-                style.viewDescriptors.add({
-                    tag: viewTag,
-                    name: viewName,
-                    shadowNodeWrapper,
-                });
+                style.viewDescriptors.add({ tag: viewTag, name: viewName });
                 if (isJest()) {
                     /**
                      * We need to connect Jest's TestObject instance whose contains just props object
@@ -292,15 +394,39 @@ export default function createAnimatedComponent(Component, options) {
                     tag: viewTag,
                     // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                     name: viewName,
-                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
-                    shadowNodeWrapper: shadowNodeWrapper,
                 });
             }
         }
+        _detachPropUpdater() {
+            const viewTag = findNodeHandle(this);
+            NODE_MAPPING.delete(viewTag);
+            if (NODE_MAPPING.size === 0) {
+                ReanimatedEventEmitter.removeAllListeners('onReanimatedPropsChange');
+            }
+        }
         componentDidUpdate(prevProps) {
+            this._attachProps(this.props);
             this._reattachNativeEvents(prevProps);
+            this._propsAnimated &&
+                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
+                this._propsAnimated.setNativeView(this._component);
             this._attachAnimatedStyles();
         }
+        _filterNonAnimatedStyle(inputStyle) {
+            const style = {};
+            for (const key in inputStyle) {
+                const value = inputStyle[key];
+                if (!hasAnimatedNodes(value)) {
+                    style[key] = value;
+                }
+                else if (value instanceof AnimatedValue) {
+                    // if any style in animated component is set directly to the `Value` we set those styles to the first value of `Value` node in order
+                    // to avoid flash of default styles when `Value` is being asynchrounously sent via bridge and initialized in the native side.
+                    style[key] = value._startingValue;
+                }
+            }
+            return style;
+        }
         _filterNonAnimatedProps(inputProps) {
             const props = {};
             for (const key in inputProps) {
@@ -321,7 +447,7 @@ export default function createAnimatedComponent(Component, options) {
                             return style;
                         }
                     });
-                    props[key] = StyleSheet.flatten(processedStyle);
+                    props[key] = this._filterNonAnimatedStyle(StyleSheet.flatten(processedStyle));
                 }
                 else if (key === 'animatedProps') {
                     const animatedProp = inputProps.animatedProps;
@@ -333,6 +459,13 @@ export default function createAnimatedComponent(Component, options) {
                         });
                     }
                 }
+                else if (value instanceof AnimatedEvent) {
+                    // we cannot filter out event listeners completely as some components
+                    // rely on having a callback registered in order to generate events
+                    // alltogether. Therefore we provide a dummy callback here to allow
+                    // native event dispatcher to hijack events.
+                    props[key] = dummyListener;
+                }
                 else if (has('current', value) &&
                     value.current instanceof WorkletEventHandler) {
                     if (value.current.eventNames.length > 0) {
@@ -346,9 +479,15 @@ export default function createAnimatedComponent(Component, options) {
                         props[key] = dummyListener;
                     }
                 }
-                else if (key !== 'onGestureHandlerStateChange' ||
-                    !isChromeDebugger()) {
-                    props[key] = value;
+                else if (!(value instanceof AnimatedNode)) {
+                    if (key !== 'onGestureHandlerStateChange' || !isChromeDebugger()) {
+                        props[key] = value;
+                    }
+                }
+                else if (value instanceof AnimatedValue) {
+                    // if any prop in animated component is set directly to the `Value` we set those props to the first value of `Value` node in order
+                    // to avoid default values for a short moment when `Value` is being asynchrounously sent via bridge and initialized in the native side.
+                    props[key] = value._startingValue;
                 }
             }
             return props;
diff --git a/node_modules/react-native-reanimated/lib/index.js b/node_modules/react-native-reanimated/lib/index.js
index 0cc4432..9f14edb 100644
--- a/node_modules/react-native-reanimated/lib/index.js
+++ b/node_modules/react-native-reanimated/lib/index.js
@@ -3,6 +3,7 @@ import {
   addWhitelistedNativeProps,
   addWhitelistedUIProps,
 } from './ConfigHelper';
+import * as reanimated1 from './reanimated1';
 import ReanimatedComponents from './reanimated2/component';
 
 const Animated = {
@@ -12,7 +13,10 @@ const Animated = {
   // configuration
   addWhitelistedNativeProps,
   addWhitelistedUIProps,
+  // reanimated 1
+  ...reanimated1,
 };
 
 export * from './reanimated2';
+export * from './reanimated1';
 export default Animated;
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/Easing.js b/node_modules/react-native-reanimated/lib/reanimated1/Easing.js
new file mode 100644
index 0000000..a53482d
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/Easing.js
@@ -0,0 +1,231 @@
+import {
+  cond,
+  lessThan,
+  multiply,
+  pow,
+  cos,
+  sqrt,
+  sub,
+  add,
+  divide,
+} from './base';
+import AnimatedBezier from './core/AnimatedBezier';
+
+/**
+ * The `Easing` module implements common easing functions. This module is used
+ * by [Animate.timing()](docs/animate.html#timing) to convey physically
+ * believable motion in animations.
+ *
+ * You can find a visualization of some common easing functions at
+ * http://easings.net/
+ *
+ * ### Predefined animations
+ *
+ * The `Easing` module provides several predefined animations through the
+ * following methods:
+ *
+ * - [`back`](docs/easing.html#back) provides a simple animation where the
+ *   object goes slightly back before moving forward
+ * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation
+ * - [`ease`](docs/easing.html#ease) provides a simple inertial animation
+ * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction
+ *
+ * ### Standard functions
+ *
+ * Three standard easing functions are provided:
+ *
+ * - [`linear`](docs/easing.html#linear)
+ * - [`quad`](docs/easing.html#quad)
+ * - [`cubic`](docs/easing.html#cubic)
+ *
+ * The [`poly`](docs/easing.html#poly) function can be used to implement
+ * quartic, quintic, and other higher power functions.
+ *
+ * ### Additional functions
+ *
+ * Additional mathematical functions are provided by the following methods:
+ *
+ * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve
+ * - [`circle`](docs/easing.html#circle) provides a circular function
+ * - [`sin`](docs/easing.html#sin) provides a sinusoidal function
+ * - [`exp`](docs/easing.html#exp) provides an exponential function
+ *
+ * The following helpers are used to modify other easing functions.
+ *
+ * - [`in`](docs/easing.html#in) runs an easing function forwards
+ * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical
+ * - [`out`](docs/easing.html#out) runs an easing function backwards
+ */
+export default class Easing {
+  /**
+   * A linear function, `f(t) = t`. Position correlates to elapsed time one to
+   * one.
+   *
+   * http://cubic-bezier.com/#0,0,1,1
+   */
+  static linear(t) {
+    return t;
+  }
+
+  /**
+   * A simple inertial interaction, similar to an object slowly accelerating to
+   * speed.
+   *
+   * http://cubic-bezier.com/#.42,0,1,1
+   */
+  static ease(t) {
+    return new AnimatedBezier(t, 0.42, 0, 1, 1);
+  }
+
+  /**
+   * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed
+   * time.
+   *
+   * http://easings.net/#easeInQuad
+   */
+  static quad(t) {
+    return multiply(t, t);
+  }
+
+  /**
+   * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed
+   * time.
+   *
+   * http://easings.net/#easeInCubic
+   */
+  static cubic(t) {
+    return multiply(t, t, t);
+  }
+
+  /**
+   * A power function. Position is equal to the Nth power of elapsed time.
+   *
+   * n = 4: http://easings.net/#easeInQuart
+   * n = 5: http://easings.net/#easeInQuint
+   */
+  static poly(n) {
+    return (t) => pow(t, n);
+  }
+
+  /**
+   * A sinusoidal function.
+   *
+   * http://easings.net/#easeInSine
+   */
+  static sin(t) {
+    return sub(1, cos(multiply(t, Math.PI, 0.5)));
+  }
+
+  /**
+   * A circular function.
+   *
+   * http://easings.net/#easeInCirc
+   */
+  static circle(t) {
+    return sub(1, sqrt(sub(1, multiply(t, t))));
+  }
+
+  /**
+   * An exponential function.
+   *
+   * http://easings.net/#easeInExpo
+   */
+  static exp(t) {
+    return pow(2, multiply(10, sub(t, 1)));
+  }
+
+  /**
+   * A simple elastic interaction, similar to a spring oscillating back and
+   * forth.
+   *
+   * Default bounciness is 1, which overshoots a little bit once. 0 bounciness
+   * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N
+   * times.
+   *
+   * http://easings.net/#easeInElastic
+   */
+  static elastic(bounciness = 1) {
+    const p = bounciness * Math.PI;
+    return (t) =>
+      sub(
+        1,
+        multiply(pow(cos(multiply(t, Math.PI, 0.5)), 3), cos(multiply(t, p)))
+      );
+  }
+
+  /**
+   * Use with `Animated.parallel()` to create a simple effect where the object
+   * animates back slightly as the animation starts.
+   *
+   * Wolfram Plot:
+   *
+   * - http://tiny.cc/back_default (s = 1.70158, default)
+   */
+  static back(s) {
+    if (s === undefined) {
+      s = 1.70158;
+    }
+    return (t) => multiply(t, t, sub(multiply(add(s, 1), t), s));
+  }
+
+  /**
+   * Provides a simple bouncing effect.
+   *
+   * http://easings.net/#easeInBounce
+   */
+  static bounce(t) {
+    const sq = (v) => multiply(7.5625, v, v);
+    return cond(
+      lessThan(t, 1 / 2.75),
+      sq(t),
+      cond(
+        lessThan(t, 2 / 2.75),
+        add(0.75, sq(sub(t, 1.5 / 2.75))),
+        cond(
+          lessThan(t, 2.5 / 2.76),
+          add(0.9375, sq(sub(t, 2.25 / 2.75))),
+          add(0.984375, sq(sub(t, 2.625 / 2.75)))
+        )
+      )
+    );
+  }
+
+  /**
+   * Provides a cubic bezier curve, equivalent to CSS Transitions'
+   * `transition-timing-function`.
+   *
+   * A useful tool to visualize cubic bezier curves can be found at
+   * http://cubic-bezier.com/
+   */
+  static bezier(x1, y1, x2, y2) {
+    return (t) => new AnimatedBezier(t, x1, y1, x2, y2);
+  }
+
+  /**
+   * Runs an easing function forwards.
+   */
+  static in(easing) {
+    return easing;
+  }
+
+  /**
+   * Runs an easing function backwards.
+   */
+  static out(easing) {
+    return (t) => sub(1, easing(sub(1, t)));
+  }
+
+  /**
+   * Makes any easing function symmetrical. The easing function will run
+   * forwards for half of the duration, then backwards for the rest of the
+   * duration.
+   */
+  static inOut(easing) {
+    return (t) =>
+      cond(
+        lessThan(t, 0.5),
+        divide(easing(multiply(t, 2)), 2),
+        sub(1, divide(easing(multiply(sub(1, t), 2)), 2))
+      );
+  }
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/SpringConfig.js b/node_modules/react-native-reanimated/lib/reanimated1/SpringConfig.js
new file mode 100644
index 0000000..04d931b
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/SpringConfig.js
@@ -0,0 +1,79 @@
+function stiffnessFromOrigamiValue(oValue) {
+  return (oValue - 30) * 3.62 + 194;
+}
+
+function dampingFromOrigamiValue(oValue) {
+  return (oValue - 8) * 3 + 25;
+}
+
+function fromOrigamiTensionAndFriction(tension, friction) {
+  return {
+    stiffness: stiffnessFromOrigamiValue(tension),
+    damping: dampingFromOrigamiValue(friction),
+  };
+}
+
+function fromBouncinessAndSpeed(bounciness, speed) {
+  function normalize(value, startValue, endValue) {
+    return (value - startValue) / (endValue - startValue);
+  }
+
+  function projectNormal(n, start, end) {
+    return start + n * (end - start);
+  }
+
+  function linearInterpolation(t, start, end) {
+    return t * end + (1 - t) * start;
+  }
+
+  function quadraticOutInterpolation(t, start, end) {
+    return linearInterpolation(2 * t - t * t, start, end);
+  }
+
+  function b3Friction1(x) {
+    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
+  }
+
+  function b3Friction2(x) {
+    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
+  }
+
+  function b3Friction3(x) {
+    return (
+      0.00000045 * Math.pow(x, 3) -
+      0.000332 * Math.pow(x, 2) +
+      0.1078 * x +
+      5.84
+    );
+  }
+
+  function b3Nobounce(tension) {
+    if (tension <= 18) {
+      return b3Friction1(tension);
+    } else if (tension > 18 && tension <= 44) {
+      return b3Friction2(tension);
+    } else {
+      return b3Friction3(tension);
+    }
+  }
+
+  var b = normalize(bounciness / 1.7, 0, 20);
+  b = projectNormal(b, 0, 0.8);
+  var s = normalize(speed / 1.7, 0, 20);
+  var bouncyTension = projectNormal(s, 0.5, 200);
+  var bouncyFriction = quadraticOutInterpolation(
+    b,
+    b3Nobounce(bouncyTension),
+    0.01
+  );
+
+  return {
+    stiffness: stiffnessFromOrigamiValue(bouncyTension),
+    damping: dampingFromOrigamiValue(bouncyFriction),
+  };
+}
+
+module.exports = {
+  fromOrigamiTensionAndFriction,
+  fromBouncinessAndSpeed,
+};
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/Transitioning.js b/node_modules/react-native-reanimated/lib/reanimated1/Transitioning.js
new file mode 100644
index 0000000..a68a8a0
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/Transitioning.js
@@ -0,0 +1,158 @@
+import React from 'react';
+import { View, findNodeHandle } from 'react-native';
+import ReanimatedModule from '../ReanimatedModule';
+
+const TransitioningContext = React.createContext();
+
+function configFromProps(type, props) {
+  const config = { type };
+  if ('durationMs' in props) {
+    config.durationMs = props.durationMs;
+  }
+  if ('interpolation' in props) {
+    config.interpolation = props.interpolation;
+  }
+  if ('type' in props) {
+    config.animation = props.type;
+  }
+  if ('delayMs' in props) {
+    config.delayMs = props.delayMs;
+  }
+  if ('propagation' in props) {
+    config.propagation = props.propagation;
+  }
+  return config;
+}
+
+/**
+ * The below wrapper is used to support legacy context API with Context.Consumer
+ * render prop. We need it as we want to access `context` from within
+ * `componentDidMount` callback. If we decided to drop support for older
+ * react native we could rewrite it using hooks or `static contextType` API.
+ */
+function wrapTransitioningContext(Comp) {
+  return (props) => {
+    return (
+      <TransitioningContext.Consumer>
+        {(context) => <Comp context={context} {...props} />}
+      </TransitioningContext.Consumer>
+    );
+  };
+}
+
+class In extends React.Component {
+  componentDidMount() {
+    this.props.context.push(configFromProps('in', this.props));
+  }
+
+  render() {
+    return this.props.children || null;
+  }
+}
+
+class Change extends React.Component {
+  componentDidMount() {
+    this.props.context.push(configFromProps('change', this.props));
+  }
+
+  render() {
+    return this.props.children || null;
+  }
+}
+
+class Out extends React.Component {
+  componentDidMount() {
+    this.props.context.push(configFromProps('out', this.props));
+  }
+
+  render() {
+    return this.props.children || null;
+  }
+}
+
+class Together extends React.Component {
+  transitions = [];
+  componentDidMount() {
+    const config = configFromProps('group', this.props);
+    config.transitions = this.transitions;
+    this.props.context.push(config);
+  }
+
+  render() {
+    return (
+      <TransitioningContext.Provider value={this.transitions}>
+        {this.props.children}
+      </TransitioningContext.Provider>
+    );
+  }
+}
+
+class Sequence extends React.Component {
+  transitions = [];
+  componentDidMount() {
+    const config = configFromProps('group', this.props);
+    config.sequence = true;
+    config.transitions = this.transitions;
+    this.props.context.push(config);
+  }
+
+  render() {
+    return (
+      <TransitioningContext.Provider value={this.transitions}>
+        {this.props.children}
+      </TransitioningContext.Provider>
+    );
+  }
+}
+
+function createTransitioningComponent(Component) {
+  class Wrapped extends React.Component {
+    propTypes = Component.propTypes;
+    transitions = [];
+    viewRef = React.createRef();
+
+    componentDidMount() {
+      if (this.props.animateMount) {
+        this.animateNextTransition();
+      }
+    }
+
+    setNativeProps(props) {
+      this.viewRef.current.setNativeProps(props);
+    }
+
+    animateNextTransition() {
+      const viewTag = findNodeHandle(this.viewRef.current);
+      ReanimatedModule.animateNextTransition(viewTag, {
+        transitions: this.transitions,
+      });
+    }
+
+    render() {
+      const { transition, ...rest } = this.props;
+      return (
+        <React.Fragment>
+          <TransitioningContext.Provider value={this.transitions}>
+            {transition}
+          </TransitioningContext.Provider>
+          <Component {...rest} ref={this.viewRef} collapsable={false} />
+        </React.Fragment>
+      );
+    }
+  }
+  return Wrapped;
+}
+
+const Transitioning = {
+  View: createTransitioningComponent(View),
+};
+
+const Transition = {
+  Sequence: wrapTransitioningContext(Sequence),
+  Together: wrapTransitioningContext(Together),
+  In: wrapTransitioningContext(In),
+  Out: wrapTransitioningContext(Out),
+  Change: wrapTransitioningContext(Change),
+};
+
+export { Transitioning, Transition, createTransitioningComponent };
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/animations/Animation.js b/node_modules/react-native-reanimated/lib/reanimated1/animations/Animation.js
new file mode 100644
index 0000000..4aebf5a
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/animations/Animation.js
@@ -0,0 +1,32 @@
+import AnimatedValue from '../core/InternalAnimatedValue';
+
+class Animation {
+  static springDefaultState() {
+    return {
+      position: new AnimatedValue(0),
+      finished: new AnimatedValue(0),
+      velocity: new AnimatedValue(0),
+      time: new AnimatedValue(0),
+    };
+  }
+
+  static decayDefaultState() {
+    return {
+      position: new AnimatedValue(0),
+      finished: new AnimatedValue(0),
+      velocity: new AnimatedValue(0),
+      time: new AnimatedValue(0),
+    };
+  }
+
+  static timingDefaultState() {
+    return {
+      position: new AnimatedValue(0),
+      finished: new AnimatedValue(0),
+      time: new AnimatedValue(0),
+      frameTime: new AnimatedValue(0),
+    };
+  }
+}
+
+export default Animation;
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/animations/SpringUtils.js b/node_modules/react-native-reanimated/lib/reanimated1/animations/SpringUtils.js
new file mode 100644
index 0000000..3f86c3a
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/animations/SpringUtils.js
@@ -0,0 +1,199 @@
+import {
+  cond,
+  sub,
+  divide,
+  multiply,
+  add,
+  pow,
+  lessOrEq,
+  and,
+  greaterThan,
+} from './../base';
+import AnimatedValue from './../core/InternalAnimatedValue';
+
+function stiffnessFromOrigamiValue(oValue) {
+  return (oValue - 30) * 3.62 + 194;
+}
+
+function dampingFromOrigamiValue(oValue) {
+  return (oValue - 8) * 3 + 25;
+}
+
+function stiffnessFromOrigamiNode(oValue) {
+  return add(multiply(sub(oValue, 30), 3.62), 194);
+}
+
+function dampingFromOrigamiNode(oValue) {
+  return add(multiply(sub(oValue, 8), 3), 25);
+}
+
+function makeConfigFromOrigamiTensionAndFriction(prevConfig) {
+  const { tension, friction, ...rest } = prevConfig;
+  return {
+    ...rest,
+    stiffness:
+      typeof tension === 'number'
+        ? stiffnessFromOrigamiValue(tension)
+        : stiffnessFromOrigamiNode(tension),
+    damping:
+      typeof friction === 'number'
+        ? dampingFromOrigamiValue(friction)
+        : dampingFromOrigamiNode(friction),
+  };
+}
+
+function makeConfigFromBouncinessAndSpeed(prevConfig) {
+  const { bounciness, speed, ...rest } = prevConfig;
+  if (typeof bounciness === 'number' && typeof speed === 'number') {
+    return fromBouncinessAndSpeedNumbers(bounciness, speed, rest);
+  }
+  return fromBouncinessAndSpeedNodes(bounciness, speed, rest);
+}
+
+function fromBouncinessAndSpeedNodes(bounciness, speed, rest) {
+  function normalize(value, startValue, endValue) {
+    return divide(sub(value, startValue), sub(endValue, startValue));
+  }
+
+  function projectNormal(n, start, end) {
+    return add(start, multiply(n, sub(end, start)));
+  }
+
+  function linearInterpolation(t, start, end) {
+    return add(multiply(t, end), multiply(sub(1, t), start));
+  }
+
+  function quadraticOutInterpolation(t, start, end) {
+    return linearInterpolation(sub(multiply(2, t), multiply(t, t)), start, end);
+  }
+
+  function b3Friction1(x) {
+    return add(
+      sub(multiply(0.0007, pow(x, 3)), multiply(0.031, pow(x, 2))),
+      multiply(0.64, x),
+      1.28
+    );
+  }
+
+  function b3Friction2(x) {
+    return add(
+      sub(multiply(0.000044, pow(x, 3)), multiply(0.006, pow(x, 2))),
+      multiply(0.36, x),
+      2
+    );
+  }
+
+  function b3Friction3(x) {
+    return add(
+      sub(multiply(0.00000045, pow(x, 3)), multiply(0.000332, pow(x, 2))),
+      multiply(0.1078, x),
+      5.84
+    );
+  }
+
+  function b3Nobounce(tension) {
+    return cond(
+      lessOrEq(tension, 18),
+      b3Friction1(tension),
+      cond(
+        and(greaterThan(tension, 18), lessOrEq(tension, 44)),
+        b3Friction2(tension),
+        b3Friction3(tension)
+      )
+    );
+  }
+
+  let b = normalize(divide(bounciness, 1.7), 0, 20);
+  b = projectNormal(b, 0, 0.8);
+  const s = normalize(divide(speed, 1.7), 0, 20);
+  const bouncyTension = projectNormal(s, 0.5, 200);
+  const bouncyFriction = quadraticOutInterpolation(
+    b,
+    b3Nobounce(bouncyTension),
+    0.01
+  );
+  return {
+    ...rest,
+    stiffness: stiffnessFromOrigamiNode(bouncyTension),
+    damping: dampingFromOrigamiNode(bouncyFriction),
+  };
+}
+
+function fromBouncinessAndSpeedNumbers(bounciness, speed, rest) {
+  function normalize(value, startValue, endValue) {
+    return (value - startValue) / (endValue - startValue);
+  }
+
+  function projectNormal(n, start, end) {
+    return start + n * (end - start);
+  }
+
+  function linearInterpolation(t, start, end) {
+    return t * end + (1 - t) * start;
+  }
+
+  function quadraticOutInterpolation(t, start, end) {
+    return linearInterpolation(2 * t - t * t, start, end);
+  }
+
+  function b3Friction1(x) {
+    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
+  }
+
+  function b3Friction2(x) {
+    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
+  }
+
+  function b3Friction3(x) {
+    return (
+      0.00000045 * Math.pow(x, 3) -
+      0.000332 * Math.pow(x, 2) +
+      0.1078 * x +
+      5.84
+    );
+  }
+
+  function b3Nobounce(tension) {
+    if (tension <= 18) {
+      return b3Friction1(tension);
+    } else if (tension > 18 && tension <= 44) {
+      return b3Friction2(tension);
+    } else {
+      return b3Friction3(tension);
+    }
+  }
+
+  let b = normalize(bounciness / 1.7, 0, 20);
+  b = projectNormal(b, 0, 0.8);
+  const s = normalize(speed / 1.7, 0, 20);
+  const bouncyTension = projectNormal(s, 0.5, 200);
+  const bouncyFriction = quadraticOutInterpolation(
+    b,
+    b3Nobounce(bouncyTension),
+    0.01
+  );
+
+  return {
+    ...rest,
+    stiffness: stiffnessFromOrigamiValue(bouncyTension),
+    damping: dampingFromOrigamiValue(bouncyFriction),
+  };
+}
+
+function makeDefaultConfig() {
+  return {
+    stiffness: new AnimatedValue(100),
+    mass: new AnimatedValue(1),
+    damping: new AnimatedValue(10),
+    overshootClamping: false,
+    restSpeedThreshold: 0.001,
+    restDisplacementThreshold: 0.001,
+    toValue: new AnimatedValue(0),
+  };
+}
+
+export default {
+  makeDefaultConfig,
+  makeConfigFromBouncinessAndSpeed,
+  makeConfigFromOrigamiTensionAndFriction,
+};
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/animations/backwardCompatibleAnimWrapper.js b/node_modules/react-native-reanimated/lib/reanimated1/animations/backwardCompatibleAnimWrapper.js
new file mode 100644
index 0000000..89cfa77
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/animations/backwardCompatibleAnimWrapper.js
@@ -0,0 +1,117 @@
+import {
+  always,
+  block,
+  call,
+  clockRunning,
+  cond,
+  set,
+  startClock,
+  stopClock,
+} from '../base';
+import Clock from '../core/AnimatedClock';
+import { evaluateOnce } from '../derived/evaluateOnce';
+
+function createOldAnimationObject(node, animationStateDefaults, value, config) {
+  const newClock = new Clock();
+  const currentState = animationStateDefaults();
+  let alwaysNode;
+  let isStarted = false;
+  let isDone = false;
+  let wasStopped = false;
+  let animationCallback;
+  const animation = {
+    start: (currentAnimationCallback) => {
+      animationCallback = currentAnimationCallback;
+      if (isStarted) {
+        animationCallback && animationCallback({ finished: false });
+        return;
+      }
+      if (isDone) {
+        console.warn('Animation has been finished before');
+        // inconsistent with React Native
+        return;
+      }
+
+      if (!value.isNativelyInitialized()) {
+        return;
+      }
+
+      isStarted = true;
+      evaluateOnce(
+        set(currentState.position, value),
+        currentState.position,
+        () => {
+          alwaysNode = always(
+            set(
+              value,
+              block([
+                cond(clockRunning(newClock), 0, startClock(newClock)),
+                node(newClock, currentState, config),
+                cond(currentState.finished, [
+                  call([], () => {
+                    isStarted = false;
+                    if (!wasStopped) {
+                      isDone = true;
+                    }
+                    value.__detachAnimation(animation);
+                    isDone = true;
+                    if (!wasStopped) {
+                      wasStopped = false;
+                    }
+                  }),
+                  stopClock(newClock),
+                ]),
+                currentState.position,
+              ])
+            )
+          );
+          value.__attachAnimation(animation);
+          alwaysNode.__addChild(value);
+        }
+      );
+    },
+    __detach: () => {
+      animationCallback && animationCallback({ finished: isDone });
+      animationCallback = null;
+      value.__initialized && alwaysNode.__removeChild(value);
+    },
+    stop: () => {
+      if (isDone) {
+        console.warn(
+          'Calling stop has no effect as the animation has already completed'
+        );
+        return;
+      }
+      if (!isStarted) {
+        console.warn(
+          "Calling stop has no effect as the animation hasn't been started"
+        );
+        return;
+      }
+      wasStopped = true;
+      evaluateOnce(set(currentState.finished, 1), currentState.finished);
+    },
+    __stopImmediately_testOnly: (result) => {
+      animation.stop();
+      isDone = result;
+      value.__detachAnimation(animation);
+    },
+  };
+  return animation;
+}
+
+/**
+ * Depending on the arguments list we either return animation node or return an
+ * animation object that is compatible with the original Animated API
+ */
+export default function backwardsCompatibleAnimWrapper(
+  node,
+  animationStateDefaults
+) {
+  return (clock, state, config) => {
+    if (config !== undefined) {
+      return node(clock, state, config);
+    }
+    return createOldAnimationObject(node, animationStateDefaults, clock, state);
+  };
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/animations/decay.js b/node_modules/react-native-reanimated/lib/reanimated1/animations/decay.js
new file mode 100644
index 0000000..8c77b2e
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/animations/decay.js
@@ -0,0 +1,54 @@
+import {
+  cond,
+  sub,
+  pow,
+  divide,
+  multiply,
+  add,
+  block,
+  set,
+  lessThan,
+  proc,
+  abs,
+} from '../base';
+
+const VELOCITY_EPS = 5;
+
+function decay(clock, state, config) {
+  const lastTime = cond(state.time, state.time, clock);
+  const deltaTime = sub(clock, lastTime);
+
+  // v0 = v / 1000
+  // v = v0 * powf(deceleration, dt);
+  // v = v * 1000;
+
+  // x0 = x;
+  // x = x0 + v0 * deceleration * (1 - powf(deceleration, dt)) / (1 - deceleration)
+  const kv = pow(config.deceleration, deltaTime);
+  const kx = divide(
+    multiply(config.deceleration, sub(1, kv)),
+    sub(1, config.deceleration)
+  );
+  const v0 = divide(state.velocity, 1000);
+  const v = multiply(v0, kv, 1000);
+  const x = add(state.position, multiply(v0, kx));
+  return block([
+    set(state.position, x),
+    set(state.velocity, v),
+    set(state.time, clock),
+    cond(lessThan(abs(v), VELOCITY_EPS), set(state.finished, 1)),
+  ]);
+}
+
+const procDecay = proc(
+  (clock, time, velocity, position, finished, deceleration) =>
+    decay(clock, { time, velocity, position, finished }, { deceleration })
+);
+
+export default function decayAnimation(
+  clock,
+  { time, velocity, position, finished },
+  { deceleration }
+) {
+  return procDecay(clock, time, velocity, position, finished, deceleration);
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/animations/spring.js b/node_modules/react-native-reanimated/lib/reanimated1/animations/spring.js
new file mode 100644
index 0000000..54865de
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/animations/spring.js
@@ -0,0 +1,198 @@
+import {
+  cond,
+  sub,
+  divide,
+  multiply,
+  sqrt,
+  add,
+  block,
+  set,
+  exp,
+  sin,
+  cos,
+  eq,
+  or,
+  neq,
+  and,
+  lessThan,
+  greaterThan,
+  proc,
+  min,
+  abs,
+} from '../base';
+import AnimatedValue from '../core/InternalAnimatedValue';
+
+const MAX_STEPS_MS = 64;
+
+function spring(clock, state, config) {
+  const lastTime = cond(state.time, state.time, clock);
+
+  const deltaTime = min(sub(clock, lastTime), MAX_STEPS_MS);
+
+  const c = config.damping;
+  const m = config.mass;
+  const k = config.stiffness;
+
+  const v0 = multiply(-1, state.velocity);
+  const x0 = sub(config.toValue, state.position);
+
+  const zeta = divide(c, multiply(2, sqrt(multiply(k, m)))); // damping ratio
+  const omega0 = sqrt(divide(k, m)); // undamped angular frequency of the oscillator (rad/ms)
+  const omega1 = multiply(omega0, sqrt(sub(1, multiply(zeta, zeta)))); // exponential decay
+
+  const t = divide(deltaTime, 1000); // in seconds
+
+  const sin1 = sin(multiply(omega1, t));
+  const cos1 = cos(multiply(omega1, t));
+
+  // under damped
+  const underDampedEnvelope = exp(multiply(-1, zeta, omega0, t));
+  const underDampedFrag1 = multiply(
+    underDampedEnvelope,
+    add(
+      multiply(sin1, divide(add(v0, multiply(zeta, omega0, x0)), omega1)),
+      multiply(x0, cos1)
+    )
+  );
+  const underDampedPosition = sub(config.toValue, underDampedFrag1);
+  // This looks crazy -- it's actually just the derivative of the oscillation function
+  const underDampedVelocity = sub(
+    multiply(zeta, omega0, underDampedFrag1),
+    multiply(
+      underDampedEnvelope,
+      sub(
+        multiply(cos1, add(v0, multiply(zeta, omega0, x0))),
+        multiply(omega1, x0, sin1)
+      )
+    )
+  );
+
+  // critically damped
+  const criticallyDampedEnvelope = exp(multiply(-1, omega0, t));
+  const criticallyDampedPosition = sub(
+    config.toValue,
+    multiply(
+      criticallyDampedEnvelope,
+      add(x0, multiply(add(v0, multiply(omega0, x0)), t))
+    )
+  );
+  const criticallyDampedVelocity = multiply(
+    criticallyDampedEnvelope,
+    add(
+      multiply(v0, sub(multiply(t, omega0), 1)),
+      multiply(t, x0, omega0, omega0)
+    )
+  );
+
+  // conditions for stopping the spring animations
+  const prevPosition = state.prevPosition
+    ? state.prevPosition
+    : new AnimatedValue(0);
+
+  const isOvershooting = cond(
+    and(config.overshootClamping, neq(config.stiffness, 0)),
+    cond(
+      lessThan(prevPosition, config.toValue),
+      greaterThan(state.position, config.toValue),
+      lessThan(state.position, config.toValue)
+    )
+  );
+  const isVelocity = lessThan(abs(state.velocity), config.restSpeedThreshold);
+  const isDisplacement = or(
+    eq(config.stiffness, 0),
+    lessThan(
+      abs(sub(config.toValue, state.position)),
+      config.restDisplacementThreshold
+    )
+  );
+
+  return block([
+    set(prevPosition, state.position),
+    cond(
+      lessThan(zeta, 1),
+      [
+        set(state.position, underDampedPosition),
+        set(state.velocity, underDampedVelocity),
+      ],
+      [
+        set(state.position, criticallyDampedPosition),
+        set(state.velocity, criticallyDampedVelocity),
+      ]
+    ),
+    set(state.time, clock),
+    cond(or(isOvershooting, and(isVelocity, isDisplacement)), [
+      cond(neq(config.stiffness, 0), [
+        set(state.velocity, 0),
+        set(state.position, config.toValue),
+      ]),
+      set(state.finished, 1),
+    ]),
+  ]);
+}
+
+const procSpring = proc(
+  (
+    finished,
+    velocity,
+    position,
+    time,
+    prevPosition,
+    toValue,
+    damping,
+    mass,
+    stiffness,
+    overshootClamping,
+    restSpeedThreshold,
+    restDisplacementThreshold,
+    clock
+  ) =>
+    spring(
+      clock,
+      {
+        finished,
+        velocity,
+        position,
+        time,
+        prevPosition,
+      },
+      {
+        toValue,
+        damping,
+        mass,
+        stiffness,
+        overshootClamping,
+        restDisplacementThreshold,
+        restSpeedThreshold,
+      }
+    )
+);
+
+export default function springAnimation(
+  clock,
+  { finished, velocity, position, time, prevPosition },
+  {
+    toValue,
+    damping,
+    mass,
+    stiffness,
+    overshootClamping,
+    restDisplacementThreshold,
+    restSpeedThreshold,
+  }
+) {
+  return procSpring(
+    finished,
+    velocity,
+    position,
+    time,
+    prevPosition,
+    toValue,
+    damping,
+    mass,
+    stiffness,
+    overshootClamping,
+    restSpeedThreshold,
+    restDisplacementThreshold,
+    clock
+  );
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/animations/timing.js b/node_modules/react-native-reanimated/lib/reanimated1/animations/timing.js
new file mode 100644
index 0000000..6577f6a
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/animations/timing.js
@@ -0,0 +1,74 @@
+import {
+  cond,
+  sub,
+  divide,
+  multiply,
+  add,
+  block,
+  set,
+  greaterOrEq,
+  proc,
+} from '../base';
+
+const internalTiming = proc(function (
+  clock,
+  time,
+  frameTime,
+  position,
+  finished,
+  toValue,
+  duration,
+  nextProgress,
+  progress,
+  newFrameTime
+) {
+  const state = {
+    time,
+    finished,
+    frameTime,
+    position,
+  };
+
+  const config = {
+    duration,
+    toValue,
+  };
+
+  const distanceLeft = sub(config.toValue, state.position);
+  const fullDistance = divide(distanceLeft, sub(1, progress));
+  const startPosition = sub(config.toValue, fullDistance);
+  const nextPosition = add(startPosition, multiply(fullDistance, nextProgress));
+
+  return block([
+    cond(
+      greaterOrEq(newFrameTime, config.duration),
+      [set(state.position, config.toValue), set(state.finished, 1)],
+      set(state.position, nextPosition)
+    ),
+    set(state.frameTime, newFrameTime),
+    set(state.time, clock),
+  ]);
+});
+
+export default function timing(clock, state, config) {
+  if (config.duration === 0) {
+    // when duration is zero we end the timing immediately
+    return block([set(state.position, config.toValue), set(state.finished, 1)]);
+  }
+  const lastTime = cond(state.time, state.time, clock);
+  const newFrameTime = add(state.frameTime, sub(clock, lastTime));
+  const nextProgress = config.easing(divide(newFrameTime, config.duration));
+  const progress = config.easing(divide(state.frameTime, config.duration));
+  return internalTiming(
+    clock,
+    state.time,
+    state.frameTime,
+    state.position,
+    state.finished,
+    config.toValue,
+    config.duration,
+    nextProgress,
+    progress,
+    newFrameTime
+  );
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/base.js b/node_modules/react-native-reanimated/lib/reanimated1/base.js
new file mode 100644
index 0000000..c61bd5f
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/base.js
@@ -0,0 +1,13 @@
+export { createAnimatedCond as cond } from './core/AnimatedCond';
+export { createAnimatedSet as set } from './core/AnimatedSet';
+export { createAnimatedStartClock as startClock } from './core/AnimatedStartClock';
+export { createAnimatedStopClock as stopClock } from './core/AnimatedStopClock';
+export { createAnimatedClockTest as clockRunning } from './core/AnimatedClockTest';
+export { createAnimatedDebug as debug } from './core/AnimatedDebug';
+export { createAnimatedCall as call } from './core/AnimatedCall';
+export { createAnimatedEvent as event } from './core/AnimatedEvent';
+export { createAnimatedAlways as always } from './core/AnimatedAlways';
+export { createAnimatedConcat as concat } from './core/AnimatedConcat';
+export { createAnimatedBlock as block, adapt } from './core/AnimatedBlock';
+export { createAnimatedFunction as proc } from './core/AnimatedFunction';
+export * from './operators';
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedAlways.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedAlways.js
new file mode 100644
index 0000000..1b44ac3
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedAlways.js
@@ -0,0 +1,33 @@
+import AnimatedNode from './AnimatedNode';
+import invariant from 'invariant';
+import { val } from '../val';
+
+class AnimatedAlways extends AnimatedNode {
+  _what;
+
+  constructor(what) {
+    invariant(
+      what instanceof AnimatedNode,
+      `Reanimated: Animated.always node argument should be of type AnimatedNode but got ${what}`
+    );
+    super({ type: 'always', what }, [what]);
+    this._what = what;
+  }
+
+  toString() {
+    return `AnimatedAlways, id: ${this.__nodeID}`;
+  }
+
+  update() {
+    this.__getValue();
+  }
+
+  __onEvaluate() {
+    val(this._what);
+    return 0;
+  }
+}
+
+export function createAnimatedAlways(item) {
+  return new AnimatedAlways(item);
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedBezier.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedBezier.js
new file mode 100644
index 0000000..510668c
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedBezier.js
@@ -0,0 +1,150 @@
+import { val } from '../val';
+import AnimatedNode from './AnimatedNode';
+import invariant from 'invariant';
+
+// These values are established by empiricism with tests (tradeoff: performance VS precision)
+var NEWTON_ITERATIONS = 4;
+var NEWTON_MIN_SLOPE = 0.001;
+var SUBDIVISION_PRECISION = 0.0000001;
+var SUBDIVISION_MAX_ITERATIONS = 10;
+
+var kSplineTableSize = 11;
+var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
+
+var float32ArraySupported = typeof Float32Array === 'function';
+
+function A(aA1, aA2) {
+  return 1.0 - 3.0 * aA2 + 3.0 * aA1;
+}
+function B(aA1, aA2) {
+  return 3.0 * aA2 - 6.0 * aA1;
+}
+function C(aA1) {
+  return 3.0 * aA1;
+}
+
+// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
+function calcBezier(aT, aA1, aA2) {
+  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
+}
+
+// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
+function getSlope(aT, aA1, aA2) {
+  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
+}
+
+function binarySubdivide(aX, aA, aB, mX1, mX2) {
+  var currentX = 0;
+  var currentT = 0;
+  var i = 0;
+  do {
+    currentT = aA + (aB - aA) / 2.0;
+    currentX = calcBezier(currentT, mX1, mX2) - aX;
+    if (currentX > 0.0) {
+      aB = currentT;
+    } else {
+      aA = currentT;
+    }
+  } while (
+    Math.abs(currentX) > SUBDIVISION_PRECISION &&
+    ++i < SUBDIVISION_MAX_ITERATIONS
+  );
+  return currentT;
+}
+
+function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
+  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
+    var currentSlope = getSlope(aGuessT, mX1, mX2);
+    if (currentSlope === 0.0) {
+      return aGuessT;
+    }
+    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
+    aGuessT -= currentX / currentSlope;
+  }
+  return aGuessT;
+}
+
+function bezier(mX1, mY1, mX2, mY2) {
+  // Precompute samples table
+  var sampleValues = float32ArraySupported
+    ? new Float32Array(kSplineTableSize)
+    : new Array(kSplineTableSize);
+  if (mX1 !== mY1 || mX2 !== mY2) {
+    for (var i = 0; i < kSplineTableSize; ++i) {
+      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
+    }
+  }
+
+  function getTForX(aX) {
+    var intervalStart = 0.0;
+    var currentSample = 1;
+    var lastSample = kSplineTableSize - 1;
+
+    for (
+      ;
+      currentSample !== lastSample && sampleValues[currentSample] <= aX;
+      ++currentSample
+    ) {
+      intervalStart += kSampleStepSize;
+    }
+    --currentSample;
+
+    // Interpolate to provide an initial guess for t
+    var dist =
+      (aX - sampleValues[currentSample]) /
+      (sampleValues[currentSample + 1] - sampleValues[currentSample]);
+    var guessForT = intervalStart + dist * kSampleStepSize;
+
+    var initialSlope = getSlope(guessForT, mX1, mX2);
+    if (initialSlope >= NEWTON_MIN_SLOPE) {
+      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
+    } else if (initialSlope === 0.0) {
+      return guessForT;
+    } else {
+      return binarySubdivide(
+        aX,
+        intervalStart,
+        intervalStart + kSampleStepSize,
+        mX1,
+        mX2
+      );
+    }
+  }
+
+  return function BezierEasing(x) {
+    if (mX1 === mY1 && mX2 === mY2) {
+      return x; // linear
+    }
+    // Because JavaScript number are imprecise, we should guarantee the extremes are right.
+    if (x === 0) {
+      return 0;
+    }
+    if (x === 1) {
+      return 1;
+    }
+    return calcBezier(getTForX(x), mY1, mY2);
+  };
+}
+
+export default class AnimatedBezier extends AnimatedNode {
+  _value;
+  _bezier;
+
+  constructor(value, mX1, mY1, mX2, mY2) {
+    invariant(
+      value instanceof AnimatedNode,
+      `Reanimated: Bezier node argument should be of type AnimatedNode but got ${value}`
+    );
+    super({ type: 'bezier', mX1, mY1, mX2, mY2, input: value }, [value]);
+    this._value = value;
+    this._bezier = bezier(mX1, mY1, mX2, mY2);
+  }
+
+  toString() {
+    return `AnimatedBezier, id: ${this.__nodeID}`;
+  }
+
+  __onEvaluate() {
+    return this._bezier(val(this._value));
+  }
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedBlock.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedBlock.js
new file mode 100644
index 0000000..7a77576
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedBlock.js
@@ -0,0 +1,52 @@
+import invariant from 'invariant';
+import { val } from '../val';
+import AnimatedNode from './AnimatedNode';
+import InternalAnimatedValue from './InternalAnimatedValue';
+
+class AnimatedBlock extends AnimatedNode {
+  _array;
+
+  constructor(array) {
+    invariant(
+      array.every((el) => el instanceof AnimatedNode),
+      `Reanimated: Animated.block node argument should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes`
+    );
+    super({ type: 'block', block: array }, array);
+    this._array = array;
+  }
+
+  toString() {
+    return `AnimatedBlock, id: ${this.__nodeID}`;
+  }
+
+  __onEvaluate() {
+    let result;
+    this._array.forEach((node) => {
+      result = val(node);
+    });
+    return result;
+  }
+}
+
+export function createAnimatedBlock(items) {
+  return adapt(items);
+}
+
+function nodify(v) {
+  if (typeof v === 'object' && v?.__isProxy) {
+    if (!v.__val) {
+      v.__val = new InternalAnimatedValue(0);
+    }
+    return v.__val;
+  }
+  // TODO: cache some typical static values (e.g. 0, 1, -1)
+  return v instanceof AnimatedNode
+    ? v
+    : InternalAnimatedValue.valueForConstant(v);
+}
+
+export function adapt(v) {
+  return Array.isArray(v)
+    ? new AnimatedBlock(v.map((node) => adapt(node)))
+    : nodify(v);
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCall.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCall.js
new file mode 100644
index 0000000..cffb4e8
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCall.js
@@ -0,0 +1,55 @@
+import invariant from 'invariant';
+import ReanimatedEventEmitter from '../../ReanimatedEventEmitter';
+import { val } from '../val';
+import AnimatedNode from './AnimatedNode';
+
+const NODE_MAPPING = new Map();
+
+function listener(data) {
+  const node = NODE_MAPPING.get(data.id);
+  node && node._callback(data.args);
+}
+
+class AnimatedCall extends AnimatedNode {
+  _callback;
+  _args;
+
+  constructor(args, jsFunction) {
+    invariant(
+      args.every((el) => el instanceof AnimatedNode),
+      `Reanimated: Animated.call node args should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes`
+    );
+    super({ type: 'call', input: args }, args);
+    this._callback = jsFunction;
+    this._args = args;
+  }
+
+  toString() {
+    return `AnimatedCall, id: ${this.__nodeID}`;
+  }
+
+  __attach() {
+    super.__attach();
+    NODE_MAPPING.set(this.__nodeID, this);
+    if (NODE_MAPPING.size === 1) {
+      ReanimatedEventEmitter.addListener('onReanimatedCall', listener);
+    }
+  }
+
+  __detach() {
+    NODE_MAPPING.delete(this.__nodeID);
+    if (NODE_MAPPING.size === 0) {
+      ReanimatedEventEmitter.removeAllListeners('onReanimatedCall');
+    }
+    super.__detach();
+  }
+
+  __onEvaluate() {
+    this._callback(this._args.map(val));
+    return 0;
+  }
+}
+
+export function createAnimatedCall(args, func) {
+  return new AnimatedCall(args, func);
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCallFunc.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCallFunc.js
new file mode 100644
index 0000000..2a93469
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCallFunc.js
@@ -0,0 +1,72 @@
+import AnimatedNode, { getCallID, setCallID } from './AnimatedNode';
+import { adapt } from './AnimatedBlock';
+import { val } from '../val';
+import invariant from 'invariant';
+
+class AnimatedCallFunc extends AnimatedNode {
+  _previousCallID;
+  _what;
+  _args;
+  _params;
+  constructor(what, args, params) {
+    invariant(
+      what instanceof AnimatedNode,
+      `Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got ${what}`
+    );
+    invariant(
+      args.every((el) => el instanceof AnimatedNode),
+      `Reanimated: every AnimatedCallFunc 'args' argument should be of type AnimatedNode but got ${args}`
+    );
+    invariant(
+      params.every((el) => el instanceof AnimatedNode),
+      `Reanimated: every AnimatedCallFunc 'params' argument should be of type AnimatedNode but got ${params}`
+    );
+    super(
+      {
+        type: 'callfunc',
+        what,
+        args,
+        params,
+      },
+      [...args]
+    );
+    this._what = what;
+    this._args = args;
+    this._params = params;
+  }
+
+  toString() {
+    return `AnimatedCallFunc, id: ${this.__nodeID}`;
+  }
+
+  beginContext() {
+    this._previousCallID = getCallID();
+    setCallID(getCallID() + '/' + this.__nodeID);
+
+    this._params.forEach((param, index) => {
+      param.beginContext(this._args[index], this._previousCallID);
+    });
+  }
+
+  endContext() {
+    this._params.forEach((param) => {
+      param.endContext();
+    });
+    setCallID(this._previousCallID);
+  }
+
+  __onEvaluate() {
+    this.beginContext();
+    const value = val(this._what);
+    this.endContext();
+    return value;
+  }
+}
+
+export function createAnimatedCallFunc(proc, args, params) {
+  return new AnimatedCallFunc(
+    proc,
+    args.map((p) => adapt(p)),
+    params
+  );
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedClock.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedClock.js
new file mode 100644
index 0000000..1706a54
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedClock.js
@@ -0,0 +1,90 @@
+import InternalAnimatedValue from './InternalAnimatedValue';
+import AnimatedNode from './AnimatedNode';
+import { val } from '../val';
+
+class AnimatedMainClock extends InternalAnimatedValue {
+  _frameCallback;
+
+  constructor() {
+    super({ type: 'MAIN_CLOCK' });
+  }
+
+  __onEvaluate() {
+    return +new Date();
+  }
+
+  _runFrame = () => {
+    this._updateValue(0);
+    if (this.__children.length > 0) {
+      this._frameCallback = requestAnimationFrame(this._runFrame);
+    }
+  };
+
+  __attach() {
+    super.__attach();
+    if (!this._frameCallback) {
+      this._frameCallback = requestAnimationFrame(this._runFrame);
+    }
+  }
+
+  __detach() {
+    if (this._frameCallback) {
+      cancelAnimationFrame(this._frameCallback);
+      this._frameCallback = null;
+    }
+    super.__detach();
+  }
+}
+
+const mainClock = new AnimatedMainClock();
+
+export default class AnimatedClock extends AnimatedNode {
+  _started;
+  _attached;
+
+  constructor() {
+    super({ type: 'clock' });
+  }
+
+  toString() {
+    return `AnimatedClock, id: ${this.__nodeID}`;
+  }
+
+  __onEvaluate() {
+    return val(mainClock);
+  }
+
+  __attach() {
+    super.__attach();
+    if (this._started && !this._attached) {
+      mainClock.__addChild(this);
+    }
+    this._attached = true;
+  }
+
+  __detach() {
+    if (this._started && this._attached) {
+      mainClock.__removeChild(this);
+    }
+    this._attached = false;
+    super.__detach();
+  }
+
+  start() {
+    if (!this._started && this._attached) {
+      mainClock.__addChild(this);
+    }
+    this._started = true;
+  }
+
+  stop() {
+    if (this._started && this._attached) {
+      mainClock.__removeChild(this);
+    }
+    this._started = false;
+  }
+
+  isStarted() {
+    return this._started;
+  }
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedClockTest.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedClockTest.js
new file mode 100644
index 0000000..c279ccf
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedClockTest.js
@@ -0,0 +1,22 @@
+import AnimatedNode from './AnimatedNode';
+
+class AnimatedClockTest extends AnimatedNode {
+  _clockNode;
+
+  constructor(clockNode) {
+    super({ type: 'clockTest', clock: clockNode });
+    this._clockNode = clockNode;
+  }
+
+  toString() {
+    return `AnimatedClockTest, id: ${this.__nodeID}`;
+  }
+
+  __onEvaluate() {
+    return this._clockNode.isStarted() ? 1 : 0;
+  }
+}
+
+export function createAnimatedClockTest(clock) {
+  return new AnimatedClockTest(clock);
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCode.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCode.js
new file mode 100644
index 0000000..5b39e86
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCode.js
@@ -0,0 +1,32 @@
+import useCode from '../derived/useCode';
+import AnimatedNode from './AnimatedNode';
+
+function assertNodesNotNull(code, children, exec) {
+  if (!code) {
+    const error = !children
+      ? `Got "${typeof children}" type passed to children`
+      : `Got "${typeof exec}" type passed to exec`;
+
+    throw new Error(
+      `<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node. ${error}`
+    );
+  }
+}
+
+function Code({ exec, children, dependencies }) {
+  const nodes = children || exec;
+
+  let code = null;
+  if (nodes instanceof AnimatedNode) {
+    code = () => nodes;
+  } else if (typeof nodes === 'function') {
+    code = nodes;
+  }
+
+  assertNodesNotNull(code, children, exec);
+
+  useCode(code, dependencies);
+  return null;
+}
+
+export default Code;
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedConcat.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedConcat.js
new file mode 100644
index 0000000..cd44ac7
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedConcat.js
@@ -0,0 +1,32 @@
+import invariant from 'invariant';
+import { adapt } from '../core/AnimatedBlock';
+import AnimatedNode from './AnimatedNode';
+import { val } from '../val';
+
+class AnimatedConcat extends AnimatedNode {
+  constructor(input) {
+    invariant(
+      input.every(
+        (el) =>
+          el instanceof AnimatedNode ||
+          typeof el === 'number' ||
+          typeof el === 'string'
+      ),
+      `Reanimated: Animated.concat node arguments should be of type AnimatedNode or String or Number. One or more of them are not of that type. Node: ${input}`
+    );
+    super({ type: 'concat', input }, input);
+    this._input = input;
+  }
+
+  __onEvaluate() {
+    return this._input.reduce((prev, current) => prev + val(current), '');
+  }
+
+  toString() {
+    return `AnimatedConcat, id: ${this.__nodeID}`;
+  }
+}
+
+export function createAnimatedConcat(...args) {
+  return new AnimatedConcat(args.map(adapt));
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCond.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCond.js
new file mode 100644
index 0000000..df1772b
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCond.js
@@ -0,0 +1,57 @@
+import invariant from 'invariant';
+import { adapt } from '../core/AnimatedBlock';
+import { val } from '../val';
+import AnimatedNode from './AnimatedNode';
+
+class AnimatedCond extends AnimatedNode {
+  _condition;
+  _ifBlock;
+  _elseBlock;
+
+  constructor(condition, ifBlock, elseBlock) {
+    invariant(
+      condition instanceof AnimatedNode,
+      `Reanimated: Animated.cond node first argument should be of type AnimatedNode but got ${condition}`
+    );
+    invariant(
+      ifBlock instanceof AnimatedNode,
+      `Reanimated: Animated.cond node second argument should be of type AnimatedNode but got ${ifBlock}`
+    );
+    invariant(
+      elseBlock instanceof AnimatedNode || elseBlock === undefined,
+      `Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got ${elseBlock}`
+    );
+    super(
+      {
+        type: 'cond',
+        cond: condition,
+        ifBlock,
+        elseBlock,
+      },
+      [condition, ifBlock, elseBlock]
+    );
+    this._condition = condition;
+    this._ifBlock = ifBlock;
+    this._elseBlock = elseBlock;
+  }
+
+  toString() {
+    return `AnimatedCond, id: ${this.__nodeID}`;
+  }
+
+  __onEvaluate() {
+    if (val(this._condition)) {
+      return val(this._ifBlock);
+    } else {
+      return this._elseBlock !== undefined ? val(this._elseBlock) : undefined;
+    }
+  }
+}
+
+export function createAnimatedCond(cond, ifBlock, elseBlock) {
+  return new AnimatedCond(
+    adapt(cond),
+    adapt(ifBlock),
+    elseBlock === undefined ? undefined : adapt(elseBlock)
+  );
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedDebug.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedDebug.js
new file mode 100644
index 0000000..e7b92db
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedDebug.js
@@ -0,0 +1,62 @@
+import invariant from 'invariant';
+import { NativeModules } from 'react-native';
+import { val } from '../val';
+import { adapt, createAnimatedBlock as block } from './AnimatedBlock';
+import { createAnimatedCall as call } from './AnimatedCall';
+import AnimatedNode from './AnimatedNode';
+
+class AnimatedDebug extends AnimatedNode {
+  _message;
+  _value;
+
+  constructor(message, value) {
+    invariant(
+      typeof message === 'string',
+      `Reanimated: Animated.debug node first argument should be of type string but got ${message}`
+    );
+    invariant(
+      value instanceof AnimatedNode,
+      `Reanimated: Animated.debug node second argument should be of type AnimatedNode but got ${value}`
+    );
+    super({ type: 'debug', message, value }, [value]);
+    this._message = message;
+    this._value = value;
+  }
+
+  toString() {
+    return `AnimatedDebug, id: ${this.__nodeID}`;
+  }
+
+  __onEvaluate() {
+    const value = val(this._value);
+    console.log(this._message, value);
+    return value;
+  }
+}
+
+export function createAnimatedDebug(message, value) {
+  if (__DEV__) {
+    // hack to detect if app is running in remote debugger
+    // https://stackoverflow.com/questions/39022216
+    const runningInRemoteDebugger = typeof atob !== 'undefined';
+
+    // read the executionEnvironment off of expo-constants without explicitly
+    // depending on the package
+    const runningInExpoShell =
+      NativeModules.NativeUnimoduleProxy?.modulesConstants?.ExponentConstants
+        ?.executionEnvironment === 'storeClient';
+
+    if (runningInRemoteDebugger || runningInExpoShell) {
+      // When running in expo or remote debugger we use JS console.log to output variables
+      // otherwise we output to the native console using native debug node
+      return block([
+        call([value], ([a]) => console.log(`${message} ${a}`)),
+        value,
+      ]);
+    } else {
+      return new AnimatedDebug(message, adapt(value));
+    }
+  }
+  // Debugging is disabled in PROD
+  return value;
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedEvent.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedEvent.js
new file mode 100644
index 0000000..a7bac2c
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedEvent.js
@@ -0,0 +1,126 @@
+import { Platform, findNodeHandle } from 'react-native';
+import ReanimatedModule from '../../ReanimatedModule';
+
+import AnimatedNode from './AnimatedNode';
+import InternalAnimatedValue from './AnimatedValue';
+import { createAnimatedAlways } from './AnimatedAlways';
+
+import invariant from 'invariant';
+import createEventObjectProxyPolyfill from './createEventObjectProxyPolyfill';
+
+function sanitizeArgMapping(argMapping) {
+  // Find animated values in `argMapping` and create an array representing their
+  // key path inside the `nativeEvent` object. Ex.: ['contentOffset', 'x'].
+  const eventMappings = [];
+  const alwaysNodes = [];
+
+  const getNode = (node) => {
+    if (
+      Platform.OS === 'web' ||
+      Platform.OS === 'windows' ||
+      Platform.OS === 'macos'
+    ) {
+      return node;
+    }
+    return node.__nodeID;
+  };
+
+  const traverse = (value, path) => {
+    if (value instanceof InternalAnimatedValue) {
+      eventMappings.push(path.concat(getNode(value)));
+    } else if (typeof value === 'object' && value.__val) {
+      eventMappings.push(path.concat(getNode(value.__val)));
+    } else if (typeof value === 'function') {
+      const node = new InternalAnimatedValue(0);
+      alwaysNodes.push(createAnimatedAlways(value(node)));
+      eventMappings.push(path.concat(getNode(node)));
+    } else if (typeof value === 'object') {
+      for (const key in value) {
+        traverse(value[key], path.concat(key));
+      }
+    }
+  };
+
+  invariant(
+    argMapping[0] && argMapping[0].nativeEvent,
+    'Native driven events only support animated values contained inside `nativeEvent`.'
+  );
+
+  // Assume that the event containing `nativeEvent` is always the first argument.
+  const ev = argMapping[0].nativeEvent;
+  if (typeof ev === 'object') {
+    traverse(ev, []);
+  } else if (typeof ev === 'function') {
+    const proxyHandler = {
+      get: function (target, name) {
+        if (name === '__isProxy') {
+          return true;
+        }
+        if (!target[name] && name !== '__val') {
+          target[name] = new Proxy({}, proxyHandler);
+        }
+        return target[name];
+      },
+      set: function (target, prop, value) {
+        if (prop === '__val') {
+          target[prop] = value;
+          return true;
+        }
+        return false;
+      },
+    };
+
+    const proxy =
+      typeof Proxy === 'function'
+        ? new Proxy({}, proxyHandler)
+        : createEventObjectProxyPolyfill();
+    alwaysNodes.push(createAnimatedAlways(ev(proxy)));
+    traverse(proxy, []);
+  }
+
+  return { eventMappings, alwaysNodes };
+}
+
+export default class AnimatedEvent extends AnimatedNode {
+  constructor(argMapping, _config = {}) {
+    const { eventMappings, alwaysNodes } = sanitizeArgMapping(argMapping);
+    super({ type: 'event', argMapping: eventMappings });
+    this._alwaysNodes = alwaysNodes;
+  }
+
+  toString() {
+    return `AnimatedEvent, id: ${this.__nodeID}`;
+  }
+
+  // The below field is a temporary workaround to make AnimatedEvent object be recognized
+  // as Animated.event event callback and therefore filtered out from being send over the
+  // bridge which was causing the object to be frozen in JS.
+  __isNative = true;
+
+  attachEvent(viewRef, eventName) {
+    for (let i = 0; i < this._alwaysNodes.length; i++) {
+      this._alwaysNodes[i].__attach();
+    }
+    this.__attach();
+    const viewTag = findNodeHandle(viewRef);
+    ReanimatedModule.attachEvent(viewTag, eventName, this.__nodeID);
+  }
+
+  __onEvaluate() {
+    return 0;
+  }
+
+  detachEvent(viewRef, eventName) {
+    for (let i = 0; i < this._alwaysNodes.length; i++) {
+      this._alwaysNodes[i].isNativelyInitialized() &&
+        this._alwaysNodes[i].__detach();
+    }
+    const viewTag = findNodeHandle(viewRef);
+    ReanimatedModule.detachEvent(viewTag, eventName, this.__nodeID);
+    this.__detach();
+  }
+}
+
+export function createAnimatedEvent(argMapping, config) {
+  return new AnimatedEvent(argMapping, config);
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedFunction.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedFunction.js
new file mode 100644
index 0000000..bfbf9b3
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedFunction.js
@@ -0,0 +1,55 @@
+import AnimatedNode from './AnimatedNode';
+import { createAnimatedCallFunc } from './AnimatedCallFunc';
+import { createAnimatedParam } from './AnimatedParam';
+import { val } from '../val';
+import invariant from 'invariant';
+
+class AnimatedFunction extends AnimatedNode {
+  _what;
+
+  constructor(what, ...params) {
+    invariant(
+      what instanceof AnimatedNode,
+      `Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got ${what}`
+    );
+    super(
+      {
+        type: 'func',
+        what,
+      },
+      [what, ...params]
+    );
+    this._what = what;
+    this.__attach();
+  }
+
+  __onEvaluate() {
+    return val(this._what);
+  }
+
+  toString() {
+    return `AnimatedFunction, id: ${this.__nodeID}`;
+  }
+}
+
+export function createAnimatedFunction(cb) {
+  const params = new Array(cb.length);
+  for (let i = 0; i < params.length; i++) {
+    params[i] = createAnimatedParam();
+  }
+  // eslint-disable-next-line node/no-callback-literal
+  const what = cb(...params);
+  const func = new AnimatedFunction(what, ...params);
+  return (...args) => {
+    if (args.length !== params.length) {
+      throw new Error(
+        'Parameter mismatch when calling reanimated function. Expected ' +
+          params.length +
+          ' parameters, got ' +
+          args.length +
+          '.'
+      );
+    }
+    return createAnimatedCallFunc(func, args, params);
+  };
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedNode.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedNode.js
new file mode 100644
index 0000000..d7892d8
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedNode.js
@@ -0,0 +1,223 @@
+import ReanimatedModule from '../../ReanimatedModule';
+import { Platform } from 'react-native';
+
+const UPDATED_NODES = [];
+
+let loopID = 1;
+let propUpdatesEnqueued = null;
+let nodeCount = 0;
+let callID = '';
+
+export function getCallID() {
+  return callID;
+}
+
+export function setCallID(nextCallID) {
+  callID = nextCallID;
+}
+
+function sanitizeConfig(config) {
+  if (
+    Platform.OS === 'web' ||
+    Platform.OS === 'windows' ||
+    Platform.OS === 'macos' ||
+    ['undefined', 'string', 'function', 'boolean', 'number'].includes(
+      typeof config
+    )
+  ) {
+    return config;
+  } else if (Array.isArray(config)) {
+    return config.map(sanitizeConfig);
+  } else if (config instanceof AnimatedNode) {
+    return config.__nodeID;
+  } else if (typeof config === 'object') {
+    const output = {};
+    for (const property in config) {
+      if (property in config) {
+        output[property] = sanitizeConfig(config[property]);
+      }
+    }
+    return output;
+  }
+  // unhandled
+  return config;
+}
+
+function runPropUpdates() {
+  const visitedNodes = new Set();
+  const findAndUpdateNodes = (node) => {
+    if (!node) {
+      console.warn('findAndUpdateNodes was passed a nullish node');
+      return;
+    }
+
+    if (visitedNodes.has(node)) {
+      return;
+    } else {
+      visitedNodes.add(node);
+    }
+    if (typeof node.update === 'function') {
+      node.update();
+    } else {
+      const nodes = node.__getChildren();
+      if (nodes) {
+        for (let i = 0, l = nodes.length; i < l; i++) {
+          findAndUpdateNodes(nodes[i]);
+        }
+      }
+    }
+  };
+  for (let i = 0; i < UPDATED_NODES.length; i++) {
+    const node = UPDATED_NODES[i];
+    findAndUpdateNodes(node);
+  }
+  UPDATED_NODES.length = 0; // clear array
+  propUpdatesEnqueued = null;
+  loopID += 1;
+}
+
+const scheduleUpdates =
+  Platform.OS === 'web' ? requestAnimationFrame : setImmediate;
+
+export default class AnimatedNode {
+  __nodeID;
+  __lastLoopID = { '': -1 };
+  __memoizedValue = { '': null };
+  __children = [];
+
+  constructor(nodeConfig, inputNodes) {
+    this.__nodeID = ++nodeCount;
+    this.__nodeConfig = sanitizeConfig(nodeConfig);
+    this.__initialized = false;
+    this.__inputNodes =
+      inputNodes && inputNodes.filter((node) => node instanceof AnimatedNode);
+  }
+
+  toString() {
+    return `AnimatedNode, id: ${this.__nodeID}`;
+  }
+
+  __attach() {
+    this.__nativeInitialize();
+
+    const nodes = this.__inputNodes;
+
+    if (nodes) {
+      for (let i = 0, l = nodes.length; i < l; i++) {
+        nodes[i].__addChild(this);
+      }
+    }
+  }
+
+  __detach() {
+    const nodes = this.__inputNodes;
+
+    if (nodes) {
+      for (let i = 0, l = nodes.length; i < l; i++) {
+        nodes[i].__removeChild(this);
+      }
+    }
+
+    this.__nativeTearDown();
+  }
+
+  __getValue() {
+    if (!(callID in this.__lastLoopID) || this.__lastLoopID[callID] < loopID) {
+      this.__lastLoopID[callID] = loopID;
+      const result = this.__onEvaluate();
+      this.__memoizedValue[callID] = result;
+      return result;
+    }
+    return this.__memoizedValue[callID];
+  }
+
+  __forceUpdateCache(newValue) {
+    this.__memoizedValue[callID] = newValue;
+    this.__markUpdated();
+  }
+
+  __dangerouslyRescheduleEvaluate() {
+    this.__lastLoopID[callID] = -1;
+    this.__markUpdated();
+  }
+
+  __markUpdated() {
+    UPDATED_NODES.push(this);
+    if (!propUpdatesEnqueued) {
+      propUpdatesEnqueued = scheduleUpdates(runPropUpdates);
+    }
+  }
+
+  __nativeInitialize() {
+    if (!this.__initialized) {
+      ReanimatedModule.createNode(this.__nodeID, { ...this.__nodeConfig });
+      this.__initialized = true;
+    }
+  }
+
+  __nativeTearDown() {
+    if (this.__initialized) {
+      ReanimatedModule.dropNode(this.__nodeID);
+      this.__initialized = false;
+    }
+  }
+
+  isNativelyInitialized() {
+    return this.__initialized;
+  }
+
+  __onEvaluate() {
+    throw new Error('Missing implementation of onEvaluate');
+  }
+
+  __getProps() {
+    return this.__getValue();
+  }
+
+  __getChildren() {
+    return this.__children;
+  }
+
+  __addChild(child) {
+    if (this.__children.length === 0) {
+      this.__attach();
+    }
+    this.__children.push(child);
+    child.__nativeInitialize();
+
+    if (ReanimatedModule.connectNodes) {
+      ReanimatedModule.connectNodes(this.__nodeID, child.__nodeID);
+    } else {
+      child.__dangerouslyRescheduleEvaluate();
+    }
+  }
+
+  __removeChild(child) {
+    const index = this.__children.indexOf(child);
+    if (index === -1) {
+      console.warn("Trying to remove a child that doesn't exist");
+      return;
+    }
+
+    if (ReanimatedModule.disconnectNodes) {
+      ReanimatedModule.disconnectNodes(this.__nodeID, child.__nodeID);
+    }
+
+    this.__children.splice(index, 1);
+    if (this.__children.length === 0) {
+      this.__detach();
+    }
+  }
+
+  _connectAnimatedView(nativeViewTag) {
+    if (ReanimatedModule.connectNodeToView) {
+      ReanimatedModule.connectNodeToView(this.__nodeID, nativeViewTag);
+    } else {
+      this.__dangerouslyRescheduleEvaluate();
+    }
+  }
+
+  _disconnectAnimatedView(nativeViewTag) {
+    ReanimatedModule.disconnectNodeFromView(this.__nodeID, nativeViewTag);
+  }
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedOperator.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedOperator.js
new file mode 100644
index 0000000..066c838
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedOperator.js
@@ -0,0 +1,103 @@
+import AnimatedNode from './AnimatedNode';
+import { val } from '../val';
+
+import invariant from 'invariant';
+import { adapt } from '../core/AnimatedBlock';
+
+function reduce(fn) {
+  return (input) => input.reduce((a, b) => fn(val(a), val(b)));
+}
+
+function reduceFrom(fn, initialValue) {
+  return (input) => input.reduce((a, b) => fn(val(a), val(b)), initialValue);
+}
+
+function infix(fn) {
+  return (input) => fn(val(input[0]), val(input[1]));
+}
+
+function single(fn) {
+  return (input) => fn(val(input[0]));
+}
+
+const OPERATIONS = {
+  // arithmetic
+  add: reduce((a, b) => a + b),
+  sub: reduce((a, b) => a - b),
+  multiply: reduce((a, b) => a * b),
+  divide: reduce((a, b) => a / b),
+  pow: reduce((a, b) => Math.pow(a, b)),
+  modulo: reduce((a, b) => ((a % b) + b) % b),
+  sqrt: single((a) => Math.sqrt(a)),
+  log: single((a) => Math.log(a)),
+  sin: single((a) => Math.sin(a)),
+  cos: single((a) => Math.cos(a)),
+  tan: single((a) => Math.tan(a)),
+  acos: single((a) => Math.acos(a)),
+  asin: single((a) => Math.asin(a)),
+  atan: single((a) => Math.atan(a)),
+  exp: single((a) => Math.exp(a)),
+  round: single((a) => Math.round(a)),
+  abs: single((a) => Math.abs(a)),
+  ceil: single((a) => Math.ceil(a)),
+  floor: single((a) => Math.floor(a)),
+  max: reduce((a, b) => Math.max(a, b)),
+  min: reduce((a, b) => Math.min(a, b)),
+
+  // logical
+  and: reduceFrom((a, b) => a && b, true),
+  or: reduceFrom((a, b) => a || b, false),
+  not: single((a) => !a),
+  defined: single((a) => a !== null && a !== undefined && !isNaN(a)),
+
+  // comparing
+  lessThan: infix((a, b) => a < b),
+  /* eslint-disable-next-line eqeqeq */
+  eq: infix((a, b) => a == b),
+  greaterThan: infix((a, b) => a > b),
+  lessOrEq: infix((a, b) => a <= b),
+  greaterOrEq: infix((a, b) => a >= b),
+  /* eslint-disable-next-line eqeqeq */
+  neq: infix((a, b) => a != b),
+};
+
+class AnimatedOperator extends AnimatedNode {
+  _input;
+  _op;
+  _operation;
+
+  constructor(operator, input) {
+    invariant(
+      typeof operator === 'string',
+      `Reanimated: Animated.operator node first argument should be of type String, but got: ${operator}`
+    );
+    invariant(
+      input.every(
+        (el) =>
+          el instanceof AnimatedNode ||
+          typeof el === 'string' ||
+          typeof el === 'number'
+      ),
+      `Reanimated: Animated.operator node second argument should be one or more of type AnimatedNode, String or Number but got ${input}`
+    );
+    super({ type: 'op', op: operator, input }, input);
+    this._op = operator;
+    this._input = input;
+  }
+
+  toString() {
+    return `AnimatedOperator, id: ${this.__nodeID}`;
+  }
+
+  __onEvaluate() {
+    if (!this._operation) {
+      this._operation = OPERATIONS[this._op];
+      invariant(this._operation, `Illegal operator '%s'`, this._op);
+    }
+    return this._operation(this._input);
+  }
+}
+
+export function createAnimatedOperator(name) {
+  return (...args) => new AnimatedOperator(name, args.map(adapt));
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedParam.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedParam.js
new file mode 100644
index 0000000..23b3776
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedParam.js
@@ -0,0 +1,88 @@
+import invariant from 'invariant';
+import AnimatedNode, { getCallID, setCallID } from './AnimatedNode';
+import AnimatedClock from './AnimatedClock';
+import { val } from '../val';
+
+export class AnimatedParam extends AnimatedNode {
+  argsStack = [];
+  _prevCallID;
+
+  constructor() {
+    super({ type: 'param' }, []);
+    this.__attach();
+  }
+
+  beginContext(ref, prevCallID) {
+    this._prevCallID = prevCallID;
+    this.argsStack.push(ref);
+  }
+
+  endContext() {
+    this.argsStack.pop();
+  }
+
+  _getTopNode() {
+    if (this.argsStack.length === 0)
+      throw new Error(`param: Invocation failed because argsStack is empty`);
+    const top = this.argsStack[this.argsStack.length - 1];
+    return top;
+  }
+
+  setValue(value) {
+    const top = this._getTopNode();
+    if (top.setValue) {
+      const callID = getCallID();
+      setCallID(this._prevCallID);
+      top.setValue(value);
+      setCallID(callID);
+    } else {
+      throw new Error(
+        `param: setValue(${value}) failed because the top element has no known method for updating it's current value.`
+      );
+    }
+  }
+
+  __onEvaluate() {
+    const callID = getCallID();
+    setCallID(this._prevCallID);
+    const top = this._getTopNode();
+    const value = val(top);
+    setCallID(callID);
+    return value;
+  }
+
+  start() {
+    const node = this._getTopNode();
+    invariant(
+      node instanceof AnimatedClock || node instanceof AnimatedParam,
+      `param: top node should be of type AnimatedClock but got ${node}`
+    );
+    node.start();
+  }
+
+  stop() {
+    const node = this._getTopNode();
+    invariant(
+      node instanceof AnimatedClock || node instanceof AnimatedParam,
+      `param: top node should be of type AnimatedClock but got ${node}`
+    );
+    node.stop();
+  }
+
+  isRunning() {
+    const node = this._getTopNode();
+
+    if (node instanceof AnimatedParam) {
+      return node.isRunning();
+    }
+    invariant(
+      node instanceof AnimatedClock,
+      `param: top node should be of type AnimatedClock but got ${node}`
+    );
+    return node.isStarted();
+  }
+}
+
+export function createAnimatedParam() {
+  return new AnimatedParam();
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedProps.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedProps.js
new file mode 100644
index 0000000..3c4bb93
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedProps.js
@@ -0,0 +1,108 @@
+import { findNodeHandle } from 'react-native';
+
+import AnimatedNode from './AnimatedNode';
+import AnimatedEvent from './AnimatedEvent';
+import { createOrReuseStyleNode } from './AnimatedStyle';
+
+import invariant from 'invariant';
+import deepEqual from 'lodash.isequal';
+import { val } from '../val';
+
+function sanitizeProps(inputProps) {
+  let props;
+  for (const key in inputProps) {
+    const value = inputProps[key];
+    if (value instanceof AnimatedNode && !(value instanceof AnimatedEvent)) {
+      if (props === undefined) {
+        props = {};
+      }
+      props[key] = value.__nodeID;
+    }
+  }
+  return props;
+}
+
+export function createOrReusePropsNode(props, callback, oldNode) {
+  if (props.style) {
+    const style = createOrReuseStyleNode(
+      props.style,
+      oldNode && oldNode._props.style
+    );
+    if (style) {
+      props = {
+        ...props,
+        style,
+      };
+    }
+  }
+  const config = sanitizeProps(props);
+  if (config === undefined) {
+    return undefined;
+  }
+  if (oldNode && deepEqual(config, oldNode._config)) {
+    return oldNode;
+  }
+  return new AnimatedProps(props, config, callback);
+}
+
+class AnimatedProps extends AnimatedNode {
+  constructor(props, config, callback) {
+    super(
+      { type: 'props', props: config },
+      Object.values(props).filter((n) => !(n instanceof AnimatedEvent))
+    );
+    this._config = config;
+    this._props = props;
+    this._callback = callback;
+    this.__attach();
+  }
+
+  toString() {
+    return `AnimatedProps, id: ${this.__nodeID}`;
+  }
+
+  __onEvaluate() {
+    const props = {};
+    for (const key in this._props) {
+      const value = this._props[key];
+      if (value instanceof AnimatedNode) {
+        props[key] = value.__getValue();
+      }
+    }
+    return props;
+  }
+
+  __detach() {
+    const nativeViewTag = findNodeHandle(this._animatedView);
+    invariant(
+      nativeViewTag != null,
+      'Unable to locate attached view in the native tree'
+    );
+    this._disconnectAnimatedView(nativeViewTag);
+    super.__detach();
+  }
+
+  update() {
+    this._callback();
+
+    if (!this._animatedView) {
+      return;
+    }
+
+    val(this);
+  }
+
+  setNativeView(animatedView) {
+    if (this._animatedView === animatedView) {
+      return;
+    }
+    this._animatedView = animatedView;
+
+    const nativeViewTag = findNodeHandle(this._animatedView);
+    invariant(
+      nativeViewTag != null,
+      'Unable to locate attached view in the native tree'
+    );
+    this._connectAnimatedView(nativeViewTag);
+  }
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedSet.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedSet.js
new file mode 100644
index 0000000..2a2a28b
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedSet.js
@@ -0,0 +1,38 @@
+import AnimatedNode from './AnimatedNode';
+import invariant from 'invariant';
+import { val } from '../val';
+import { adapt } from '../core/AnimatedBlock';
+
+class AnimatedSet extends AnimatedNode {
+  _what;
+  _value;
+
+  constructor(what, value) {
+    invariant(
+      what instanceof AnimatedNode,
+      `Reanimated: Animated.set first argument should be of type AnimatedNode but got ${what}`
+    );
+    invariant(
+      value instanceof AnimatedNode,
+      `Reanimated: Animated.set second argument should be of type AnimatedNode, String or Number but got ${value}`
+    );
+    super({ type: 'set', what, value }, [value]);
+    invariant(!what._constant, 'Value to be set cannot be constant');
+    this._what = what;
+    this._value = value;
+  }
+
+  toString() {
+    return `AnimatedSet, id: ${this.__nodeID}`;
+  }
+
+  __onEvaluate() {
+    const newValue = val(this._value);
+    this._what.setValue(newValue);
+    return newValue;
+  }
+}
+
+export function createAnimatedSet(what, value) {
+  return new AnimatedSet(what, adapt(value));
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedStartClock.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedStartClock.js
new file mode 100644
index 0000000..31b044b
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedStartClock.js
@@ -0,0 +1,30 @@
+import AnimatedNode from './AnimatedNode';
+import AnimatedClock from './AnimatedClock';
+import { AnimatedParam } from './AnimatedParam';
+import invariant from 'invariant';
+
+class AnimatedStartClock extends AnimatedNode {
+  _clockNode;
+
+  constructor(clockNode) {
+    invariant(
+      clockNode instanceof AnimatedClock || clockNode instanceof AnimatedParam,
+      `Reanimated: Animated.startClock argument should be of type AnimatedClock but got ${clockNode}`
+    );
+    super({ type: 'clockStart', clock: clockNode });
+    this._clockNode = clockNode;
+  }
+
+  toString() {
+    return `AnimatedStartClock, id: ${this.__nodeID}`;
+  }
+
+  __onEvaluate() {
+    this._clockNode.start();
+    return 0;
+  }
+}
+
+export function createAnimatedStartClock(clock) {
+  return new AnimatedStartClock(clock);
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedStopClock.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedStopClock.js
new file mode 100644
index 0000000..5a2cad6
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedStopClock.js
@@ -0,0 +1,30 @@
+import AnimatedNode from './AnimatedNode';
+import AnimatedClock from './AnimatedClock';
+import { AnimatedParam } from './AnimatedParam';
+import invariant from 'invariant';
+
+class AnimatedStopClock extends AnimatedNode {
+  _clockNode;
+
+  constructor(clockNode) {
+    invariant(
+      clockNode instanceof AnimatedClock || clockNode instanceof AnimatedParam,
+      `Reanimated: Animated.stopClock argument should be of type AnimatedClock but got ${clockNode}`
+    );
+    super({ type: 'clockStop', clock: clockNode });
+    this._clockNode = clockNode;
+  }
+
+  toString() {
+    return `AnimatedStopClock, id: ${this.__nodeID}`;
+  }
+
+  __onEvaluate() {
+    this._clockNode.stop();
+    return 0;
+  }
+}
+
+export function createAnimatedStopClock(clock) {
+  return new AnimatedStopClock(clock);
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedStyle.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedStyle.js
new file mode 100644
index 0000000..a853af2
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedStyle.js
@@ -0,0 +1,78 @@
+import { StyleSheet } from 'react-native';
+
+import AnimatedNode from './AnimatedNode';
+import { createOrReuseTransformNode } from './AnimatedTransform';
+
+import deepEqual from 'lodash.isequal';
+
+function sanitizeStyle(inputStyle) {
+  let style;
+  for (const key in inputStyle) {
+    const value = inputStyle[key];
+    if (value instanceof AnimatedNode) {
+      if (style === undefined) {
+        style = {};
+      }
+      style[key] = value.__nodeID;
+    }
+  }
+  return style;
+}
+
+export function createOrReuseStyleNode(style, oldNode) {
+  style = StyleSheet.flatten(style) || {};
+  if (style.transform) {
+    const transform = createOrReuseTransformNode(
+      style.transform,
+      oldNode && oldNode._style.transform
+    );
+    if (transform) {
+      style = {
+        ...style,
+        transform,
+      };
+    }
+  }
+  const config = sanitizeStyle(style);
+  if (config === undefined) {
+    return undefined;
+  }
+  if (oldNode && deepEqual(config, oldNode._config)) {
+    return oldNode;
+  }
+  return new AnimatedStyle(style, config);
+}
+
+/**
+ * AnimatedStyle should never be directly instantiated, use createOrReuseStyleNode
+ * in order to make a new instance of this node.
+ */
+export default class AnimatedStyle extends AnimatedNode {
+  constructor(style, config) {
+    super({ type: 'style', style: config }, Object.values(style));
+    this._config = config;
+    this._style = style;
+  }
+
+  toString() {
+    return `AnimatedStyle, id: ${this.__nodeID}`;
+  }
+
+  _walkStyleAndGetAnimatedValues(style) {
+    const updatedStyle = {};
+    for (const key in style) {
+      const value = style[key];
+      if (value instanceof AnimatedNode) {
+        updatedStyle[key] = value.__getValue();
+      } else if (value && !Array.isArray(value) && typeof value === 'object') {
+        // Support animating nested values (for example: shadowOffset.height)
+        updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);
+      }
+    }
+    return updatedStyle;
+  }
+
+  __onEvaluate() {
+    return this._walkStyleAndGetAnimatedValues(this._style);
+  }
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedTransform.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedTransform.js
new file mode 100644
index 0000000..9d5c5de
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedTransform.js
@@ -0,0 +1,78 @@
+import AnimatedNode from './AnimatedNode';
+
+import deepEqual from 'lodash.isequal';
+
+function sanitizeTransform(inputTransform) {
+  const outputTransform = [];
+  let hasAnimatedTransform = false;
+  inputTransform.forEach((transform) => {
+    for (const key in transform) {
+      const value = transform[key];
+      if (value instanceof AnimatedNode) {
+        hasAnimatedTransform = true;
+        outputTransform.push({
+          property: key,
+          nodeID: value.__nodeID,
+        });
+      } else {
+        outputTransform.push({
+          property: key,
+          value,
+        });
+      }
+    }
+  });
+  return hasAnimatedTransform ? outputTransform : undefined;
+}
+
+function extractAnimatedParentNodes(transform) {
+  const parents = [];
+  transform.forEach((transform) => {
+    for (const key in transform) {
+      const value = transform[key];
+      if (value instanceof AnimatedNode) {
+        parents.push(value);
+      }
+    }
+  });
+  return parents;
+}
+
+export function createOrReuseTransformNode(transform, oldNode) {
+  const config = sanitizeTransform(transform);
+  if (config === undefined) {
+    return undefined;
+  }
+  if (oldNode && deepEqual(config, oldNode._config)) {
+    return oldNode;
+  }
+  return new AnimatedTransform(transform, config);
+}
+
+class AnimatedTransform extends AnimatedNode {
+  constructor(transform, config) {
+    super(
+      { type: 'transform', transform: config },
+      extractAnimatedParentNodes(transform)
+    );
+    this._config = config;
+    this._transform = transform;
+  }
+
+  toString() {
+    return `AnimatedTransform, id: ${this.__nodeID}`;
+  }
+
+  __onEvaluate() {
+    return this._transform.map((transform) => {
+      const result = {};
+      for (const key in transform) {
+        const value = transform[key];
+        if (value instanceof AnimatedNode) {
+          result[key] = value.__getValue();
+        }
+      }
+      return result;
+    });
+  }
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedValue.js b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedValue.js
new file mode 100644
index 0000000..8cab95d
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedValue.js
@@ -0,0 +1,38 @@
+import { createAnimatedSet as set } from '../core/AnimatedSet';
+import interpolate from '../derived/interpolate';
+import InternalAnimatedValue from './InternalAnimatedValue';
+import { Platform } from 'react-native';
+import { evaluateOnce } from '../derived/evaluateOnce';
+import ReanimatedModule from '../../ReanimatedModule';
+import { val } from '../val';
+
+// Animated value wrapped with extra methods for omit cycle of dependencies
+export default class AnimatedValue extends InternalAnimatedValue {
+  setValue(value) {
+    this.__detachAnimation(this._animation);
+    if (
+      Platform.OS === 'web' ||
+      Platform.OS === 'windows' ||
+      Platform.OS === 'macos'
+    ) {
+      this._updateValue(val(value));
+    } else {
+      if (ReanimatedModule.setValue && typeof value === 'number') {
+        // FIXME Remove it after some time
+        // For OTA-safety
+        // FIXME handle setting value with a node
+        ReanimatedModule.setValue(this.__nodeID, value);
+      } else {
+        evaluateOnce(set(this, value), this);
+      }
+    }
+  }
+
+  toString() {
+    return `AnimatedValue, id: ${this.__nodeID}`;
+  }
+
+  interpolate(config) {
+    return interpolate(this, config);
+  }
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/Core.test.js b/node_modules/react-native-reanimated/lib/reanimated1/core/Core.test.js
new file mode 100644
index 0000000..0d41df8
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/Core.test.js
@@ -0,0 +1,30 @@
+import React from 'react';
+import Animated from '../../Animated';
+
+import renderer from 'react-test-renderer';
+
+jest.mock('../../ReanimatedEventEmitter');
+jest.mock('../../ReanimatedModule');
+jest.mock('../../reanimated2/NativeReanimated/NativeReanimated');
+
+describe('Core Animated components', () => {
+  xit('fails if something other then a node or function that returns a node is passed to Animated.Code exec prop', () => {
+    console.error = jest.fn();
+
+    expect(() =>
+      renderer.create(<Animated.Code exec="not a node" />)
+    ).toThrowError(
+      "<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node."
+    );
+  });
+
+  xit('fails if something other then a node or function that returns a node is passed to Animated.Code children', () => {
+    console.error = jest.fn();
+
+    expect(() =>
+      renderer.create(<Animated.Code>not a node</Animated.Code>)
+    ).toThrowError(
+      "<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node."
+    );
+  });
+});
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/InternalAnimatedValue.js b/node_modules/react-native-reanimated/lib/reanimated1/core/InternalAnimatedValue.js
new file mode 100644
index 0000000..50030b2
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/InternalAnimatedValue.js
@@ -0,0 +1,87 @@
+import AnimatedNode from './AnimatedNode';
+import { val } from '../val';
+import ReanimatedModule from '../../ReanimatedModule';
+import invariant from 'invariant';
+
+function sanitizeValue(value) {
+  return value === null || value === undefined || typeof value === 'string'
+    ? value
+    : Number(value);
+}
+
+const CONSTANT_VALUES = new Map();
+
+function initializeConstantValues() {
+  if (CONSTANT_VALUES.size !== 0) {
+    return;
+  }
+  [0, -1, 1, -2, 2].forEach((v) =>
+    CONSTANT_VALUES.set(v, new InternalAnimatedValue(v, true))
+  );
+}
+
+/**
+ * This class has been made internal in order to omit dependencies' cycles which
+ * were caused by imperative setValue and interpolate – they are currently exposed with AnimatedValue.js
+ */
+export default class InternalAnimatedValue extends AnimatedNode {
+  static valueForConstant(number) {
+    initializeConstantValues();
+    return (
+      CONSTANT_VALUES.get(number) || new InternalAnimatedValue(number, true)
+    );
+  }
+
+  constructor(value, constant = false) {
+    invariant(value !== null, 'Animated.Value cannot be set to the null');
+    super({ type: 'value', value: sanitizeValue(value) });
+    this._startingValue = this._value = value;
+    this._animation = null;
+    this._constant = constant;
+  }
+
+  __detach() {
+    if (!this._constant) {
+      if (ReanimatedModule.getValue) {
+        ReanimatedModule.getValue(
+          this.__nodeID,
+          (val) => (this.__nodeConfig.value = val)
+        );
+      } else {
+        this.__nodeConfig.value = this.__getValue();
+      }
+    }
+    this.__detachAnimation(this._animation);
+    super.__detach();
+  }
+
+  __detachAnimation(animation) {
+    animation && animation.__detach();
+    if (this._animation === animation) {
+      this._animation = null;
+    }
+  }
+
+  __attachAnimation(animation) {
+    this.__detachAnimation(this._animation);
+    this._animation = animation;
+  }
+
+  __onEvaluate() {
+    if (this.__inputNodes && this.__inputNodes.length) {
+      this.__inputNodes.forEach(val);
+    }
+    return this._value;
+  }
+
+  // AnimatedValue will override this method to modify the value of a native node.
+  setValue(value) {
+    this.__detachAnimation(this._animation);
+    this._updateValue(value);
+  }
+
+  _updateValue(value) {
+    this._value = value;
+    this.__forceUpdateCache(value);
+  }
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/__mocks__/AnimatedProps.js b/node_modules/react-native-reanimated/lib/reanimated1/core/__mocks__/AnimatedProps.js
new file mode 100644
index 0000000..dbc9c45
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/__mocks__/AnimatedProps.js
@@ -0,0 +1,86 @@
+import AnimatedNode from '../AnimatedNode';
+import AnimatedEvent from '../AnimatedEvent';
+import AnimatedStyle, { createOrReuseStyleNode } from '../AnimatedStyle';
+
+import deepEqual from 'lodash.isequal';
+
+// This file has been mocked as react-native's `findNodeHandle` is returning undefined value;
+// and I became easier to mock whole this file instead of mocking RN
+
+function sanitizeProps(inputProps) {
+  const props = {};
+  for (const key in inputProps) {
+    const value = inputProps[key];
+    if (value instanceof AnimatedNode && !(value instanceof AnimatedEvent)) {
+      props[key] = value.__nodeID;
+    }
+  }
+  return props;
+}
+
+export function createOrReusePropsNode(props, callback, oldNode) {
+  if (props.style) {
+    props = {
+      ...props,
+      style: createOrReuseStyleNode(
+        props.style,
+        oldNode && oldNode._props.style
+      ),
+    };
+  }
+  const config = sanitizeProps(props);
+  if (oldNode && deepEqual(config, oldNode._config)) {
+    return oldNode;
+  }
+  return new AnimatedProps(props, config, callback);
+}
+
+class AnimatedProps extends AnimatedNode {
+  constructor(props, config, callback) {
+    super(
+      { type: 'props', props: config },
+      Object.values(props).filter((n) => !(n instanceof AnimatedEvent))
+    );
+    this._config = config;
+    this._props = props;
+    this._callback = callback;
+    this.__attach();
+  }
+
+  __getProps() {
+    const props = {};
+    for (const key in this._props) {
+      const value = this._props[key];
+      if (value instanceof AnimatedNode) {
+        if (value instanceof AnimatedStyle) {
+          props[key] = value.__getProps();
+        }
+      } else {
+        props[key] = value;
+      }
+    }
+    return props;
+  }
+
+  __onEvaluate() {
+    const props = {};
+    for (const key in this._props) {
+      const value = this._props[key];
+      if (value instanceof AnimatedNode) {
+        props[key] = value.__getValue();
+      }
+    }
+    return props;
+  }
+
+  update() {
+    this._callback();
+  }
+
+  setNativeView(animatedView) {
+    if (this._animatedView === animatedView) {
+      return;
+    }
+    this._animatedView = animatedView;
+  }
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/core/createEventObjectProxyPolyfill.js b/node_modules/react-native-reanimated/lib/reanimated1/core/createEventObjectProxyPolyfill.js
new file mode 100644
index 0000000..76a3482
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/core/createEventObjectProxyPolyfill.js
@@ -0,0 +1,44 @@
+// JSC on Android and iOS 8 & 9 does not support proxies.
+// The below workaround provides a proxy-like functionality for event data by
+// creating an object which contains predefined fields for the most commonly
+// used event attributes. If your app uses even attribute which is not listed
+// here please submit a PR to add that and we will merge it right away
+export default function createEventObjectProxyPolyfill() {
+  const nodesMap = {
+    // Gesture handlers-related event
+    translationX: {},
+    translationY: {},
+    state: {},
+    oldState: {},
+    absoluteX: {},
+    absoluteY: {},
+    x: {},
+    y: {},
+    velocityX: {},
+    velocityY: {},
+    scale: {},
+    focalX: {},
+    focalY: {},
+    rotation: {},
+    anchorX: {},
+    anchorY: {},
+    velocity: {},
+    numberOfPointers: {},
+    // onLayour-related event
+    layout: { x: {}, y: {}, width: {}, height: {} },
+    // ScrollView event
+    contentOffset: { y: {}, x: {} },
+    layoutMeasurement: { width: {}, height: {} },
+    contentSize: { width: {}, height: {} },
+    zoomScale: {},
+    contentInset: { right: {}, top: {}, left: {}, bottom: {} },
+  };
+  const traverse = (obj) => {
+    for (const key in obj) {
+      traverse(obj[key]);
+      Object.assign(obj[key], { __isProxy: true });
+    }
+  };
+  traverse(nodesMap);
+  return nodesMap;
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/derived/__mocks__/evaluateOnce.js b/node_modules/react-native-reanimated/lib/reanimated1/derived/__mocks__/evaluateOnce.js
new file mode 100644
index 0000000..0e41fc4
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/derived/__mocks__/evaluateOnce.js
@@ -0,0 +1,14 @@
+import { always } from '../../base';
+export function evaluateOnce(node, children = [], callback) {
+  if (!Array.isArray(children)) {
+    children = [children];
+  }
+  const alwaysNode = always(node);
+  for (let i = 0; i < children.length; i++) {
+    alwaysNode.__addChild(children[i]);
+  }
+  for (let i = 0; i < children.length; i++) {
+    alwaysNode.__removeChild(children[i]);
+  }
+  callback && callback();
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/derived/acc.js b/node_modules/react-native-reanimated/lib/reanimated1/derived/acc.js
new file mode 100644
index 0000000..0629431
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/derived/acc.js
@@ -0,0 +1,11 @@
+import { set, add, proc } from '../base';
+import AnimatedValue from '../core/InternalAnimatedValue';
+
+const procAcc = proc(function (v, acc) {
+  return set(acc, add(acc, v));
+});
+
+export default function acc(v) {
+  const acc = new AnimatedValue(0);
+  return procAcc(v, acc);
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/derived/color.js b/node_modules/react-native-reanimated/lib/reanimated1/derived/color.js
new file mode 100644
index 0000000..d535331
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/derived/color.js
@@ -0,0 +1,47 @@
+import { Platform } from 'react-native';
+
+import {
+  add,
+  cond,
+  concat,
+  lessThan,
+  multiply,
+  round,
+  sub,
+  proc,
+} from '../base';
+import AnimatedNode from '../core/AnimatedNode';
+
+const procColor = proc(function (r, g, b, a) {
+  const color = add(
+    multiply(a, 1 << 24),
+    multiply(round(r), 1 << 16),
+    multiply(round(g), 1 << 8),
+    round(b)
+  );
+
+  if (Platform.OS === 'android') {
+    // on Android color is represented as signed 32 bit int
+    return cond(
+      lessThan(color, (1 << 31) >>> 0),
+      color,
+      sub(color, Math.pow(2, 32))
+    );
+  }
+  return color;
+});
+
+export default function color(r, g, b, a = 1) {
+  if (Platform.OS === 'web') {
+    // doesn't support bit shifting
+    return concat('rgba(', r, ',', g, ',', b, ',', a, ')');
+  }
+
+  if (a instanceof AnimatedNode) {
+    a = round(multiply(a, 255));
+  } else {
+    a = Math.round(a * 255);
+  }
+
+  return procColor(r, g, b, a);
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/derived/diff.js b/node_modules/react-native-reanimated/lib/reanimated1/derived/diff.js
new file mode 100644
index 0000000..d57cdc9
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/derived/diff.js
@@ -0,0 +1,16 @@
+import { cond, block, defined, sub, set, proc } from '../base';
+import AnimatedValue from '../core/InternalAnimatedValue';
+
+const procDiff = proc(function (v, stash, prev) {
+  return block([
+    set(stash, cond(defined(prev), sub(v, prev), 0)),
+    set(prev, v),
+    stash,
+  ]);
+});
+
+export default function diff(v) {
+  const stash = new AnimatedValue(0);
+  const prev = new AnimatedValue();
+  return procDiff(v, stash, prev);
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/derived/diffClamp.js b/node_modules/react-native-reanimated/lib/reanimated1/derived/diffClamp.js
new file mode 100644
index 0000000..46ae931
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/derived/diffClamp.js
@@ -0,0 +1,11 @@
+import { cond, defined, set, add, min, max } from '../base';
+import AnimatedValue from '../core/InternalAnimatedValue';
+import diff from './diff';
+
+export default function diffClamp(a, minVal, maxVal) {
+  const value = new AnimatedValue();
+  return set(
+    value,
+    min(max(add(cond(defined(value), value, a), diff(a)), minVal), maxVal)
+  );
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/derived/evaluateOnce.js b/node_modules/react-native-reanimated/lib/reanimated1/derived/evaluateOnce.js
new file mode 100644
index 0000000..8e81b37
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/derived/evaluateOnce.js
@@ -0,0 +1,35 @@
+import AnimatedValue from '../core/InternalAnimatedValue';
+import { createAnimatedSet as set } from '../core/AnimatedSet';
+import { createAnimatedCall as call } from '../core/AnimatedCall';
+import { createAnimatedAlways as always } from '../core/AnimatedAlways';
+import { createAnimatedCond as cond } from '../core/AnimatedCond';
+
+/**
+ * evaluate given node and notify children
+ * @param node - node to be evaluated
+ * @param input - nodes (or one node) representing values which states input for node.
+ * @param callback - after callback
+ */
+
+export function evaluateOnce(node, input = [], callback) {
+  if (!Array.isArray(input)) {
+    input = [input];
+  }
+  const done = new AnimatedValue(0);
+  const evalNode = cond(
+    done,
+    0,
+    call([node, set(done, 1)], () => {
+      callback && callback();
+      for (let i = 0; i < input.length; i++) {
+        input[i].__removeChild(alwaysNode);
+        alwaysNode.__detach();
+      }
+    })
+  );
+  const alwaysNode = always(evalNode);
+  for (let i = 0; i < input.length; i++) {
+    input[i].__addChild(alwaysNode);
+    alwaysNode.__attach();
+  }
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/derived/index.js b/node_modules/react-native-reanimated/lib/reanimated1/derived/index.js
new file mode 100644
index 0000000..e6e1541
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/derived/index.js
@@ -0,0 +1,8 @@
+export { default as acc } from './acc';
+export { default as color } from './color';
+export { default as diff } from './diff';
+export { default as diffClamp } from './diffClamp';
+export { default as interpolateNode, Extrapolate } from './interpolate';
+export { default as interpolateColors } from './interpolateColors';
+export { default as onChange } from './onChange';
+export { default as useCode } from './useCode';
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/derived/interpolate.js b/node_modules/react-native-reanimated/lib/reanimated1/derived/interpolate.js
new file mode 100644
index 0000000..1c0406b
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/derived/interpolate.js
@@ -0,0 +1,152 @@
+import {
+  lessThan,
+  multiply,
+  sub,
+  add,
+  divide,
+  greaterThan,
+  lessOrEq,
+  eq,
+} from '../operators';
+import invariant from 'invariant';
+
+import AnimatedNode from '../core/AnimatedNode';
+import { createAnimatedCond as cond } from '../core/AnimatedCond';
+import { createAnimatedFunction as proc } from '../core/AnimatedFunction';
+
+const interpolateInternalSingleProc = proc(function (
+  value,
+  inS,
+  inE,
+  outS,
+  outE
+) {
+  const progress = divide(sub(value, inS), sub(inE, inS));
+  // logic below was made in order to provide a compatibility witn an Animated API
+  const resultForNonZeroRange = add(outS, multiply(progress, sub(outE, outS)));
+  const result = cond(
+    eq(inS, inE),
+    cond(lessOrEq(value, inS), outS, outE),
+    resultForNonZeroRange
+  );
+  return result;
+});
+
+function interpolateInternalSingle(value, inputRange, outputRange, offset) {
+  const inS = inputRange[offset];
+  const inE = inputRange[offset + 1];
+  const outS = outputRange[offset];
+  const outE = outputRange[offset + 1];
+  return interpolateInternalSingleProc(value, inS, inE, outS, outE);
+}
+
+function interpolateInternal(value, inputRange, outputRange, offset = 0) {
+  if (inputRange.length - offset === 2) {
+    return interpolateInternalSingle(value, inputRange, outputRange, offset);
+  }
+  return cond(
+    lessThan(value, inputRange[offset + 1]),
+    interpolateInternalSingle(value, inputRange, outputRange, offset),
+    interpolateInternal(value, inputRange, outputRange, offset + 1)
+  );
+}
+
+export const Extrapolate = {
+  EXTEND: 'extend',
+  CLAMP: 'clamp',
+  IDENTITY: 'identity',
+};
+
+function checkNonDecreasing(name, arr) {
+  for (let i = 1; i < arr.length; ++i) {
+    // We can't validate animated nodes in JS.
+    if (arr[i] instanceof AnimatedNode || arr[i - 1] instanceof AnimatedNode)
+      continue;
+    invariant(
+      arr[i] >= arr[i - 1],
+      '%s must be monotonically non-decreasing. (%s)',
+      name,
+      arr
+    );
+  }
+}
+
+function checkMinElements(name, arr) {
+  invariant(
+    arr.length >= 2,
+    '%s must have at least 2 elements. (%s)',
+    name,
+    arr
+  );
+}
+
+function checkValidNumbers(name, arr) {
+  for (let i = 0; i < arr.length; i++) {
+    // We can't validate animated nodes in JS.
+    if (arr[i] instanceof AnimatedNode || typeof arr[i] !== 'number') continue;
+    invariant(
+      Number.isFinite(arr[i]),
+      '%s cannot include %s. (%s)',
+      name,
+      arr[i],
+      arr
+    );
+  }
+}
+
+function convertToRadians(outputRange) {
+  for (const [i, value] of outputRange.entries()) {
+    if (typeof value === 'string' && value.endsWith('deg')) {
+      outputRange[i] = parseFloat(value) * (Math.PI / 180);
+    } else if (typeof value === 'string' && value.endsWith('rad')) {
+      outputRange[i] = parseFloat(value);
+    }
+  }
+}
+
+export default function interpolate(value, config) {
+  const {
+    inputRange,
+    outputRange,
+    extrapolate = Extrapolate.EXTEND,
+    extrapolateLeft,
+    extrapolateRight,
+  } = config;
+
+  checkMinElements('inputRange', inputRange);
+  checkValidNumbers('inputRange', inputRange);
+  checkMinElements('outputRange', outputRange);
+  checkValidNumbers('outputRange', outputRange);
+  checkNonDecreasing('inputRange', inputRange);
+  invariant(
+    inputRange.length === outputRange.length,
+    'inputRange and outputRange must be the same length.'
+  );
+
+  convertToRadians(outputRange);
+  const left = extrapolateLeft || extrapolate;
+  const right = extrapolateRight || extrapolate;
+  let output = interpolateInternal(value, inputRange, outputRange);
+
+  if (left === Extrapolate.CLAMP) {
+    output = cond(lessThan(value, inputRange[0]), outputRange[0], output);
+  } else if (left === Extrapolate.IDENTITY) {
+    output = cond(lessThan(value, inputRange[0]), value, output);
+  }
+
+  if (right === Extrapolate.CLAMP) {
+    output = cond(
+      greaterThan(value, inputRange[inputRange.length - 1]),
+      outputRange[outputRange.length - 1],
+      output
+    );
+  } else if (right === Extrapolate.IDENTITY) {
+    output = cond(
+      greaterThan(value, inputRange[inputRange.length - 1]),
+      value,
+      output
+    );
+  }
+
+  return output;
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/derived/interpolateColors.js b/node_modules/react-native-reanimated/lib/reanimated1/derived/interpolateColors.js
new file mode 100644
index 0000000..c3855fd
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/derived/interpolateColors.js
@@ -0,0 +1,62 @@
+import { processColor } from 'react-native';
+import { round } from '../base';
+import color from './color';
+import interpolate, { Extrapolate } from './interpolate';
+
+function red(c) {
+  return (c >> 16) & 255;
+}
+function green(c) {
+  return (c >> 8) & 255;
+}
+function blue(c) {
+  return c & 255;
+}
+function opacity(c) {
+  return ((c >> 24) & 255) / 255;
+}
+
+/**
+ * Use this if you want to interpolate an `Animated.Value` into color values.
+ *
+ * #### Why is this needed?
+ *
+ * Unfortunately, if you'll pass color values directly into the `outputRange` option
+ * of `interpolate()` function, that won't really work (at least at the moment).
+ * See https://github.com/software-mansion/react-native-reanimated/issues/181 .
+ *
+ * So, for now you can just use this helper instead.
+ */
+export default function interpolateColors(animationValue, options) {
+  const { inputRange, outputColorRange } = options;
+  const colors = outputColorRange.map(processColor);
+
+  const r = round(
+    interpolate(animationValue, {
+      inputRange,
+      outputRange: colors.map(red),
+      extrapolate: Extrapolate.CLAMP,
+    })
+  );
+  const g = round(
+    interpolate(animationValue, {
+      inputRange,
+      outputRange: colors.map(green),
+      extrapolate: Extrapolate.CLAMP,
+    })
+  );
+  const b = round(
+    interpolate(animationValue, {
+      inputRange,
+      outputRange: colors.map(blue),
+      extrapolate: Extrapolate.CLAMP,
+    })
+  );
+  const a = interpolate(animationValue, {
+    inputRange,
+    outputRange: colors.map(opacity),
+    extrapolate: Extrapolate.CLAMP,
+  });
+
+  return color(r, g, b, a);
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/derived/onChange.js b/node_modules/react-native-reanimated/lib/reanimated1/derived/onChange.js
new file mode 100644
index 0000000..7483d2f
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/derived/onChange.js
@@ -0,0 +1,14 @@
+import { block, cond, defined, neq, not, set, proc } from '../base';
+import AnimatedValue from '../core/InternalAnimatedValue';
+
+const procOnChange = proc(function (value, action, prevValue) {
+  return block([
+    cond(not(defined(prevValue)), set(prevValue, value)),
+    cond(neq(value, prevValue), [set(prevValue, value), action]),
+  ]);
+});
+
+export default function onChange(value, action) {
+  const prevValue = new AnimatedValue();
+  return procOnChange(value, action, prevValue);
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/derived/useCode.js b/node_modules/react-native-reanimated/lib/reanimated1/derived/useCode.js
new file mode 100644
index 0000000..b3978b1
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/derived/useCode.js
@@ -0,0 +1,41 @@
+import React from 'react';
+import { always, block } from '../base';
+
+/**
+ * @callback NodeFactory
+ * Function to create a node or an array of nodes.
+ * @returns {(Node[] | Node | null | undefined | Boolean)}
+ */
+
+/**
+ * React hook to run a node.
+ * @param {NodeFactory} nodeFactory Function to build the node to run.
+ * @param dependencies Array of dependencies. Refresh the node on changes.
+ */
+export default function useCode(nodeFactory, dependencies) {
+  if (!(React.useEffect instanceof Function)) return;
+
+  React.useEffect(() => {
+    // check and correct 1st parameter
+    if (!(nodeFactory instanceof Function)) {
+      console.warn(
+        'useCode() first argument should be a function that returns an animation node.'
+      );
+
+      const node = nodeFactory;
+      nodeFactory = () => node;
+    }
+
+    let node = nodeFactory();
+    if (node) {
+      // allow factory to return array
+      if (node instanceof Array) node = block(node);
+
+      const animatedAlways = always(node);
+      animatedAlways.__attach();
+
+      // return undo function
+      return () => animatedAlways.__detach();
+    }
+  }, dependencies);
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/index.js b/node_modules/react-native-reanimated/lib/reanimated1/index.js
new file mode 100644
index 0000000..894c20a
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/index.js
@@ -0,0 +1,53 @@
+import EasingNode from './Easing';
+import AnimatedClock from './core/AnimatedClock';
+import AnimatedValue from './core/AnimatedValue';
+import AnimatedNode from './core/AnimatedNode';
+import AnimatedCode from './core/AnimatedCode';
+import decay from './animations/decay';
+import timing from './animations/timing';
+import spring from './animations/spring';
+import Animation from './animations/Animation';
+import {
+  Transition,
+  Transitioning,
+  createTransitioningComponent,
+} from './Transitioning';
+import SpringUtils from './animations/SpringUtils';
+import useValue from './useValue';
+import backwardCompatibleAnimWrapper from './animations/backwardCompatibleAnimWrapper';
+
+const decayWrapper = backwardCompatibleAnimWrapper(
+  decay,
+  Animation.decayDefaultState
+);
+const timingWrapper = backwardCompatibleAnimWrapper(
+  timing,
+  Animation.timingDefaultState
+);
+const springWrapper = backwardCompatibleAnimWrapper(
+  spring,
+  Animation.springDefaultState
+);
+
+// operations
+export * from './base';
+export * from './derived';
+export {
+  AnimatedCode as Code,
+  // transitions
+  EasingNode,
+  Transitioning,
+  Transition,
+  createTransitioningComponent,
+  // nodes
+  AnimatedClock as Clock,
+  AnimatedValue as Value,
+  AnimatedNode as Node,
+  // animations
+  decayWrapper as decay,
+  timingWrapper as timing,
+  springWrapper as spring,
+  SpringUtils,
+  // hooks
+  useValue,
+};
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/operators.js b/node_modules/react-native-reanimated/lib/reanimated1/operators.js
new file mode 100644
index 0000000..19e6104
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/operators.js
@@ -0,0 +1,35 @@
+import { createAnimatedOperator } from './core/AnimatedOperator';
+
+const operator = createAnimatedOperator;
+
+export const add = operator('add');
+export const sub = operator('sub');
+export const multiply = operator('multiply');
+export const divide = operator('divide');
+export const pow = operator('pow');
+export const modulo = operator('modulo');
+export const sqrt = operator('sqrt');
+export const log = operator('log');
+export const sin = operator('sin');
+export const cos = operator('cos');
+export const exp = operator('exp');
+export const round = operator('round');
+export const lessThan = operator('lessThan');
+export const eq = operator('eq');
+export const greaterThan = operator('greaterThan');
+export const lessOrEq = operator('lessOrEq');
+export const greaterOrEq = operator('greaterOrEq');
+export const neq = operator('neq');
+export const and = operator('and');
+export const or = operator('or');
+export const defined = operator('defined');
+export const not = operator('not');
+export const tan = operator('tan');
+export const acos = operator('acos');
+export const asin = operator('asin');
+export const atan = operator('atan');
+export const abs = operator('abs');
+export const ceil = operator('ceil');
+export const floor = operator('floor');
+export const max = operator('max');
+export const min = operator('min');
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/useValue.js b/node_modules/react-native-reanimated/lib/reanimated1/useValue.js
new file mode 100644
index 0000000..93f3ba1
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/useValue.js
@@ -0,0 +1,10 @@
+import React from 'react';
+import AnimatedValue from './core/AnimatedValue';
+
+export default function useValue(initialValue) {
+  const ref = React.useRef(null);
+  if (ref.current === null) {
+    ref.current = new AnimatedValue(initialValue);
+  }
+  return ref.current;
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated1/val.js b/node_modules/react-native-reanimated/lib/reanimated1/val.js
new file mode 100644
index 0000000..13ed220
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/reanimated1/val.js
@@ -0,0 +1,3 @@
+export function val(v) {
+  return v && v.__getValue ? v.__getValue() : v || 0;
+}
diff --git a/node_modules/react-native-reanimated/lib/reanimated2/Easing.js b/node_modules/react-native-reanimated/lib/reanimated2/Easing.js
index 7675f98..f16ce59 100644
--- a/node_modules/react-native-reanimated/lib/reanimated2/Easing.js
+++ b/node_modules/react-native-reanimated/lib/reanimated2/Easing.js
@@ -1,3 +1,9 @@
+// spread and rest parameters can't be used in worklets right now
+/* eslint-disable prefer-rest-params */
+/* eslint-disable prefer-spread */
+/* global _WORKLET */
+// @ts-ignore reanimated1/Easing is JS file
+import EasingNode from '../reanimated1/Easing';
 import { Bezier } from './Bezier';
 /**
  * A linear function, `f(t) = t`. Position correlates to elapsed time one to
@@ -203,4 +209,40 @@ const EasingObject = {
     out,
     inOut,
 };
+// TODO type worklets
+function createChecker(worklet, workletName, prevArgs) {
+    /* should return Animated.Value or worklet */
+    function checkIfReaOne() {
+        'worklet';
+        if (arguments && !_WORKLET) {
+            for (let i = 0; i < arguments.length; i++) {
+                const arg = arguments[i];
+                if (arg && arg.__nodeID) {
+                    console.warn(`Easing was renamed to EasingNode in Reanimated 2. Please use EasingNode instead`);
+                    if (prevArgs) {
+                        return EasingNode[workletName]
+                            .apply(undefined, prevArgs)
+                            .apply(undefined, arguments);
+                    }
+                    return EasingNode[workletName].apply(undefined, arguments);
+                }
+            }
+        }
+        // @ts-ignore this is implicitly any - TODO
+        const res = worklet.apply(this, arguments);
+        if (!_WORKLET && res && typeof res === 'function' && res.__workletHash) {
+            return createChecker(res, workletName, arguments);
+        }
+        return res;
+    }
+    // use original worklet on UI side
+    checkIfReaOne._closure = worklet._closure;
+    checkIfReaOne.asString = worklet.asString;
+    checkIfReaOne.__workletHash = worklet.__workletHash;
+    checkIfReaOne.__location = worklet.__location;
+    return checkIfReaOne;
+}
+Object.keys(EasingObject).forEach((key) => {
+    EasingObject[key] = createChecker(EasingObject[key], key);
+});
 export const Easing = EasingObject;
diff --git a/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js b/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js
index 87a79ff..c91bf6f 100644
--- a/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js
+++ b/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js
@@ -24,30 +24,13 @@ export function measure(animatedRef) {
     }
     return result;
 }
-export function dispatchCommand(animatedRef, commandName, args) {
+export function scrollTo(animatedRef, x, y, animated) {
     'worklet';
     if (!_WORKLET || isNativeIndefined) {
         return;
     }
-    const shadowNodeWrapper = animatedRef();
-    _dispatchCommand(shadowNodeWrapper, commandName, args);
-}
-export let scrollTo;
-if (global._IS_FABRIC) {
-    scrollTo = (animatedRef, x, y, animated) => {
-        'worklet';
-        dispatchCommand(animatedRef, 'scrollTo', [x, y, animated]);
-    };
-}
-else {
-    scrollTo = (animatedRef, x, y, animated) => {
-        'worklet';
-        if (!_WORKLET || isNativeIndefined) {
-            return;
-        }
-        const viewTag = animatedRef();
-        _scrollTo(viewTag, x, y, animated);
-    };
+    const viewTag = animatedRef();
+    _scrollTo(viewTag, x, y, animated);
 }
 export function setGestureState(handlerTag, newState) {
     'worklet';
diff --git a/node_modules/react-native-reanimated/lib/reanimated2/UpdateProps.js b/node_modules/react-native-reanimated/lib/reanimated2/UpdateProps.js
index 0f2427d..d67ada7 100644
--- a/node_modules/react-native-reanimated/lib/reanimated2/UpdateProps.js
+++ b/node_modules/react-native-reanimated/lib/reanimated2/UpdateProps.js
@@ -32,32 +32,17 @@ if (shouldBeUseWeb()) {
     };
 }
 else {
-    if (global._IS_FABRIC) {
-        updatePropsByPlatform = (viewDescriptors, updates, _) => {
-            'worklet';
-            for (const key in updates) {
-                if (ColorProperties.indexOf(key) !== -1) {
-                    updates[key] = processColor(updates[key]);
-                }
-            }
-            viewDescriptors.value.forEach((viewDescriptor) => {
-                _updatePropsFabric(viewDescriptor.shadowNodeWrapper, updates);
-            });
-        };
-    }
-    else {
-        updatePropsByPlatform = (viewDescriptors, updates, _) => {
-            'worklet';
-            for (const key in updates) {
-                if (ColorProperties.indexOf(key) !== -1) {
-                    updates[key] = processColor(updates[key]);
-                }
+    updatePropsByPlatform = (viewDescriptors, updates, _) => {
+        'worklet';
+        for (const key in updates) {
+            if (ColorProperties.indexOf(key) !== -1) {
+                updates[key] = processColor(updates[key]);
             }
-            viewDescriptors.value.forEach((viewDescriptor) => {
-                _updatePropsPaper(viewDescriptor.tag, viewDescriptor.name || 'RCTView', updates);
-            });
-        };
-    }
+        }
+        viewDescriptors.value.forEach((viewDescriptor) => {
+            _updateProps(viewDescriptor.tag, viewDescriptor.name || 'RCTView', updates);
+        });
+    };
 }
 export const updateProps = updatePropsByPlatform;
 export const updatePropsJestWrapper = (viewDescriptors, updates, maybeViewRef, animatedStyle, adapters) => {
diff --git a/node_modules/react-native-reanimated/lib/reanimated2/core.js b/node_modules/react-native-reanimated/lib/reanimated2/core.js
index 4994490..284915e 100644
--- a/node_modules/react-native-reanimated/lib/reanimated2/core.js
+++ b/node_modules/react-native-reanimated/lib/reanimated2/core.js
@@ -1,4 +1,4 @@
-/* global _WORKLET _getCurrentTime _frameTimestamp _eventTimestamp _setGlobalConsole */
+/* global _WORKLET _getCurrentTime _frameTimestamp _eventTimestamp, _setGlobalConsole */
 import NativeReanimatedModule from './NativeReanimated';
 import { Platform } from 'react-native';
 import { nativeShouldBeMock, shouldBeUseWeb, isWeb } from './PlatformChecker';
@@ -52,9 +52,6 @@ export function makeShareable(value) {
     return NativeReanimatedModule.makeShareable(value);
 }
 export function getViewProp(viewTag, propName) {
-    if (global._IS_FABRIC) {
-        throw new Error('[react-native-reanimated] `getViewProp` is not supported on Fabric yet');
-    }
     return new Promise((resolve, reject) => {
         return NativeReanimatedModule.getViewProp(viewTag, propName, (result) => {
             if (typeof result === 'string' && result.substr(0, 6) === 'error:') {
diff --git a/node_modules/react-native-reanimated/lib/reanimated2/fabricUtils.js b/node_modules/react-native-reanimated/lib/reanimated2/fabricUtils.js
deleted file mode 100644
index 0f220d4..0000000
--- a/node_modules/react-native-reanimated/lib/reanimated2/fabricUtils.js
+++ /dev/null
@@ -1,18 +0,0 @@
-/* eslint-disable camelcase */
-// eslint-disable-next-line @typescript-eslint/no-explicit-any
-let findHostInstance_DEPRECATED = (_ref) => null;
-try {
-    // eslint-disable-next-line @typescript-eslint/no-var-requires
-    findHostInstance_DEPRECATED =
-        require('react-native/Libraries/Renderer/shims/ReactFabric').findHostInstance_DEPRECATED;
-}
-catch (e) {
-    // do nothing
-}
-export function getShadowNodeWrapperFromHostInstance(hostInstance) {
-    // @ts-ignore Fabric
-    return hostInstance._internalInstanceHandle.stateNode.node;
-}
-export function getShadowNodeWrapperFromRef(ref) {
-    return getShadowNodeWrapperFromHostInstance(findHostInstance_DEPRECATED(ref));
-}
diff --git a/node_modules/react-native-reanimated/lib/reanimated2/globals.d.ts b/node_modules/react-native-reanimated/lib/reanimated2/globals.d.ts
index a9bdfe6..4f0c619 100644
--- a/node_modules/react-native-reanimated/lib/reanimated2/globals.d.ts
+++ b/node_modules/react-native-reanimated/lib/reanimated2/globals.d.ts
@@ -1,11 +1,9 @@
 import { AnimatedStyle, StyleProps } from './commonTypes';
 import { ReanimatedConsole } from './core';
-import { ShadowNodeWrapper } from './hook/commonTypes';
 import { MeasuredDimensions } from './NativeMethods';
 import { NativeReanimated } from './NativeReanimated/NativeReanimated';
 declare global {
   const _WORKLET: boolean;
-  const _IS_FABRIC: boolean;
   const _frameTimestamp: number;
   const _eventTimestamp: number;
   const _setGlobalConsole: (console?: ReanimatedConsole) => void;
@@ -16,18 +14,11 @@ declare global {
     flag: { value: boolean; _value: boolean }
   ) => void;
   const _setGestureState: (handlerTag: number, newState: number) => void;
-  const _updatePropsPaper: (
+  const _updateProps: (
     tag: number,
     name: string,
     updates: StyleProps | AnimatedStyle
   ) => void;
-  const _updatePropsFabric: (
-    shadowNodeWrapper: ShadowNodeWrapper,
-    props: StyleProps | AnimatedStyle
-  ) => void;
-  const _removeShadowNodeFromRegistry: (
-    shadowNodeWrapper: ShadowNodeWrapper
-  ) => void;
   const _measure: (viewTag: number) => MeasuredDimensions;
   const _scrollTo: (
     viewTag: number,
@@ -35,11 +26,6 @@ declare global {
     y: number,
     animated: boolean
   ) => void;
-  const _dispatchCommand: (
-    shadowNodeWrapper: ShadowNodeWrapper,
-    commandName: string,
-    args: Array<unknown>
-  ) => void;
   const _chronoNow: () => number;
   const ReanimatedDataMock: {
     now: () => number;
@@ -50,12 +36,10 @@ declare global {
       _log: (s: string) => void;
       _setGestureState: () => void;
       _WORKLET: boolean;
-      _IS_FABRIC: boolean;
       __reanimatedModuleProxy: NativeReanimated;
       _frameTimestamp: number | null;
       _measure: () => MeasuredDimensions;
       _scrollTo: () => void;
-      _dispatchCommand: () => void;
       _chronoNow: () => number;
       performance: { now: () => number };
       LayoutAnimationRepository: {
diff --git a/node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedRef.js b/node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedRef.js
index 2e637d8..a3737a7 100644
--- a/node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedRef.js
+++ b/node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedRef.js
@@ -1,19 +1,15 @@
 import { useRef } from 'react';
-import { useSharedValue } from './useSharedValue';
 import { getTag } from '../NativeMethods';
-import { getShadowNodeWrapperFromHostInstance } from '../fabricUtils';
+import { useSharedValue } from './useSharedValue';
 export function useAnimatedRef() {
     const tag = useSharedValue(-1);
     const ref = useRef();
-    const isFabric = global._IS_FABRIC;
     if (!ref.current) {
         const fun = ((component) => {
             'worklet';
             // enters when ref is set by attaching to a component
             if (component) {
-                tag.value = isFabric
-                    ? getShadowNodeWrapperFromHostInstance(component)
-                    : getTag(component);
+                tag.value = getTag(component);
                 fun.current = component;
             }
             return tag.value;
diff --git a/node_modules/react-native-reanimated/lib/reanimated2/hook/utils.js b/node_modules/react-native-reanimated/lib/reanimated2/hook/utils.js
index 40de65b..0c51bf1 100644
--- a/node_modules/react-native-reanimated/lib/reanimated2/hook/utils.js
+++ b/node_modules/react-native-reanimated/lib/reanimated2/hook/utils.js
@@ -12,6 +12,11 @@ export function useEvent(handler, eventNames = [], rebuild = false) {
     else if (rebuild) {
         initRef.current.updateWorklet(handler);
     }
+    useEffect(() => {
+        return () => {
+            initRef.current = null;
+        };
+    }, []);
     return initRef;
 }
 export function useHandler(handlers, dependencies) {
diff --git a/node_modules/react-native-reanimated/lib/reanimated2/interpolateColor.js b/node_modules/react-native-reanimated/lib/reanimated2/interpolateColor.js
index 80584fe..37c93ef 100644
--- a/node_modules/react-native-reanimated/lib/reanimated2/interpolateColor.js
+++ b/node_modules/react-native-reanimated/lib/reanimated2/interpolateColor.js
@@ -1,12 +1,9 @@
 import { hsvToColor, RGBtoHSV, rgbaColor, processColor, red, green, blue, opacity, } from './Colors';
 import { makeMutable } from './core';
 import { interpolate } from './interpolation';
+// @ts-ignore JS file
+import { Extrapolate } from '../reanimated1/derived';
 import { useSharedValue } from './hook/useSharedValue';
-export const Extrapolate = {
-    EXTEND: 'extend',
-    CLAMP: 'clamp',
-    IDENTITY: 'identity',
-};
 const interpolateColorsHSV = (value, inputRange, colors) => {
     'worklet';
     const h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);
diff --git a/node_modules/react-native-reanimated/lib/reanimated2/interpolation.js b/node_modules/react-native-reanimated/lib/reanimated2/interpolation.js
index 5afa680..636124a 100644
--- a/node_modules/react-native-reanimated/lib/reanimated2/interpolation.js
+++ b/node_modules/react-native-reanimated/lib/reanimated2/interpolation.js
@@ -1,9 +1,15 @@
+// @ts-ignore JS file
+import interpolateNode from '../reanimated1/derived/interpolate';
 export var Extrapolation;
 (function (Extrapolation) {
     Extrapolation["IDENTITY"] = "identity";
     Extrapolation["CLAMP"] = "clamp";
     Extrapolation["EXTEND"] = "extend";
 })(Extrapolation || (Extrapolation = {}));
+function isNode(x) {
+    'worklet';
+    return x.__nodeId !== undefined;
+}
 function getVal(type, coef, val, leftEdgeOutput, rightEdgeOutput, x) {
     'worklet';
     switch (type) {
@@ -82,6 +88,15 @@ export function interpolate(x, input, output, type) {
         throw Error('Interpolation input and output should contain at least two values.');
     }
     const extrapolationConfig = validateType(type);
+    if (isNode(x)) {
+        console.warn(`interpolate() was renamed to interpolateNode() in Reanimated 2. Please use interpolateNode() instead`);
+        return interpolateNode(x, {
+            inputRange: input,
+            outputRange: output,
+            extrapolateLeft: extrapolationConfig.extrapolateLeft,
+            extrapolateRight: extrapolationConfig.extrapolateRight,
+        });
+    }
     const length = input.length;
     const narrowedInput = {
         leftEdgeInput: input[0],
diff --git a/node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/index.js b/node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/index.js
index d96a2c5..3a948e6 100644
--- a/node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/index.js
+++ b/node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/index.js
@@ -20,9 +20,6 @@ if (shouldBeUseWeb()) {
     global._scrollTo = () => {
         console.warn("[Reanimated] You can't use `scrollTo` with Chrome Debugger or with web version");
     };
-    global._dispatchCommand = () => {
-        console.warn("[Reanimated] You can't use `scrollTo` or `dispatchCommand` methods with Chrome Debugger or with web version");
-    };
     global._setGestureState = () => {
         console.warn("[Reanimated] You can't use `setGestureState` with Chrome Debugger or with web version");
     };
diff --git a/node_modules/react-native-reanimated/lib/types/ConfigHelper.d.ts b/node_modules/react-native-reanimated/lib/types/lib/ConfigHelper.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/ConfigHelper.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/ConfigHelper.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/ReanimatedEventEmitter.d.ts b/node_modules/react-native-reanimated/lib/types/lib/ReanimatedEventEmitter.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/ReanimatedEventEmitter.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/ReanimatedEventEmitter.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/ReanimatedModule.d.ts b/node_modules/react-native-reanimated/lib/types/lib/ReanimatedModule.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/ReanimatedModule.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/ReanimatedModule.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/ReanimatedModule.macos.d.ts b/node_modules/react-native-reanimated/lib/types/lib/ReanimatedModule.macos.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/ReanimatedModule.macos.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/ReanimatedModule.macos.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/ReanimatedModule.native.d.ts b/node_modules/react-native-reanimated/lib/types/lib/ReanimatedModule.native.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/ReanimatedModule.native.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/ReanimatedModule.native.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/ReanimatedModule.windows.d.ts b/node_modules/react-native-reanimated/lib/types/lib/ReanimatedModule.windows.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/ReanimatedModule.windows.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/ReanimatedModule.windows.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/ReanimatedModuleCompat.d.ts b/node_modules/react-native-reanimated/lib/types/lib/ReanimatedModuleCompat.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/ReanimatedModuleCompat.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/ReanimatedModuleCompat.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/createAnimatedComponent.d.ts b/node_modules/react-native-reanimated/lib/types/lib/createAnimatedComponent.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/createAnimatedComponent.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/createAnimatedComponent.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/Bezier.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/Bezier.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/Bezier.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/Bezier.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/Colors.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/Colors.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/Colors.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/Colors.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/Easing.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/Easing.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/Easing.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/Easing.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/NativeMethods.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/NativeMethods.d.ts
similarity index 67%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/NativeMethods.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/NativeMethods.d.ts
index 0ee2a99..bac33e7 100644
--- a/node_modules/react-native-reanimated/lib/types/reanimated2/NativeMethods.d.ts
+++ b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/NativeMethods.d.ts
@@ -10,6 +10,5 @@ export interface MeasuredDimensions {
     pageY: number;
 }
 export declare function measure(animatedRef: RefObjectFunction<Component>): MeasuredDimensions;
-export declare function dispatchCommand(animatedRef: RefObjectFunction<Component>, commandName: string, args: Array<unknown>): void;
-export declare let scrollTo: (animatedRef: RefObjectFunction<Component>, x: number, y: number, animated: boolean) => void;
+export declare function scrollTo(animatedRef: RefObjectFunction<Component>, x: number, y: number, animated: boolean): void;
 export declare function setGestureState(handlerTag: number, newState: number): void;
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/NativeReanimated/NativeReanimated.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/NativeReanimated/NativeReanimated.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/NativeReanimated/NativeReanimated.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/NativeReanimated/NativeReanimated.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/NativeReanimated/index.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/NativeReanimated/index.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/NativeReanimated/index.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/NativeReanimated/index.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/PlatformChecker.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/PlatformChecker.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/PlatformChecker.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/PlatformChecker.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/PropAdapters.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/PropAdapters.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/PropAdapters.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/PropAdapters.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/UpdateProps.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/UpdateProps.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/UpdateProps.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/UpdateProps.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/ViewDescriptorsSet.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/ViewDescriptorsSet.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/ViewDescriptorsSet.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/ViewDescriptorsSet.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/WorkletEventHandler.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/WorkletEventHandler.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/WorkletEventHandler.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/WorkletEventHandler.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/__mocks__/MutableValue.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/__mocks__/MutableValue.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/__mocks__/MutableValue.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/__mocks__/MutableValue.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/__mocks__/NativeReanimated.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/__mocks__/NativeReanimated.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/__mocks__/NativeReanimated.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/__mocks__/NativeReanimated.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/__mocks__/NativeReanimated.native.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/__mocks__/NativeReanimated.native.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/__mocks__/NativeReanimated.native.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/__mocks__/NativeReanimated.native.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/animation/commonTypes.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/animation/commonTypes.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/animation/commonTypes.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/animation/commonTypes.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/animation/decay.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/animation/decay.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/animation/decay.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/animation/decay.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/animation/delay.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/animation/delay.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/animation/delay.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/animation/delay.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/animation/index.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/animation/index.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/animation/index.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/animation/index.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/animation/repeat.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/animation/repeat.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/animation/repeat.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/animation/repeat.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/animation/sequence.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/animation/sequence.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/animation/sequence.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/animation/sequence.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/animation/spring.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/animation/spring.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/animation/spring.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/animation/spring.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/animation/styleAnimation.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/animation/styleAnimation.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/animation/styleAnimation.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/animation/styleAnimation.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/animation/timing.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/animation/timing.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/animation/timing.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/animation/timing.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/animation/util.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/animation/util.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/animation/util.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/animation/util.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/commonTypes.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/commonTypes.d.ts
similarity index 96%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/commonTypes.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/commonTypes.d.ts
index dac06ac..d22c828 100644
--- a/node_modules/react-native-reanimated/lib/types/reanimated2/commonTypes.d.ts
+++ b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/commonTypes.d.ts
@@ -1,4 +1,5 @@
 import { PerpectiveTransform, RotateTransform, RotateXTransform, RotateYTransform, RotateZTransform, ScaleTransform, ScaleXTransform, ScaleYTransform, TranslateXTransform, TranslateYTransform, SkewXTransform, SkewYTransform, MatrixTransform, ViewStyle, TextStyle } from 'react-native';
+import { Context } from './hook/commonTypes';
 export declare type TransformProperty = PerpectiveTransform | RotateTransform | RotateXTransform | RotateYTransform | RotateZTransform | ScaleTransform | ScaleXTransform | ScaleYTransform | TranslateXTransform | TranslateYTransform | SkewXTransform | SkewYTransform | MatrixTransform;
 export interface StyleProps extends ViewStyle, TextStyle {
     originX?: number;
@@ -12,7 +13,6 @@ export interface AnimatedStyle extends Record<string, Animation<AnimationObject>
 export interface SharedValue<T> {
     value: T;
 }
-export declare type Context = Record<string, unknown>;
 export interface WorkletFunction {
     _closure?: Context;
     __workletHash?: number;
@@ -77,4 +77,3 @@ export declare type ValueRotation = {
     roll: number;
 };
 export declare type SensorValueRotation = SharedValue<ValueRotation>;
-export declare type ShadowNodeWrapper = object;
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/component/FlatList.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/component/FlatList.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/component/FlatList.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/component/FlatList.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/component/WrappedComponents.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/component/WrappedComponents.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/component/WrappedComponents.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/component/WrappedComponents.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/component/index.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/component/index.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/component/index.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/component/index.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/core.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/core.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/core.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/core.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/hook/Hooks.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/Hooks.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/hook/Hooks.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/Hooks.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/hook/commonTypes.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/commonTypes.d.ts
similarity index 77%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/hook/commonTypes.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/commonTypes.d.ts
index ac6f6bc..6574d0e 100644
--- a/node_modules/react-native-reanimated/lib/types/reanimated2/hook/commonTypes.d.ts
+++ b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/commonTypes.d.ts
@@ -1,5 +1,5 @@
-import { Context, ShadowNodeWrapper } from '../commonTypes';
 export declare type DependencyList = Array<unknown> | undefined;
+export declare type Context = Record<string, unknown>;
 export interface ContextWithDependencies<TContext extends Context> {
     context: TContext;
     savedDependencies: DependencyList;
@@ -7,7 +7,6 @@ export interface ContextWithDependencies<TContext extends Context> {
 export interface Descriptor {
     tag: number;
     name: string;
-    shadowNodeWrapper: ShadowNodeWrapper;
 }
 export interface RefObjectFunction<T> {
     current: T | null;
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/hook/index.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/index.d.ts
similarity index 92%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/hook/index.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/index.d.ts
index e77837a..9ca736b 100644
--- a/node_modules/react-native-reanimated/lib/types/reanimated2/hook/index.d.ts
+++ b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/index.d.ts
@@ -1,4 +1,4 @@
-export { DependencyList } from './commonTypes';
+export { DependencyList, Context } from './commonTypes';
 export { useAnimatedProps, useEvent, useHandler, useWorkletCallback, } from './Hooks';
 export { useSharedValue } from './useSharedValue';
 export { useAnimatedStyle, AnimatedStyleResult } from './useAnimatedStyle';
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/hook/useAnimatedGestureHandler.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/useAnimatedGestureHandler.d.ts
similarity index 92%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/hook/useAnimatedGestureHandler.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/useAnimatedGestureHandler.d.ts
index c65b23b..9477057 100644
--- a/node_modules/react-native-reanimated/lib/types/reanimated2/hook/useAnimatedGestureHandler.d.ts
+++ b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/useAnimatedGestureHandler.d.ts
@@ -1,7 +1,7 @@
 import { MutableRefObject } from 'react';
-import { Context, WorkletFunction } from '../commonTypes';
+import { WorkletFunction } from '../commonTypes';
 import WorkletEventHandler from '../WorkletEventHandler';
-import { DependencyList } from './commonTypes';
+import { Context, DependencyList } from './commonTypes';
 interface Handler<T, TContext extends Context> extends WorkletFunction {
     (event: T, context: TContext, isCanceledOrFailed?: boolean): void;
 }
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/hook/useAnimatedReaction.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/useAnimatedReaction.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/hook/useAnimatedReaction.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/useAnimatedReaction.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/hook/useAnimatedRef.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/useAnimatedRef.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/hook/useAnimatedRef.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/useAnimatedRef.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/hook/useAnimatedScrollHandler.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/useAnimatedScrollHandler.d.ts
similarity index 88%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/hook/useAnimatedScrollHandler.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/useAnimatedScrollHandler.d.ts
index 602d39f..3744c48 100644
--- a/node_modules/react-native-reanimated/lib/types/reanimated2/hook/useAnimatedScrollHandler.d.ts
+++ b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/useAnimatedScrollHandler.d.ts
@@ -1,8 +1,8 @@
 import { RefObject } from 'react';
 import { NativeScrollEvent } from 'react-native';
-import { Context, NativeEvent, WorkletFunction } from '../commonTypes';
+import { NativeEvent, WorkletFunction } from '../commonTypes';
 import WorkletEventHandler from '../WorkletEventHandler';
-import { DependencyList } from './commonTypes';
+import { Context, DependencyList } from './commonTypes';
 export interface ScrollHandler<TContext extends Context> extends WorkletFunction {
     (event: NativeScrollEvent, context?: TContext): void;
 }
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/hook/useAnimatedSensor.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/useAnimatedSensor.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/hook/useAnimatedSensor.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/useAnimatedSensor.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/hook/useAnimatedStyle.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/useAnimatedStyle.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/hook/useAnimatedStyle.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/useAnimatedStyle.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/hook/useDerivedValue.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/useDerivedValue.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/hook/useDerivedValue.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/useDerivedValue.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/hook/useSharedValue.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/useSharedValue.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/hook/useSharedValue.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/useSharedValue.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/hook/utils.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/utils.d.ts
similarity index 90%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/hook/utils.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/utils.d.ts
index dc4a294..0524008 100644
--- a/node_modules/react-native-reanimated/lib/types/reanimated2/hook/utils.d.ts
+++ b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/hook/utils.d.ts
@@ -1,7 +1,7 @@
 import { MutableRefObject } from 'react';
-import { AnimatedStyle, Context, NativeEvent, NestedObjectValues, StyleProps, WorkletFunction, AnimationObject } from '../commonTypes';
+import { AnimatedStyle, NativeEvent, NestedObjectValues, StyleProps, WorkletFunction, AnimationObject } from '../commonTypes';
 import WorkletEventHandler from '../WorkletEventHandler';
-import { DependencyList } from './commonTypes';
+import { Context, DependencyList } from './commonTypes';
 interface Handler<T, TContext extends Context> extends WorkletFunction {
     (event: T, context: TContext): void;
 }
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/index.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/index.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/index.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/index.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/interpolateColor.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/interpolateColor.d.ts
similarity index 90%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/interpolateColor.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/interpolateColor.d.ts
index 05fa0fb..a638bdb 100644
--- a/node_modules/react-native-reanimated/lib/types/reanimated2/interpolateColor.d.ts
+++ b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/interpolateColor.d.ts
@@ -1,9 +1,4 @@
 import { SharedValue } from './commonTypes';
-export declare const Extrapolate: {
-    EXTEND: string;
-    CLAMP: string;
-    IDENTITY: string;
-};
 interface InterpolateRGB {
     r: number[];
     g: number[];
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/interpolation.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/interpolation.d.ts
similarity index 61%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/interpolation.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/interpolation.d.ts
index 4133280..b9088aa 100644
--- a/node_modules/react-native-reanimated/lib/types/reanimated2/interpolation.d.ts
+++ b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/interpolation.d.ts
@@ -3,9 +3,12 @@ export declare enum Extrapolation {
     CLAMP = "clamp",
     EXTEND = "extend"
 }
+export interface InterpolatedNode {
+    __nodeId: number;
+}
 export interface ExtrapolationConfig {
     extrapolateLeft?: Extrapolation | string;
     extrapolateRight?: Extrapolation | string;
 }
 export declare type ExtrapolationType = ExtrapolationConfig | Extrapolation | string | undefined;
-export declare function interpolate(x: number, input: readonly number[], output: readonly number[], type?: ExtrapolationType): number;
+export declare function interpolate(x: number | InterpolatedNode, input: readonly number[], output: readonly number[], type?: ExtrapolationType): number;
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/jestUtils.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/jestUtils.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/jestUtils.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/jestUtils.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/js-reanimated/JSReanimated.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/js-reanimated/JSReanimated.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/js-reanimated/JSReanimated.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/js-reanimated/JSReanimated.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/js-reanimated/Mapper.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/js-reanimated/Mapper.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/js-reanimated/Mapper.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/js-reanimated/Mapper.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/js-reanimated/MapperRegistry.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/js-reanimated/MapperRegistry.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/js-reanimated/MapperRegistry.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/js-reanimated/MapperRegistry.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/js-reanimated/MutableValue.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/js-reanimated/MutableValue.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/js-reanimated/MutableValue.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/js-reanimated/MutableValue.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/js-reanimated/commonTypes.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/js-reanimated/commonTypes.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/js-reanimated/commonTypes.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/js-reanimated/commonTypes.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/js-reanimated/index.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/js-reanimated/index.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/js-reanimated/index.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/js-reanimated/index.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/LayoutAnimationRepository.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/LayoutAnimationRepository.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/LayoutAnimationRepository.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/LayoutAnimationRepository.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/animationBuilder/BaseAnimationBuilder.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/animationBuilder/BaseAnimationBuilder.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/animationBuilder/BaseAnimationBuilder.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/animationBuilder/BaseAnimationBuilder.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/animationBuilder/ComplexAnimationBuilder.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/animationBuilder/ComplexAnimationBuilder.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/animationBuilder/ComplexAnimationBuilder.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/animationBuilder/ComplexAnimationBuilder.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/animationBuilder/Keyframe.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/animationBuilder/Keyframe.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/animationBuilder/Keyframe.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/animationBuilder/Keyframe.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/animationBuilder/commonTypes.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/animationBuilder/commonTypes.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/animationBuilder/commonTypes.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/animationBuilder/commonTypes.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/animationBuilder/index.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/animationBuilder/index.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/animationBuilder/index.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/animationBuilder/index.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/Bounce.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/Bounce.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/Bounce.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/Bounce.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/Default.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/Default.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/Default.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/Default.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/Fade.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/Fade.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/Fade.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/Fade.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/Flip.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/Flip.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/Flip.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/Flip.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/Lightspeed.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/Lightspeed.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/Lightspeed.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/Lightspeed.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/Pinwheel.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/Pinwheel.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/Pinwheel.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/Pinwheel.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/Roll.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/Roll.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/Roll.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/Roll.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/Rotate.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/Rotate.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/Rotate.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/Rotate.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/Slide.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/Slide.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/Slide.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/Slide.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/Stretch.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/Stretch.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/Stretch.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/Stretch.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/Zoom.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/Zoom.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/Zoom.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/Zoom.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/index.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/index.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultAnimations/index.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultAnimations/index.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultTransitions/CurvedTransition.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultTransitions/CurvedTransition.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultTransitions/CurvedTransition.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultTransitions/CurvedTransition.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultTransitions/EntryExitTransition.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultTransitions/EntryExitTransition.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultTransitions/EntryExitTransition.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultTransitions/EntryExitTransition.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultTransitions/FadingTransition.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultTransitions/FadingTransition.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultTransitions/FadingTransition.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultTransitions/FadingTransition.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultTransitions/JumpingTransition.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultTransitions/JumpingTransition.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultTransitions/JumpingTransition.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultTransitions/JumpingTransition.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultTransitions/LinearTransition.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultTransitions/LinearTransition.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultTransitions/LinearTransition.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultTransitions/LinearTransition.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultTransitions/SequencedTransition.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultTransitions/SequencedTransition.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultTransitions/SequencedTransition.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultTransitions/SequencedTransition.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultTransitions/index.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultTransitions/index.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/defaultTransitions/index.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/defaultTransitions/index.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/index.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/index.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/layoutReanimation/index.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/layoutReanimation/index.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/mock.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/mock.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/mock.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/mock.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/platform-specific/RNRenderer.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/platform-specific/RNRenderer.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/platform-specific/RNRenderer.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/platform-specific/RNRenderer.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/platform-specific/RNRenderer.web.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/platform-specific/RNRenderer.web.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/platform-specific/RNRenderer.web.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/platform-specific/RNRenderer.web.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/utils.d.ts b/node_modules/react-native-reanimated/lib/types/lib/reanimated2/utils.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/reanimated2/utils.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/reanimated2/utils.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/setAndForwardRef.d.ts b/node_modules/react-native-reanimated/lib/types/lib/setAndForwardRef.d.ts
similarity index 100%
rename from node_modules/react-native-reanimated/lib/types/setAndForwardRef.d.ts
rename to node_modules/react-native-reanimated/lib/types/lib/setAndForwardRef.d.ts
diff --git a/node_modules/react-native-reanimated/lib/types/react-native-reanimated-tests.d.ts b/node_modules/react-native-reanimated/lib/types/react-native-reanimated-tests.d.ts
new file mode 100644
index 0000000..cb0ff5c
--- /dev/null
+++ b/node_modules/react-native-reanimated/lib/types/react-native-reanimated-tests.d.ts
@@ -0,0 +1 @@
+export {};
diff --git a/node_modules/react-native-reanimated/lib/types/reanimated2/fabricUtils.d.ts b/node_modules/react-native-reanimated/lib/types/reanimated2/fabricUtils.d.ts
deleted file mode 100644
index 3d41bf5..0000000
--- a/node_modules/react-native-reanimated/lib/types/reanimated2/fabricUtils.d.ts
+++ /dev/null
@@ -1,4 +0,0 @@
-/// <reference types="react" />
-import { ShadowNodeWrapper } from './commonTypes';
-export declare function getShadowNodeWrapperFromHostInstance(hostInstance: unknown): ShadowNodeWrapper;
-export declare function getShadowNodeWrapperFromRef(ref: React.Component): ShadowNodeWrapper;
