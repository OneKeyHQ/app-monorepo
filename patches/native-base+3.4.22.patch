diff --git a/node_modules/native-base/lib/typescript/components/primitives/Text/index.d.ts b/node_modules/native-base/lib/typescript/components/primitives/Text/index.d.ts
index fa55d67..e26136e 100644
--- a/node_modules/native-base/lib/typescript/components/primitives/Text/index.d.ts
+++ b/node_modules/native-base/lib/typescript/components/primitives/Text/index.d.ts
@@ -4,6 +4,9 @@ declare const _default: React.MemoExoticComponent<React.ForwardRefExoticComponen
     variant?: unknown;
     size?: unknown;
     colorScheme?: import("../../types").ColorSchemeType;
+    wordBreak?: unknown;
+    overflowWrap?: unknown;
+    whiteSpace?: unknown;
 } & React.RefAttributes<unknown>>>;
 export default _default;
 export type { ITextProps };
diff --git a/node_modules/native-base/lib/typescript/components/primitives/TextArea/index.d.ts b/node_modules/native-base/lib/typescript/components/primitives/TextArea/index.d.ts
index 31d2145..5a6c486 100644
--- a/node_modules/native-base/lib/typescript/components/primitives/TextArea/index.d.ts
+++ b/node_modules/native-base/lib/typescript/components/primitives/TextArea/index.d.ts
@@ -7,5 +7,5 @@ export interface ITextAreaProps extends Omit<InterfaceInputProps, '_web' | '_and
      */
     totalLines?: number;
 }
-declare const _default: React.MemoExoticComponent<React.ForwardRefExoticComponent<Pick<ITextAreaProps, "value" | "p" | "style" | "margin" | "m" | "marginTop" | "mt" | "marginRight" | "mr" | "marginBottom" | "mb" | "marginLeft" | "ml" | "marginX" | "mx" | "marginY" | "my" | "padding" | "paddingTop" | "pt" | "paddingRight" | "pr" | "paddingBottom" | "pb" | "paddingLeft" | "pl" | "paddingX" | "px" | "paddingY" | "py" | "borderWidth" | "borderStyle" | "borderColor" | "borderRadius" | "borderTopWidth" | "borderTopStyle" | "borderTopColor" | "borderTopLeftRadius" | "borderTopRightRadius" | "borderRightWidth" | "borderRightStyle" | "borderRightColor" | "borderBottomWidth" | "borderBottomStyle" | "borderBottomColor" | "borderBottomLeftRadius" | "borderBottomRightRadius" | "borderLeftWidth" | "borderLeftStyle" | "borderLeftColor" | "borderX" | "borderY" | "rounded" | "width" | "w" | "height" | "h" | "display" | "minWidth" | "minW" | "minH" | "minHeight" | "maxWidth" | "maxW" | "maxHeight" | "maxH" | "size" | "overflow" | "overflowX" | "overflowY" | "alignItems" | "alignContent" | "justifyItems" | "justifyContent" | "flexWrap" | "flexDirection" | "flex" | "flexGrow" | "flexShrink" | "flexBasis" | "alignSelf" | "position" | "zIndex" | "top" | "right" | "bottom" | "left" | "outlineColor" | "outlineStyle" | "bg" | "backgroundColor" | "bgColor" | "isDisabled" | "opacity" | "fontWeight" | "shadow" | "color" | "tintColor" | "textDecorationColor" | "fontFamily" | "fontSize" | "lineHeight" | "letterSpacing" | "textDecorationLine" | "fontStyle" | "pointerEvents" | "textAlign" | "textTransform" | "background" | "textDecoration" | "testID" | "textAlignVertical" | "txtDecor" | "borderTopRadius" | "borderLeftRadius" | "borderRightRadius" | "roundedTopLeft" | "roundedTopRight" | "roundedBottomLeft" | "roundedBottomRight" | "roundedTop" | "borderBottomRadius" | "roundedBottom" | "roundedLeft" | "roundedRight" | "flexDir" | "boxSize" | "_web" | "_ios" | "_android" | "_light" | "_dark" | "_important" | "defaultValue" | "onChange" | "isReadOnly" | "isInvalid" | "isFocused" | "isHovered" | "variant" | "allowFontScaling" | "numberOfLines" | "onLayout" | "nativeID" | "maxFontSizeMultiplier" | "selectionColor" | "textBreakStrategy" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "_hover" | "_readOnly" | "_invalid" | "_focus" | "_disabled" | "hitSlop" | "removeClippedSubviews" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "autoCapitalize" | "autoCorrect" | "autoFocus" | "blurOnSubmit" | "caretHidden" | "contextMenuHidden" | "editable" | "keyboardType" | "maxLength" | "multiline" | "onBlur" | "onChangeText" | "onContentSizeChange" | "onEndEditing" | "onFocus" | "onSelectionChange" | "onSubmitEditing" | "onTextInput" | "onScroll" | "onKeyPress" | "placeholder" | "placeholderTextColor" | "returnKeyType" | "secureTextEntry" | "selectTextOnFocus" | "selection" | "inputAccessoryViewID" | "clearButtonMode" | "clearTextOnFocus" | "dataDetectorTypes" | "enablesReturnKeyAutomatically" | "keyboardAppearance" | "passwordRules" | "rejectResponderTermination" | "selectionState" | "spellCheck" | "textContentType" | "scrollEnabled" | "autoCompleteType" | "importantForAutofill" | "disableFullscreenUI" | "inlineImageLeft" | "inlineImagePadding" | "returnKeyLabel" | "underlineColorAndroid" | "showSoftInputOnFocus" | "isRequired" | "isFullWidth" | "InputLeftElement" | "leftElement" | "InputRightElement" | "rightElement" | "type" | "wrapperRef" | "_input" | "_stack" | "focusOutlineColor" | "invalidOutlineColor" | "totalLines"> & React.RefAttributes<unknown>>>;
+declare const _default: React.MemoExoticComponent<React.ForwardRefExoticComponent<Pick<ITextAreaProps, "value" | "p" | "style" | "margin" | "m" | "marginTop" | "mt" | "marginRight" | "mr" | "marginBottom" | "mb" | "marginLeft" | "ml" | "marginX" | "mx" | "marginY" | "my" | "padding" | "paddingTop" | "pt" | "paddingRight" | "pr" | "paddingBottom" | "pb" | "paddingLeft" | "pl" | "paddingX" | "px" | "paddingY" | "py" | "borderWidth" | "borderStyle" | "borderColor" | "borderRadius" | "borderTopWidth" | "borderTopStyle" | "borderTopColor" | "borderTopLeftRadius" | "borderTopRightRadius" | "borderRightWidth" | "borderRightStyle" | "borderRightColor" | "borderBottomWidth" | "borderBottomStyle" | "borderBottomColor" | "borderBottomLeftRadius" | "borderBottomRightRadius" | "borderLeftWidth" | "borderLeftStyle" | "borderLeftColor" | "borderX" | "borderY" | "rounded" | "width" | "w" | "height" | "h" | "display" | "minWidth" | "minW" | "minH" | "minHeight" | "maxWidth" | "maxW" | "maxHeight" | "maxH" | "size" | "overflow" | "overflowX" | "overflowY" | "alignItems" | "alignContent" | "justifyItems" | "justifyContent" | "flexWrap" | "flexDirection" | "flex" | "flexGrow" | "flexShrink" | "flexBasis" | "alignSelf" | "position" | "zIndex" | "top" | "right" | "bottom" | "left" | "outlineColor" | "outlineStyle" | "bg" | "backgroundColor" | "bgColor" | "isDisabled" | "opacity" | "fontWeight" | "shadow" | "color" | "tintColor" | "textDecorationColor" | "fontFamily" | "fontSize" | "lineHeight" | "letterSpacing" | "textDecorationLine" | "fontStyle" | "pointerEvents" | "textAlign" | "textTransform" | "background" | "textDecoration" | "testID" | "textAlignVertical" | "txtDecor" | "borderTopRadius" | "borderLeftRadius" | "borderRightRadius" | "roundedTopLeft" | "roundedTopRight" | "roundedBottomLeft" | "roundedBottomRight" | "roundedTop" | "borderBottomRadius" | "roundedBottom" | "roundedLeft" | "roundedRight" | "flexDir" | "boxSize" | "_web" | "_ios" | "_android" | "_light" | "_dark" | "_important" | "defaultValue" | "onChange" | "isReadOnly" | "isInvalid" | "isFocused" | "isHovered" | "variant" | "allowFontScaling" | "numberOfLines" | "onLayout" | "nativeID" | "maxFontSizeMultiplier" | "selectionColor" | "textBreakStrategy" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "_hover" | "_readOnly" | "_invalid" | "_focus" | "_disabled" | "hitSlop" | "removeClippedSubviews" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "autoCapitalize" | "autoCorrect" | "autoFocus" | "blurOnSubmit" | "caretHidden" | "contextMenuHidden" | "editable" | "keyboardType" | "maxLength" | "multiline" | "onBlur" | "onChangeText" | "onContentSizeChange" | "onEndEditing" | "onFocus" | "onSelectionChange" | "onSubmitEditing" | "onTextInput" | "onScroll" | "onKeyPress" | "placeholder" | "placeholderTextColor" | "returnKeyType" | "secureTextEntry" | "selectTextOnFocus" | "selection" | "inputAccessoryViewID" | "clearButtonMode" | "clearTextOnFocus" | "dataDetectorTypes" | "enablesReturnKeyAutomatically" | "keyboardAppearance" | "passwordRules" | "rejectResponderTermination" | "selectionState" | "spellCheck" | "textContentType" | "scrollEnabled" | "importantForAutofill" | "disableFullscreenUI" | "inlineImageLeft" | "inlineImagePadding" | "returnKeyLabel" | "underlineColorAndroid" | "showSoftInputOnFocus" | "isRequired" | "isFullWidth" | "InputLeftElement" | "leftElement" | "InputRightElement" | "rightElement" | "type" | "wrapperRef" | "_input" | "_stack" | "focusOutlineColor" | "invalidOutlineColor" | "totalLines"> & React.RefAttributes<unknown>>>;
 export default _default;
diff --git a/node_modules/native-base/src/components/composites/Menu/MenuItem.tsx b/node_modules/native-base/src/components/composites/Menu/MenuItem.tsx
index 875bb0d..759c35a 100644
--- a/node_modules/native-base/src/components/composites/Menu/MenuItem.tsx
+++ b/node_modules/native-base/src/components/composites/Menu/MenuItem.tsx
@@ -55,7 +55,12 @@ const MenuItem = (
       }}
       onPress={(e: any) => {
         if (!isDisabled) {
-          onPress && onPress(e);
+          if (onPress) {
+            // @ts-ignore do not close menu if it returns false
+            if (onPress(e) === false) {
+              return;
+            }
+          }
           if (closeOnSelect) {
             onClose && onClose();
           }
diff --git a/node_modules/native-base/src/components/composites/Tooltip/Tooltip.tsx b/node_modules/native-base/src/components/composites/Tooltip/Tooltip.tsx
index 46b735e..91de4e4 100644
--- a/node_modules/native-base/src/components/composites/Tooltip/Tooltip.tsx
+++ b/node_modules/native-base/src/components/composites/Tooltip/Tooltip.tsx
@@ -1,4 +1,4 @@
-import { OverlayContainer } from '@react-native-aria/overlays';
+import { OverlayContainer } from '@onekeyhq/components';
 import React from 'react';
 import { useControllableState, useKeyboardDismissable } from '../../../hooks';
 import { Popper } from '../Popper';
@@ -120,6 +120,7 @@ export const Tooltip = ({
     'ref': mergeRefs([newChildren.ref, targetRef]),
 
     'aria-describedby': isOpen ? tooltipID : undefined,
+    'collapsable': false,
   });
 
   useKeyboardDismissable({
@@ -134,7 +135,7 @@ export const Tooltip = ({
     <>
       {newChildren}
       {isOpen && (
-        <OverlayContainer>
+        <OverlayContainer useFullWindowForIOS>
           <PresenceTransition
             initial={{ opacity: 0 }}
             animate={{ opacity: 1, transition: { duration: 150 } }}
diff --git a/node_modules/native-base/src/components/primitives/Image/index.native.tsx b/node_modules/native-base/src/components/primitives/Image/index.native.tsx
new file mode 100644
index 0000000..1782152
--- /dev/null
+++ b/node_modules/native-base/src/components/primitives/Image/index.native.tsx
@@ -0,0 +1,100 @@
+import { useState, memo, forwardRef, useCallback, useRef, useEffect, isValidElement } from 'react';
+import RNImage from 'react-native-fast-image';
+import Text from '../Text';
+import { usePropsResolution } from '../../../hooks/useThemeProps';
+import type { IImageProps } from './types';
+import { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';
+import { makeStyledComponent } from '../../../utils/styled';
+
+const StyledImage = makeStyledComponent(RNImage);
+
+const Image = memo(
+  forwardRef((props: IImageProps, ref: any) => {
+    const {
+      source,
+      src,
+      fallbackElement,
+      alt,
+      fallbackSource,
+      ignoreFallback,
+      _alt,
+      ...resolvedProps
+    } = usePropsResolution('Image', props);
+
+    const finalSource: any = useRef(null);
+    const getSource = useCallback(() => {
+      if (source) {
+        finalSource.current = source;
+      } else if (src) {
+        finalSource.current = { uri: src };
+      }
+      return finalSource.current;
+      // eslint-disable-next-line react-hooks/exhaustive-deps
+    }, [source?.uri, src]);
+
+    const [renderedSource, setSource] = useState(getSource());
+    const [alternate, setAlternate] = useState(false);
+    const [fallbackSourceFlag, setfallbackSourceFlag] = useState(true);
+
+    useEffect(() => {
+      setSource(getSource());
+      return () => {
+        finalSource.current = null;
+      };
+    }, [source?.uri, src, getSource]);
+
+    const onImageLoadError = useCallback(
+      (event: any) => {
+        props.onError && props.onError(event);
+        console.warn(event.nativeEvent.error);
+        if (
+          !ignoreFallback &&
+          fallbackSource &&
+          fallbackSource !== renderedSource &&
+          fallbackSourceFlag
+        ) {
+          setfallbackSourceFlag(false);
+          setSource(fallbackSource);
+        } else {
+          setAlternate(true);
+        }
+      },
+      [
+        fallbackSource,
+        fallbackSourceFlag,
+        ignoreFallback,
+        props,
+        renderedSource,
+      ]
+    );
+    //TODO: refactor for responsive prop
+    if (useHasResponsiveProps(props)) {
+      return null;
+    }
+
+    if (typeof alt !== 'string') {
+      console.warn('Please pass alt prop to Image component');
+    }
+
+    if (alternate) {
+      if (fallbackElement) {
+        if (isValidElement(fallbackElement)) {
+          return fallbackElement;
+        }
+      } else return <Text {..._alt}>{alt}</Text>;
+    }
+    return (
+      <StyledImage
+        source={renderedSource}
+        accessibilityLabel={alt}
+        alt={alt}
+        {...resolvedProps}
+        onError={onImageLoadError}
+        ref={ref}
+      />
+    );
+  })
+);
+
+export default Image;
+export type { IImageProps };
diff --git a/node_modules/native-base/src/components/primitives/Overlay/Overlay.tsx b/node_modules/native-base/src/components/primitives/Overlay/Overlay.tsx
index 5693616..1f8e2be 100644
--- a/node_modules/native-base/src/components/primitives/Overlay/Overlay.tsx
+++ b/node_modules/native-base/src/components/primitives/Overlay/Overlay.tsx
@@ -1,5 +1,5 @@
 /* eslint-disable @typescript-eslint/no-unused-vars */
-import { OverlayContainer } from '@react-native-aria/overlays';
+import { OverlayContainer as RootOverlayContainer } from '@onekeyhq/components';
 import React from 'react';
 import type { ViewStyle } from 'react-native';
 import { Modal, Platform } from 'react-native';
@@ -28,7 +28,6 @@ export function Overlay({
   //@ts-ignore
   animationPreset = 'fade',
   onRequestClose,
-  style,
   unmountOnExit,
 }: IOverlayProps) {
   const [exited, setExited] = React.useState(!isOpen);
@@ -37,13 +36,6 @@ export function Overlay({
     enabled: isOpen && isKeyboardDismissable,
     callback: onRequestClose ? onRequestClose : () => {},
   });
-  const styleObj = { ...style };
-  if (animationPreset === 'slide') {
-    styleObj.overflow = 'hidden';
-    styleObj.display = 'flex';
-  } else {
-    styleObj.display = exited && !isOpen ? 'none' : 'flex';
-  }
 
   if (unmountOnExit && !isOpen && exited) {
     return null;
@@ -70,11 +62,10 @@ export function Overlay({
   }
 
   return (
-    //@ts-ignore
-    <OverlayContainer style={{ ...styleObj }}>
-      <ExitAnimationContext.Provider value={{ exited, setExited }}>
+    <ExitAnimationContext.Provider value={{ exited, setExited }}>
+      <RootOverlayContainer>
         {children}
-      </ExitAnimationContext.Provider>
-    </OverlayContainer>
+      </RootOverlayContainer>
+    </ExitAnimationContext.Provider>
   );
 }
