diff --git a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncLocalStorageUtil.java b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncLocalStorageUtil.java
index 689901f..f6716d6 100644
--- a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncLocalStorageUtil.java
+++ b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncLocalStorageUtil.java
@@ -10,6 +10,7 @@ package com.reactnativecommunity.asyncstorage;
 import javax.annotation.Nullable;
 import java.io.File;
 import java.util.Arrays;
+import java.util.ArrayList;
 import java.util.Iterator;
 import android.content.ContentValues;
 import android.content.Context;
@@ -54,6 +55,14 @@ public class AsyncLocalStorageUtil {
     return selectionArgs;
   }
 
+   /* package */ static String[] buildKeySelectionArgs(ArrayList<String> keys, int start, int count) {
+    String[] selectionArgs = new String[count];
+    for (int keyIndex = 0; keyIndex < count; keyIndex++) {
+      selectionArgs[keyIndex] = keys.get(start + keyIndex);
+    }
+    return selectionArgs;
+  }
+
   /**
    * Returns the value of the given key, or null if not found.
    */
diff --git a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageModule.java b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageModule.java
index 906008e..1f7d843 100644
--- a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageModule.java
+++ b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageModule.java
@@ -28,6 +28,7 @@ import com.facebook.react.module.annotations.ReactModule;
 import com.facebook.react.modules.common.ModuleDataCleaner;
 
 import java.util.ArrayDeque;
+import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.concurrent.Executor;
 import java.util.concurrent.Executors;
@@ -105,6 +106,69 @@ public final class AsyncStorageModule
     mReactDatabaseSupplier.closeDatabase();
   }
 
+  @ReactMethod(isBlockingSynchronousMethod = true)
+  public String getValueForKey(final String key) {
+    if (key == null) {
+      return "";
+    }
+    String result = null;
+    if (!ensureDatabase()) {
+      return "";
+    }
+    
+    ArrayList<String> keys = new ArrayList<String>();
+    keys.add(key);
+    
+    String[] columns = {ReactDatabaseSupplier.KEY_COLUMN, ReactDatabaseSupplier.VALUE_COLUMN};
+    HashSet<String> keysRemaining = new HashSet<>();
+    WritableArray data = Arguments.createArray();
+    for (int keyStart = 0; keyStart < keys.size(); keyStart += MAX_SQL_KEYS) {
+      int keyCount = Math.min(keys.size() - keyStart, MAX_SQL_KEYS);
+      Cursor cursor = mReactDatabaseSupplier.get().query(
+          ReactDatabaseSupplier.TABLE_CATALYST,
+          columns,
+          AsyncLocalStorageUtil.buildKeySelection(keyCount),
+          AsyncLocalStorageUtil.buildKeySelectionArgs(keys, keyStart, keyCount),
+          null,
+          null,
+          null);
+      keysRemaining.clear();
+      try {
+        if (cursor.getCount() != keys.size()) {
+          // some keys have not been found - insert them with null into the final array
+          for (int keyIndex = keyStart; keyIndex < keyStart + keyCount; keyIndex++) {
+            keysRemaining.add(keys.get(keyIndex));
+          }
+        }
+
+        if (cursor.moveToFirst()) {
+          do {
+            WritableArray row = Arguments.createArray();
+            row.pushString(cursor.getString(0));
+            row.pushString(cursor.getString(1));
+            result = cursor.getString(1);
+            data.pushArray(row);
+            keysRemaining.remove(cursor.getString(0));
+          } while (cursor.moveToNext());
+        }
+      } catch (Exception e) {
+        FLog.w(ReactConstants.TAG, e.getMessage(), e);
+        return "";
+      } finally {
+        cursor.close();
+      }
+
+      for (String newKey : keysRemaining) {
+        WritableArray row = Arguments.createArray();
+        row.pushString(newKey);
+        row.pushNull();
+        data.pushArray(row);
+      }
+      keysRemaining.clear();
+    }
+    return result;
+  }
+
   /**
    * Given an array of keys, this returns a map of (key, value) pairs for the keys found, and
    * (key, null) for the keys that haven't been found.
diff --git a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/next/StorageModule.kt b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/next/StorageModule.kt
index ade1316..12554b9 100644
--- a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/next/StorageModule.kt
+++ b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/next/StorageModule.kt
@@ -36,6 +36,15 @@ class StorageModule(reactContext: ReactContext) : ReactContextBaseJavaModule(),
         }
     }
 
+    @ReactMethod(isBlockingSynchronousMethod = true)
+    fun getValueForKey(key: String): String {
+        var entries = storage.getValue(key)
+        if (entries.size > 0) {
+            return entries[0].value ?: ""
+        }
+        return ""
+    }
+
     @ReactMethod
     fun multiGet(keys: ReadableArray, cb: Callback) {
         launch(createExceptionHandler(cb)) {
diff --git a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/next/StorageSupplier.kt b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/next/StorageSupplier.kt
index c05f018..8613ac4 100644
--- a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/next/StorageSupplier.kt
+++ b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/next/StorageSupplier.kt
@@ -32,6 +32,9 @@ data class Entry(
 
 @Dao
 internal interface StorageDao {
+    @Transaction
+    @Query("SELECT * FROM $TABLE_NAME WHERE `$COLUMN_KEY` = (:key)")
+    fun getValue(key: String): List<Entry>
 
     @Transaction
     @Query("SELECT * FROM $TABLE_NAME WHERE `$COLUMN_KEY` IN (:keys)")
@@ -135,6 +138,7 @@ internal abstract class StorageDb : RoomDatabase() {
 }
 
 interface AsyncStorageAccess {
+    fun getValue(key: String): List<Entry>
     suspend fun getValues(keys: List<String>): List<Entry>
     suspend fun setValues(entries: List<Entry>)
     suspend fun removeValues(keys: List<String>)
@@ -152,6 +156,7 @@ class StorageSupplier internal constructor(db: StorageDb) : AsyncStorageAccess {
 
     private val access = db.storage()
 
+    override fun getValue(key: String) = access.getValue(key)
     override suspend fun getValues(keys: List<String>) = access.getValues(keys)
     override suspend fun setValues(entries: List<Entry>) = access.setValues(entries)
     override suspend fun removeValues(keys: List<String>) = access.removeValues(keys)
diff --git a/node_modules/@react-native-async-storage/async-storage/ios/RNCAsyncStorage.m b/node_modules/@react-native-async-storage/async-storage/ios/RNCAsyncStorage.m
index 75c8747..e986dab 100644
--- a/node_modules/@react-native-async-storage/async-storage/ios/RNCAsyncStorage.m
+++ b/node_modules/@react-native-async-storage/async-storage/ios/RNCAsyncStorage.m
@@ -657,46 +657,36 @@ - (void)_multiGet:(NSArray<NSString *> *)keys
     callback(@[RCTNullIfNil(errors), result]);
 }
 
-- (BOOL)_passthroughDelegate
+#pragma mark - Exported JS Functions
+// clang-format off
+RCT_EXPORT_BLOCKING_SYNCHRONOUS_METHOD(getValueForKey:(NSString *)key)
+// clang-format on
 {
-    return
-        [self.delegate respondsToSelector:@selector(isPassthrough)] && self.delegate.isPassthrough;
+    NSString *value =
+        _manifest[key];  // nil means missing, null means there may be a data file, else: NSString
+    if (value == (id)kCFNull) {
+        value = [RCTGetCache() objectForKey:key];
+        if (!value) {
+            NSString *filePath = [self _filePathForKey:key];
+            value = RCTReadFile(filePath, key, nil);
+            if (value) {
+                [RCTGetCache() setObject:value forKey:key cost:value.length];
+            } else {
+                // file does not exist after all, so remove from manifest (no need to save
+                // manifest immediately though, as cost of checking again next time is negligible)
+                [_manifest removeObjectForKey:key];
+            }
+        }
+    }
+    return value;
 }
 
-#pragma mark - Exported JS Functions
 
 // clang-format off
 RCT_EXPORT_METHOD(multiGet:(NSArray<NSString *> *)keys
                   callback:(RCTResponseSenderBlock)callback)
 // clang-format on
 {
-    if (self.delegate != nil) {
-        [self.delegate
-            valuesForKeys:keys
-               completion:^(NSArray<id<NSObject>> *valuesOrErrors) {
-                 [self _multiGet:keys
-                        callback:callback
-                          getter:^NSString *(NSUInteger i, NSString *key, NSDictionary **errorOut) {
-                            id valueOrError = valuesOrErrors[i];
-                            if ([valueOrError isKindOfClass:[NSError class]]) {
-                                NSError *error = (NSError *)valueOrError;
-                                NSDictionary *extraData = @{@"key": RCTNullIfNil(key)};
-                                *errorOut =
-                                    RCTMakeError(error.localizedDescription, error, extraData);
-                                return nil;
-                            } else {
-                                return [valueOrError isKindOfClass:[NSString class]]
-                                           ? (NSString *)valueOrError
-                                           : nil;
-                            }
-                          }];
-               }];
-
-        if (![self _passthroughDelegate]) {
-            return;
-        }
-    }
-
     NSDictionary *errorOut = [self _ensureSetup];
     if (errorOut) {
         callback(@[@[errorOut], (id)kCFNull]);
@@ -714,25 +704,6 @@ - (BOOL)_passthroughDelegate
                   callback:(RCTResponseSenderBlock)callback)
 // clang-format on
 {
-    if (self.delegate != nil) {
-        NSMutableArray<NSString *> *keys = [NSMutableArray arrayWithCapacity:kvPairs.count];
-        NSMutableArray<NSString *> *values = [NSMutableArray arrayWithCapacity:kvPairs.count];
-        for (NSArray<NSString *> *entry in kvPairs) {
-            [keys addObject:entry[0]];
-            [values addObject:entry[1]];
-        }
-        [self.delegate setValues:values
-                         forKeys:keys
-                      completion:^(NSArray<id<NSObject>> *results) {
-                        NSArray<NSDictionary *> *errors = RCTMakeErrors(results);
-                        callback(@[RCTNullIfNil(errors)]);
-                      }];
-
-        if (![self _passthroughDelegate]) {
-            return;
-        }
-    }
-
     NSDictionary *errorOut = [self _ensureSetup];
     if (errorOut) {
         callback(@[@[errorOut]]);
@@ -755,25 +726,6 @@ - (BOOL)_passthroughDelegate
                     callback:(RCTResponseSenderBlock)callback)
 // clang-format on
 {
-    if (self.delegate != nil) {
-        NSMutableArray<NSString *> *keys = [NSMutableArray arrayWithCapacity:kvPairs.count];
-        NSMutableArray<NSString *> *values = [NSMutableArray arrayWithCapacity:kvPairs.count];
-        for (NSArray<NSString *> *entry in kvPairs) {
-            [keys addObject:entry[0]];
-            [values addObject:entry[1]];
-        }
-        [self.delegate mergeValues:values
-                           forKeys:keys
-                        completion:^(NSArray<id<NSObject>> *results) {
-                          NSArray<NSDictionary *> *errors = RCTMakeErrors(results);
-                          callback(@[RCTNullIfNil(errors)]);
-                        }];
-
-        if (![self _passthroughDelegate]) {
-            return;
-        }
-    }
-
     NSDictionary *errorOut = [self _ensureSetup];
     if (errorOut) {
         callback(@[@[errorOut]]);
@@ -812,18 +764,6 @@ - (BOOL)_passthroughDelegate
                      callback:(RCTResponseSenderBlock)callback)
 // clang-format on
 {
-    if (self.delegate != nil) {
-        [self.delegate removeValuesForKeys:keys
-                                completion:^(NSArray<id<NSObject>> *results) {
-                                  NSArray<NSDictionary *> *errors = RCTMakeErrors(results);
-                                  callback(@[RCTNullIfNil(errors)]);
-                                }];
-
-        if (![self _passthroughDelegate]) {
-            return;
-        }
-    }
-
     NSDictionary *errorOut = [self _ensureSetup];
     if (errorOut) {
         callback(@[@[errorOut]]);
@@ -856,17 +796,6 @@ - (BOOL)_passthroughDelegate
 RCT_EXPORT_METHOD(clear:(RCTResponseSenderBlock)callback)
 // clang-format on
 {
-    if (self.delegate != nil) {
-        [self.delegate removeAllValues:^(NSError *error) {
-          NSDictionary *result = nil;
-          if (error != nil) {
-              result = RCTMakeError(error.localizedDescription, error, nil);
-          }
-          callback(@[RCTNullIfNil(result)]);
-        }];
-        return;
-    }
-
     [_manifest removeAllObjects];
     [RCTGetCache() removeAllObjects];
     NSDictionary *error = RCTDeleteStorageDirectory();
@@ -877,16 +806,6 @@ - (BOOL)_passthroughDelegate
 RCT_EXPORT_METHOD(getAllKeys:(RCTResponseSenderBlock)callback)
 // clang-format on
 {
-    if (self.delegate != nil) {
-        [self.delegate allKeys:^(NSArray<id<NSObject>> *keys) {
-          callback(@[(id)kCFNull, keys]);
-        }];
-
-        if (![self _passthroughDelegate]) {
-            return;
-        }
-    }
-
     NSDictionary *errorOut = [self _ensureSetup];
     if (errorOut) {
         callback(@[errorOut, (id)kCFNull]);
