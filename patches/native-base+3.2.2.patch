diff --git a/node_modules/native-base/lib/typescript/components/basic/FlatList/FlatList.d.ts b/node_modules/native-base/lib/typescript/components/basic/FlatList/FlatList.d.ts
index ed000aa..b1ade34 100644
--- a/node_modules/native-base/lib/typescript/components/basic/FlatList/FlatList.d.ts
+++ b/node_modules/native-base/lib/typescript/components/basic/FlatList/FlatList.d.ts
@@ -1,3 +1,2 @@
-import React from 'react';
 import type { IFlatListProps } from './types';
-export declare const FlatList: React.ForwardRefExoticComponent<IFlatListProps & React.RefAttributes<unknown>>;
+export declare const FlatList: <ItemT>(props: IFlatListProps<ItemT>, ref: any) => any;
diff --git a/node_modules/native-base/lib/typescript/components/basic/FlatList/index.d.ts b/node_modules/native-base/lib/typescript/components/basic/FlatList/index.d.ts
index 90a1e9e..51f5901 100644
--- a/node_modules/native-base/lib/typescript/components/basic/FlatList/index.d.ts
+++ b/node_modules/native-base/lib/typescript/components/basic/FlatList/index.d.ts
@@ -1 +1,2 @@
 export { FlatList } from './FlatList';
+export type { IFlatListProps } from './types';
diff --git a/node_modules/native-base/lib/typescript/components/basic/FlatList/types.d.ts b/node_modules/native-base/lib/typescript/components/basic/FlatList/types.d.ts
index a3a7289..4f9a789 100644
--- a/node_modules/native-base/lib/typescript/components/basic/FlatList/types.d.ts
+++ b/node_modules/native-base/lib/typescript/components/basic/FlatList/types.d.ts
@@ -1,5 +1,12 @@
 import type { StyledProps } from '../../../theme/types';
 import type { FlatListProps } from 'react-native';
 import type { PlatformProps } from '../../types';
-export interface IFlatListProps extends FlatListProps<any>, StyledProps, PlatformProps<IFlatListProps> {
+import type { MutableRefObject } from 'react';
+export interface InterfaceFlatListProps<ItemT> extends FlatListProps<ItemT>, StyledProps, PlatformProps<IFlatListProps<ItemT>> {
+    /**
+     * pass props to contentContainerStyle, and this also resolved NB tokens.
+     */
+    _contentContainerStyle?: Partial<IFlatListProps<ItemT>>;
+    ref?: MutableRefObject<any>;
 }
+export declare type IFlatListProps<ItemT> = InterfaceFlatListProps<ItemT>;
diff --git a/node_modules/native-base/lib/typescript/components/basic/SectionList/SectionList.d.ts b/node_modules/native-base/lib/typescript/components/basic/SectionList/SectionList.d.ts
index bb9041f..f872de5 100644
--- a/node_modules/native-base/lib/typescript/components/basic/SectionList/SectionList.d.ts
+++ b/node_modules/native-base/lib/typescript/components/basic/SectionList/SectionList.d.ts
@@ -1,3 +1,2 @@
-import React from 'react';
 import type { ISectionListProps } from './types';
-export declare const SectionList: React.ForwardRefExoticComponent<ISectionListProps & React.RefAttributes<unknown>>;
+export declare const SectionList: <ItemT, sectionT>(props: ISectionListProps<ItemT, sectionT>, ref: any) => any;
diff --git a/node_modules/native-base/lib/typescript/components/basic/SectionList/types.d.ts b/node_modules/native-base/lib/typescript/components/basic/SectionList/types.d.ts
index 30aada8..3783b0b 100644
--- a/node_modules/native-base/lib/typescript/components/basic/SectionList/types.d.ts
+++ b/node_modules/native-base/lib/typescript/components/basic/SectionList/types.d.ts
@@ -1,5 +1,12 @@
 import type { StyledProps } from '../../../theme/types';
 import type { SectionListProps } from 'react-native';
 import type { PlatformProps } from '../../types';
-export interface ISectionListProps extends SectionListProps<any, any>, StyledProps, PlatformProps<ISectionListProps> {
+import type { MutableRefObject } from 'react';
+declare type DefaultSectionT = {
+    [key: string]: any;
+};
+export interface InterfaceSectionListProps<ItemT, sectionT = DefaultSectionT> extends SectionListProps<ItemT, sectionT>, StyledProps, PlatformProps<ISectionListProps<ItemT, sectionT>> {
+    ref?: MutableRefObject<any>;
 }
+export declare type ISectionListProps<ItemT, sectionT = DefaultSectionT> = InterfaceSectionListProps<ItemT, sectionT>;
+export {};
diff --git a/node_modules/native-base/src/components/composites/Tooltip/Tooltip.tsx b/node_modules/native-base/src/components/composites/Tooltip/Tooltip.tsx
index df36889..8048bf3 100644
--- a/node_modules/native-base/src/components/composites/Tooltip/Tooltip.tsx
+++ b/node_modules/native-base/src/components/composites/Tooltip/Tooltip.tsx
@@ -1,4 +1,5 @@
-import { OverlayContainer } from '@react-native-aria/overlays';
+
+import { OverlayContainer } from '@onekeyhq/components';
 import React from 'react';
 import { useControllableState, useKeyboardDismissable } from '../../../hooks';
 import { Popper } from '../Popper';
@@ -194,7 +195,7 @@ export const Tooltip = ({
     <>
       {newChildren}
       {isOpen && (
-        <OverlayContainer>
+        <OverlayContainer useFullWindowForIOS>
           <PresenceTransition
             initial={{ opacity: 0 }}
             animate={{ opacity: 1, transition: { duration: 150 } }}
diff --git a/node_modules/native-base/src/components/primitives/Image/index.native.tsx b/node_modules/native-base/src/components/primitives/Image/index.native.tsx
new file mode 100644
index 0000000..a7e47da
--- /dev/null
+++ b/node_modules/native-base/src/components/primitives/Image/index.native.tsx
@@ -0,0 +1,89 @@
+import React, { useState, memo, forwardRef, useCallback, useRef } from 'react';
+import RNImage from 'react-native-fast-image';
+import Text from '../Text';
+import { usePropsResolution } from '../../../hooks/useThemeProps';
+import type { IImageProps } from './types';
+import { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';
+import { makeStyledComponent } from '../../../utils/styled';
+
+const StyledImage = makeStyledComponent(RNImage);
+
+const Image = (props: IImageProps, ref: any) => {
+  const {
+    source,
+    src,
+    fallbackElement,
+    alt,
+    fallbackSource,
+    ignoreFallback,
+    _alt,
+    ...resolvedProps
+  } = usePropsResolution('Image', props);
+
+  const finalSource: any = useRef(null);
+  const getSource = useCallback(() => {
+    if (source) {
+      finalSource.current = source;
+    } else if (src) {
+      finalSource.current = { uri: src };
+    }
+    return finalSource.current;
+  }, [source, src]);
+
+  const [renderedSource, setSource] = useState(getSource());
+  const [alternate, setAlternate] = useState(false);
+  const [fallbackSourceFlag, setfallbackSourceFlag] = useState(true);
+
+  React.useEffect(() => {
+    return () => {
+      finalSource.current = null;
+    };
+  }, [source, src, getSource]);
+
+  const onImageLoadError = useCallback(
+    (event: any) => {
+      props.onError && props.onError(event);
+      console.warn(event.nativeEvent.error);
+      if (
+        !ignoreFallback &&
+        fallbackSource &&
+        fallbackSource !== renderedSource &&
+        fallbackSourceFlag
+      ) {
+        setfallbackSourceFlag(false);
+        setSource(fallbackSource);
+      } else {
+        setAlternate(true);
+      }
+    },
+    [fallbackSource, fallbackSourceFlag, ignoreFallback, props, renderedSource]
+  );
+  //TODO: refactor for responsive prop
+  if (useHasResponsiveProps(props)) {
+    return null;
+  }
+  if (!alt) {
+    console.warn('Please pass alt prop to Image component');
+  }
+
+  if (alternate) {
+    if (fallbackElement) {
+      if (React.isValidElement(fallbackElement)) {
+        return fallbackElement;
+      }
+    } else return <Text {..._alt}>{alt}</Text>;
+  }
+  return (
+    <StyledImage
+      source={renderedSource}
+      accessibilityLabel={alt}
+      alt={alt}
+      {...resolvedProps}
+      onError={onImageLoadError}
+      ref={ref}
+    />
+  );
+};
+
+export default memo(forwardRef(Image));
+export type { IImageProps };
