diff --git a/node_modules/react-native-vision-camera/android/CMakeLists.txt b/node_modules/react-native-vision-camera/android/CMakeLists.txt
index 4a37040..9fa03b5 100644
--- a/node_modules/react-native-vision-camera/android/CMakeLists.txt
+++ b/node_modules/react-native-vision-camera/android/CMakeLists.txt
@@ -68,6 +68,7 @@ target_include_directories(
         "${NODE_MODULES_DIR}/react-native-reanimated/Common/cpp/headers/Registries"
         "${NODE_MODULES_DIR}/react-native-reanimated/Common/cpp/headers/LayoutAnimations"
         "${NODE_MODULES_DIR}/react-native-reanimated/Common/cpp/hidden_headers"
+        "${NODE_MODULES_DIR}/react-native-v8/src"
         "src/main/cpp"
 )
 
@@ -87,16 +88,16 @@ if(${FOR_HERMES})
     # Use Reanimated Hermes
     file (GLOB LIBREANIMATED_DIR "${BUILD_DIR}/react-native-reanimated-*-hermes.aar/jni/${ANDROID_ABI}")
 else()
-    file (GLOB LIBJSC_DIR "${BUILD_DIR}/android-jsc*.aar/jni/${ANDROID_ABI}")
-    # Use JSC
+    file (GLOB LIBV8_DIR "${RN_SO_DIR}/${ANDROID_ABI}")
+    # Use v8
     find_library(
             JS_ENGINE_LIB
-            jscexecutor
-            PATHS ${LIBRN_DIR}
+            v8executor
+            PATHS ${LIBV8_DIR}
             NO_CMAKE_FIND_ROOT_PATH
     )
-    # Use Reanimated JSC
-    file (GLOB LIBREANIMATED_DIR "${BUILD_DIR}/react-native-reanimated-*-jsc.aar/jni/${ANDROID_ABI}")
+    # Use Reanimated v8
+    file (GLOB LIBREANIMATED_DIR "${BUILD_DIR}/react-native-reanimated-*-v8.aar/jni/${ANDROID_ABI}")
 endif()
 
 find_library(
@@ -123,12 +124,12 @@ if(${REACT_NATIVE_VERSION} LESS 66)
         set (JSI_LIB "")
 else()
         # RN 0.66 distributes libjsi.so, can be used instead of compiling jsi.cpp manually.
-        find_library(
-                JSI_LIB
-                jsi
-                PATHS ${LIBRN_DIR}
-                NO_CMAKE_FIND_ROOT_PATH
-        )
+        # find_library(
+        #         JSI_LIB
+        #         jsi
+        #         PATHS ${LIBRN_DIR}
+        #         NO_CMAKE_FIND_ROOT_PATH
+        # )
 endif()
 
 find_library(
@@ -149,8 +150,8 @@ message(WARNING "VisionCamera linking: FOR_HERMES=${FOR_HERMES}")
 target_link_libraries(
         ${PACKAGE_NAME}
         ${LOG_LIB}
-        ${JSI_LIB}
-        ${JS_ENGINE_LIB} # <-- Hermes or JSC
+        # ${JSI_LIB}
+        ${JS_ENGINE_LIB} # <-- Hermes or v8
         ${REANIMATED_LIB}
         ${REACT_NATIVE_JNI_LIB}
         ${FBJNI_LIB}
diff --git a/node_modules/react-native-vision-camera/android/build.gradle b/node_modules/react-native-vision-camera/android/build.gradle
index 725696c..7052941 100644
--- a/node_modules/react-native-vision-camera/android/build.gradle
+++ b/node_modules/react-native-vision-camera/android/build.gradle
@@ -141,6 +141,7 @@ android {
   configurations {
     extractHeaders
     extractJNI
+    extractSO
   }
 }
 
@@ -236,10 +237,11 @@ dependencies {
     def reactNativeVersion = json.version as String
     def (major, minor, patch) = reactNativeVersion.tokenize('.')
 
-    def jsEngine = FOR_HERMES ? "hermes" : "jsc"
-    def reaAAR = "${nodeModules}/react-native-reanimated/android/react-native-reanimated-${minor}-${jsEngine}.aar"
-
+    // def jsEngine = FOR_HERMES ? "hermes" : "jsc"
+    // def reaAAR = "${nodeModules}/react-native-reanimated/android/react-native-reanimated-${minor}-${jsEngine}.aar"
+    def reaAAR = "${rootDir}/../node_modules/react-native-reanimated/android/react-native-reanimated-${minor}-v8.aar"
     extractJNI(files(rnAAR, jscAAR, reaAAR))
+    extractSO(files(rnAAR, jscAAR))
   }
 
   implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
@@ -481,12 +483,29 @@ if (ENABLE_FRAME_PROCESSORS) {
 
   extractJNIFiles.mustRunAfter extractAARHeaders
 
+  task extractSOFiles {
+    doLast {
+      configurations.extractSO.files.each {
+        def file = it.absoluteFile
+        def packageName = file.name.tokenize('-')[0]
+        copy {
+          from zipTree(file)
+          into "$reactNative/ReactAndroid/src/main/jni/first-party/$packageName/"
+          include "jni/**/*.so"
+        }
+      }
+    }
+  }
+
+  extractSOFiles.mustRunAfter extractJNIFiles
+
   // pre-native build pipeline
 
   tasks.whenTaskAdded { task ->
     if (!task.name.contains('Clean') && (task.name.contains('externalNative') || task.name.contains('CMake'))) {
       task.dependsOn(extractAARHeaders)
       task.dependsOn(extractJNIFiles)
+      task.dependsOn(extractSOFiles)
       task.dependsOn(prepareJSC)
       task.dependsOn(prepareHermes)
       task.dependsOn(prepareThirdPartyNdkHeaders)
diff --git a/node_modules/react-native-vision-camera/android/src/main/cpp/MakeJSIRuntime.h b/node_modules/react-native-vision-camera/android/src/main/cpp/MakeJSIRuntime.h
index 39045bd..905f8b4 100644
--- a/node_modules/react-native-vision-camera/android/src/main/cpp/MakeJSIRuntime.h
+++ b/node_modules/react-native-vision-camera/android/src/main/cpp/MakeJSIRuntime.h
@@ -11,8 +11,8 @@
   // Hermes
   #include <hermes/hermes.h>
 #else
-  // JSC
-  #include <jsi/JSCRuntime.h>
+  // v8
+  #include <v8runtime/V8RuntimeFactory.h>
 #endif
 
 namespace vision {
@@ -23,7 +23,7 @@ static std::unique_ptr<jsi::Runtime> makeJSIRuntime() {
   #if FOR_HERMES
   return facebook::hermes::makeHermesRuntime();
   #else
-  return facebook::jsc::makeJSCRuntime();
+  return facebook::createV8Runtime("");
   #endif
 }
 
