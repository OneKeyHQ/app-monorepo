diff --git a/node_modules/native-base/src/components/composites/Tooltip/Tooltip.tsx b/node_modules/native-base/src/components/composites/Tooltip/Tooltip.tsx
index 46b735e..cf495e8 100644
--- a/node_modules/native-base/src/components/composites/Tooltip/Tooltip.tsx
+++ b/node_modules/native-base/src/components/composites/Tooltip/Tooltip.tsx
@@ -1,4 +1,4 @@
-import { OverlayContainer } from '@react-native-aria/overlays';
+import { OverlayContainer } from '@onekeyhq/components';
 import React from 'react';
 import { useControllableState, useKeyboardDismissable } from '../../../hooks';
 import { Popper } from '../Popper';
@@ -134,7 +134,7 @@ export const Tooltip = ({
     <>
       {newChildren}
       {isOpen && (
-        <OverlayContainer>
+        <OverlayContainer useFullWindowForIOS>
           <PresenceTransition
             initial={{ opacity: 0 }}
             animate={{ opacity: 1, transition: { duration: 150 } }}
diff --git a/node_modules/native-base/src/components/primitives/Image/index.native.tsx b/node_modules/native-base/src/components/primitives/Image/index.native.tsx
new file mode 100644
index 0000000..1782152
--- /dev/null
+++ b/node_modules/native-base/src/components/primitives/Image/index.native.tsx
@@ -0,0 +1,100 @@
+import { useState, memo, forwardRef, useCallback, useRef, useEffect, isValidElement } from 'react';
+import RNImage from 'react-native-fast-image';
+import Text from '../Text';
+import { usePropsResolution } from '../../../hooks/useThemeProps';
+import type { IImageProps } from './types';
+import { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';
+import { makeStyledComponent } from '../../../utils/styled';
+
+const StyledImage = makeStyledComponent(RNImage);
+
+const Image = memo(
+  forwardRef((props: IImageProps, ref: any) => {
+    const {
+      source,
+      src,
+      fallbackElement,
+      alt,
+      fallbackSource,
+      ignoreFallback,
+      _alt,
+      ...resolvedProps
+    } = usePropsResolution('Image', props);
+
+    const finalSource: any = useRef(null);
+    const getSource = useCallback(() => {
+      if (source) {
+        finalSource.current = source;
+      } else if (src) {
+        finalSource.current = { uri: src };
+      }
+      return finalSource.current;
+      // eslint-disable-next-line react-hooks/exhaustive-deps
+    }, [source?.uri, src]);
+
+    const [renderedSource, setSource] = useState(getSource());
+    const [alternate, setAlternate] = useState(false);
+    const [fallbackSourceFlag, setfallbackSourceFlag] = useState(true);
+
+    useEffect(() => {
+      setSource(getSource());
+      return () => {
+        finalSource.current = null;
+      };
+    }, [source?.uri, src, getSource]);
+
+    const onImageLoadError = useCallback(
+      (event: any) => {
+        props.onError && props.onError(event);
+        console.warn(event.nativeEvent.error);
+        if (
+          !ignoreFallback &&
+          fallbackSource &&
+          fallbackSource !== renderedSource &&
+          fallbackSourceFlag
+        ) {
+          setfallbackSourceFlag(false);
+          setSource(fallbackSource);
+        } else {
+          setAlternate(true);
+        }
+      },
+      [
+        fallbackSource,
+        fallbackSourceFlag,
+        ignoreFallback,
+        props,
+        renderedSource,
+      ]
+    );
+    //TODO: refactor for responsive prop
+    if (useHasResponsiveProps(props)) {
+      return null;
+    }
+
+    if (typeof alt !== 'string') {
+      console.warn('Please pass alt prop to Image component');
+    }
+
+    if (alternate) {
+      if (fallbackElement) {
+        if (isValidElement(fallbackElement)) {
+          return fallbackElement;
+        }
+      } else return <Text {..._alt}>{alt}</Text>;
+    }
+    return (
+      <StyledImage
+        source={renderedSource}
+        accessibilityLabel={alt}
+        alt={alt}
+        {...resolvedProps}
+        onError={onImageLoadError}
+        ref={ref}
+      />
+    );
+  })
+);
+
+export default Image;
+export type { IImageProps };
