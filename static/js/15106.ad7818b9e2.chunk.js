"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[15106],{415106:(e,r,t)=>{t.r(r),t.d(r,{CID:()=>CID,bytes:()=>o,digest:()=>s,hasher:()=>i,varint:()=>n});var n={};t.r(n),t.d(n,{decode:()=>varint_decode,encodeTo:()=>encodeTo,encodingLength:()=>encodingLength});var o={};t.r(o),t.d(o,{coerce:()=>coerce,empty:()=>A,equals:()=>equals,fromHex:()=>fromHex,fromString:()=>fromString,isBinary:()=>isBinary,toHex:()=>toHex,toString:()=>bytes_toString});var s={};t.r(s),t.d(s,{Digest:()=>Digest,create:()=>create,decode:()=>digest_decode,equals:()=>digest_equals});var i={};t.r(i),t.d(i,{Hasher:()=>Hasher,from:()=>hasher_from});var a=function encode(e,r,t){r=r||[];var n=t=t||0;for(;e>=d;)r[t++]=255&e|c,e/=128;for(;e&h;)r[t++]=255&e|c,e>>>=7;return r[t]=0|e,encode.bytes=t-n+1,r},c=128,h=-128,d=Math.pow(2,31);var f=function read(e,r){var t,n=0,o=0,s=r=r||0,i=e.length;do{if(s>=i)throw read.bytes=0,new RangeError("Could not decode varint");t=e[s++],n+=o<28?(t&p)<<o:(t&p)*Math.pow(2,o),o+=7}while(t>=u);return read.bytes=s-r,n},u=128,p=127;var l=Math.pow(2,7),b=Math.pow(2,14),w=Math.pow(2,21),y=Math.pow(2,28),g=Math.pow(2,35),m=Math.pow(2,42),C=Math.pow(2,49),v=Math.pow(2,56),x=Math.pow(2,63);const D={encode:a,decode:f,encodingLength:function(e){return e<l?1:e<b?2:e<w?3:e<y?4:e<g?5:e<m?6:e<C?7:e<v?8:e<x?9:10}},varint_decode=(e,r=0)=>[D.decode(e,r),D.decode.bytes],encodeTo=(e,r,t=0)=>(D.encode(e,r,t),r),encodingLength=e=>D.encodingLength(e),A=new Uint8Array(0),toHex=e=>e.reduce(((e,r)=>e+r.toString(16).padStart(2,"0")),""),fromHex=e=>{const r=e.match(/../g);return r?new Uint8Array(r.map((e=>parseInt(e,16)))):A},equals=(e,r)=>{if(e===r)return!0;if(e.byteLength!==r.byteLength)return!1;for(let t=0;t<e.byteLength;t++)if(e[t]!==r[t])return!1;return!0},coerce=e=>{if(e instanceof Uint8Array&&"Uint8Array"===e.constructor.name)return e;if(e instanceof ArrayBuffer)return new Uint8Array(e);if(ArrayBuffer.isView(e))return new Uint8Array(e.buffer,e.byteOffset,e.byteLength);throw new Error("Unknown type, must be binary type")},isBinary=e=>e instanceof ArrayBuffer||ArrayBuffer.isView(e),fromString=e=>(new TextEncoder).encode(e),bytes_toString=e=>(new TextDecoder).decode(e),create=(e,r)=>{const t=r.byteLength,n=encodingLength(e),o=n+encodingLength(t),s=new Uint8Array(o+t);return encodeTo(e,s,0),encodeTo(t,s,n),s.set(r,o),new Digest(e,t,r,s)},digest_decode=e=>{const r=coerce(e),[t,n]=varint_decode(r),[o,s]=varint_decode(r.subarray(n)),i=r.subarray(n+s);if(i.byteLength!==o)throw new Error("Incorrect length");return new Digest(t,o,i,r)},digest_equals=(e,r)=>{if(e===r)return!0;{const t=r;return e.code===t.code&&e.size===t.size&&t.bytes instanceof Uint8Array&&equals(e.bytes,t.bytes)}};class Digest{constructor(e,r,t,n){this.code=e,this.size=r,this.digest=t,this.bytes=n}}const E=function base(e,r){if(e.length>=255)throw new TypeError("Alphabet too long");for(var t=new Uint8Array(256),n=0;n<t.length;n++)t[n]=255;for(var o=0;o<e.length;o++){var s=e.charAt(o),i=s.charCodeAt(0);if(255!==t[i])throw new TypeError(s+" is ambiguous");t[i]=o}var a=e.length,c=e.charAt(0),h=Math.log(a)/Math.log(256),d=Math.log(256)/Math.log(a);function decodeUnsafe(e){if("string"!=typeof e)throw new TypeError("Expected String");if(0===e.length)return new Uint8Array;var r=0;if(" "!==e[r]){for(var n=0,o=0;e[r]===c;)n++,r++;for(var s=(e.length-r)*h+1>>>0,i=new Uint8Array(s);e[r];){var d=t[e.charCodeAt(r)];if(255===d)return;for(var f=0,u=s-1;(0!==d||f<o)&&-1!==u;u--,f++)d+=a*i[u]>>>0,i[u]=d%256>>>0,d=d/256>>>0;if(0!==d)throw new Error("Non-zero carry");o=f,r++}if(" "!==e[r]){for(var p=s-o;p!==s&&0===i[p];)p++;for(var l=new Uint8Array(n+(s-p)),b=n;p!==s;)l[b++]=i[p++];return l}}}return{encode:function encode(r){if(r instanceof Uint8Array||(ArrayBuffer.isView(r)?r=new Uint8Array(r.buffer,r.byteOffset,r.byteLength):Array.isArray(r)&&(r=Uint8Array.from(r))),!(r instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(0===r.length)return"";for(var t=0,n=0,o=0,s=r.length;o!==s&&0===r[o];)o++,t++;for(var i=(s-o)*d+1>>>0,h=new Uint8Array(i);o!==s;){for(var f=r[o],u=0,p=i-1;(0!==f||u<n)&&-1!==p;p--,u++)f+=256*h[p]>>>0,h[p]=f%a>>>0,f=f/a>>>0;if(0!==f)throw new Error("Non-zero carry");n=u,o++}for(var l=i-n;l!==i&&0===h[l];)l++;for(var b=c.repeat(t);l<i;++l)b+=e.charAt(h[l]);return b},decodeUnsafe,decode:function decode(e){var t=decodeUnsafe(e);if(t)return t;throw new Error(`Non-${r} character`)}}};class Encoder{constructor(e,r,t){this.name=e,this.prefix=r,this.baseEncode=t}encode(e){if(e instanceof Uint8Array)return`${this.prefix}${this.baseEncode(e)}`;throw Error("Unknown type, must be binary type")}}class Decoder{constructor(e,r,t){if(this.name=e,this.prefix=r,void 0===r.codePointAt(0))throw new Error("Invalid prefix character");this.prefixCodePoint=r.codePointAt(0),this.baseDecode=t}decode(e){if("string"==typeof e){if(e.codePointAt(0)!==this.prefixCodePoint)throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);return this.baseDecode(e.slice(this.prefix.length))}throw Error("Can only multibase decode strings")}or(e){return or(this,e)}}class ComposedDecoder{constructor(e){this.decoders=e}or(e){return or(this,e)}decode(e){const r=e[0],t=this.decoders[r];if(t)return t.decode(e);throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)}}const or=(e,r)=>new ComposedDecoder({...e.decoders||{[e.prefix]:e},...r.decoders||{[r.prefix]:r}});class Codec{constructor(e,r,t,n){this.name=e,this.prefix=r,this.baseEncode=t,this.baseDecode=n,this.encoder=new Encoder(e,r,t),this.decoder=new Decoder(e,r,n)}encode(e){return this.encoder.encode(e)}decode(e){return this.decoder.decode(e)}}const from=({name:e,prefix:r,encode:t,decode:n})=>new Codec(e,r,t,n),baseX=({prefix:e,name:r,alphabet:t})=>{const{encode:n,decode:o}=E(t,r);return from({prefix:e,name:r,encode:n,decode:e=>coerce(o(e))})},rfc4648=({name:e,prefix:r,bitsPerChar:t,alphabet:n})=>from({prefix:r,name:e,encode:e=>((e,r,t)=>{const n="="===r[r.length-1],o=(1<<t)-1;let s="",i=0,a=0;for(let n=0;n<e.length;++n)for(a=a<<8|e[n],i+=8;i>t;)i-=t,s+=r[o&a>>i];if(i&&(s+=r[o&a<<t-i]),n)for(;s.length*t&7;)s+="=";return s})(e,n,t),decode:r=>((e,r,t,n)=>{const o={};for(let e=0;e<r.length;++e)o[r[e]]=e;let s=e.length;for(;"="===e[s-1];)--s;const i=new Uint8Array(s*t/8|0);let a=0,c=0,h=0;for(let r=0;r<s;++r){const s=o[e[r]];if(void 0===s)throw new SyntaxError(`Non-${n} character`);c=c<<t|s,a+=t,a>=8&&(a-=8,i[h++]=255&c>>a)}if(a>=t||255&c<<8-a)throw new SyntaxError("Unexpected end of data");return i})(r,n,t,e)}),I=baseX({name:"base58btc",prefix:"z",alphabet:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"}),U=(baseX({name:"base58flickr",prefix:"Z",alphabet:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"}),rfc4648({prefix:"b",name:"base32",alphabet:"abcdefghijklmnopqrstuvwxyz234567",bitsPerChar:5})),S=(rfc4648({prefix:"B",name:"base32upper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",bitsPerChar:5}),rfc4648({prefix:"c",name:"base32pad",alphabet:"abcdefghijklmnopqrstuvwxyz234567=",bitsPerChar:5}),rfc4648({prefix:"C",name:"base32padupper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",bitsPerChar:5}),rfc4648({prefix:"v",name:"base32hex",alphabet:"0123456789abcdefghijklmnopqrstuv",bitsPerChar:5}),rfc4648({prefix:"V",name:"base32hexupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV",bitsPerChar:5}),rfc4648({prefix:"t",name:"base32hexpad",alphabet:"0123456789abcdefghijklmnopqrstuv=",bitsPerChar:5}),rfc4648({prefix:"T",name:"base32hexpadupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV=",bitsPerChar:5}),rfc4648({prefix:"h",name:"base32z",alphabet:"ybndrfg8ejkmcpqxot1uwisza345h769",bitsPerChar:5}),(e,r)=>{const{bytes:t,version:n}=e;return 0===n?toStringV0(t,baseCache(e),r||I.encoder):toStringV1(t,baseCache(e),r||U.encoder)}),z=new WeakMap,baseCache=e=>{const r=z.get(e);if(null==r){const r=new Map;return z.set(e,r),r}return r};class CID{constructor(e,r,t,n){this.code=r,this.version=e,this.multihash=t,this.bytes=n,this["/"]=n}get asCID(){return this}get byteOffset(){return this.bytes.byteOffset}get byteLength(){return this.bytes.byteLength}toV0(){switch(this.version){case 0:return this;case 1:{const{code:e,multihash:r}=this;if(e!==M)throw new Error("Cannot convert a non dag-pb CID to CIDv0");if(r.code!==P)throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");return CID.createV0(r)}default:throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`)}}toV1(){switch(this.version){case 0:{const{code:e,digest:r}=this.multihash,t=create(e,r);return CID.createV1(this.code,t)}case 1:return this;default:throw Error(`Can not convert CID version ${this.version} to version 1. This is a bug please report`)}}equals(e){return CID.equals(this,e)}static equals(e,r){const t=r;return t&&e.code===t.code&&e.version===t.version&&digest_equals(e.multihash,t.multihash)}toString(e){return S(this,e)}toJSON(){return{"/":S(this)}}link(){return this}get[Symbol.toStringTag](){return"CID"}[Symbol.for("nodejs.util.inspect.custom")](){return`CID(${this.toString()})`}static asCID(e){if(null==e)return null;const r=e;if(r instanceof CID)return r;if(null!=r["/"]&&r["/"]===r.bytes||r.asCID===r){const{version:e,code:t,multihash:n,bytes:o}=r;return new CID(e,t,n,o||encodeCID(e,t,n.bytes))}if(!0===r[V]){const{version:e,multihash:t,code:n}=r,o=digest_decode(t);return CID.create(e,n,o)}return null}static create(e,r,t){if("number"!=typeof r)throw new Error("String codecs are no longer supported");if(!(t.bytes instanceof Uint8Array))throw new Error("Invalid digest");switch(e){case 0:if(r!==M)throw new Error(`Version 0 CID must use dag-pb (code: ${M}) block encoding`);return new CID(e,r,t,t.bytes);case 1:{const n=encodeCID(e,r,t.bytes);return new CID(e,r,t,n)}default:throw new Error("Invalid version")}}static createV0(e){return CID.create(0,M,e)}static createV1(e,r){return CID.create(1,e,r)}static decode(e){const[r,t]=CID.decodeFirst(e);if(t.length)throw new Error("Incorrect length");return r}static decodeFirst(e){const r=CID.inspectBytes(e),t=r.size-r.multihashSize,n=coerce(e.subarray(t,t+r.multihashSize));if(n.byteLength!==r.multihashSize)throw new Error("Incorrect length");const o=n.subarray(r.multihashSize-r.digestSize),s=new Digest(r.multihashCode,r.digestSize,o,n);return[0===r.version?CID.createV0(s):CID.createV1(r.codec,s),e.subarray(r.size)]}static inspectBytes(e){let r=0;const next=()=>{const[t,n]=varint_decode(e.subarray(r));return r+=n,t};let t=next(),n=M;if(18===t?(t=0,r=0):n=next(),0!==t&&1!==t)throw new RangeError(`Invalid CID version ${t}`);const o=r,s=next(),i=next(),a=r+i;return{version:t,codec:n,multihashCode:s,digestSize:i,multihashSize:a-o,size:a}}static parse(e,r){const[t,n]=parseCIDtoBytes(e,r),o=CID.decode(n);if(0===o.version&&"Q"!==e[0])throw Error("Version 0 CID string must not include multibase prefix");return baseCache(o).set(t,e),o}}const parseCIDtoBytes=(e,r)=>{switch(e[0]){case"Q":{const t=r||I;return[I.prefix,t.decode(`${I.prefix}${e}`)]}case I.prefix:{const t=r||I;return[I.prefix,t.decode(e)]}case U.prefix:{const t=r||U;return[U.prefix,t.decode(e)]}default:if(null==r)throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");return[e[0],r.decode(e)]}},toStringV0=(e,r,t)=>{const{prefix:n}=t;if(n!==I.prefix)throw Error(`Cannot string encode V0 in ${t.name} encoding`);const o=r.get(n);if(null==o){const o=t.encode(e).slice(1);return r.set(n,o),o}return o},toStringV1=(e,r,t)=>{const{prefix:n}=t,o=r.get(n);if(null==o){const o=t.encode(e);return r.set(n,o),o}return o},M=112,P=18,encodeCID=(e,r,t)=>{const n=encodingLength(e),o=n+encodingLength(r),s=new Uint8Array(o+t.byteLength);return encodeTo(e,s,0),encodeTo(r,s,n),s.set(t,o),s},V=Symbol.for("@ipld/js-cid/CID"),hasher_from=({name:e,code:r,encode:t})=>new Hasher(e,r,t);class Hasher{constructor(e,r,t){this.name=e,this.code=r,this.encode=t}digest(e){if(e instanceof Uint8Array){const r=this.encode(e);return r instanceof Uint8Array?create(this.code,r):r.then((e=>create(this.code,e)))}throw Error("Unknown type, must be binary type")}}}}]);