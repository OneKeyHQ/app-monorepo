const axios = require('axios');
const path = require('path');
const dotenv = require('dotenv');
const prettier = require('prettier');
const fs = require('fs');

dotenv.config({
  path: path.resolve(__dirname, '../.env.version'),
});

const endpoint = 'https://api.onekeycn.com/api/config/app';
// const endpoint = 'http://localhost:9000/api/config/app';

const comments = `/*
  Auto-Gen by development/build-networklist.js from https://api.onekeycn.com/api/config/app
  Do NOT edit this file directly.
 */
`;

const generateNetworkIds = (networks) => {
  const networkCodeIdPairs = {};
  networks
    .filter((n) => n.defaultEnabled || n.isTestnet)
    .forEach((network) => {
      networkCodeIdPairs[network.shortcode] = network.id;
    });

  const output = `
    ${comments}

    export const OnekeyNetwork = ${JSON.stringify(
      networkCodeIdPairs,
      null,
      2,
    )} as const;\n

    ${comments}
  `;

  prettier.resolveConfig('.prettierrc.js').then((options) => {
    const formatted = prettier.format(output, {
      ...options,
      parser: 'typescript',
    });
    fs.writeFileSync('packages/shared/src/config/networkIds.ts', formatted);
  });
};

const generatePresetNetworks = (networks) => {
  const output = `
    ${comments}
    import type { IServerNetwork } from '../../types';

    export const serverPresetNetworks = ${JSON.stringify(
      networks,
      null,
      2,
    )} as unknown as IServerNetwork[];\n

    export const OnekeyNetworkUpdatedAt = ${Date.now()};\n
    ${comments}
  `;

  prettier.resolveConfig('.prettierrc.js').then((options) => {
    const formatted = prettier.format(output, {
      ...options,
      parser: 'typescript',
    });
    fs.writeFileSync('packages/shared/src/config/presetNetworks.ts', formatted);
  });
};

const main = async () => {
  try {
    const version = process.env.VERSION || '';
    const res = await axios.get(`${endpoint}?version=${version}`);

    if (!Array.isArray(res.data.networks)) {
      throw new Error('[build-networklist] error, networks is not an array');
    }

    const networks = res.data.networks.filter((n) => n.status !== 'TRASH');

    generateNetworkIds(networks);

    generatePresetNetworks(networks);
  } catch (error) {
    console.error(`[build-networklist] error: ${error.message}`);
    console.error(error);
  }
};

main();
